{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Crossplane GitOps Tutorial","text":"<p>This tutorial is designed for Senior DevOps Engineers who want to master the art of building and managing cloud infrastructure using a GitOps workflow, powered by Crossplane and ArgoCD.</p> <p>We will move beyond simple examples and dive deep into building a robust, production-ready Internal Developer Platform (IDP). You will learn how to manage infrastructure for multiple cloud providers, enforce security policies, and create a self-service ecosystem for your development teams.</p>"},{"location":"#what-you-will-learn","title":"What You Will Learn","text":"<ul> <li>Infrastructure as Code (IaC) with Crossplane: Define, compose, and manage your cloud resources (like Kubernetes clusters, databases, and networking) directly from Kubernetes YAML.</li> <li>GitOps with ArgoCD: Use Git as the single source of truth for both your infrastructure and application deployments.</li> <li>Multi-Cloud Provisioning: Learn to provision and manage resources across Azure and Google Cloud Platform (GCP).</li> <li>Production-Ready Patterns: Implement best practices for security, observability, and repository management.</li> <li>Platform Engineering: Build a true self-service platform that empowers developers to provision the resources they need, when they need them.</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>This is an advanced course. We assume you have a strong, hands-on understanding of:</p> <ul> <li>Kubernetes: You should be comfortable with <code>kubectl</code>, Kubernetes objects (Deployments, Services, etc.), and general cluster administration.</li> <li>Docker: You should know how to build, run, and manage Docker containers.</li> <li>Git: You should be proficient with core Git commands, branching, and pull requests.</li> <li>General Cloud Concepts: You should understand basic concepts like VPCs, subnets, and IAM roles.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to dive in? Let's begin by setting up your local development environment.</p> <p>\u27a1\ufe0f Start the Tutorial: Introduction</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Even in a well-oiled GitOps machine, things can go wrong. This page provides a guide to debugging common issues in your Crossplane and ArgoCD setup.</p>"},{"location":"troubleshooting/#1-my-claim-isnt-becoming-ready","title":"1. My Claim Isn't Becoming <code>Ready</code>","text":"<p>This is the most common problem. Here's a systematic approach to debugging it.</p>"},{"location":"troubleshooting/#step-1-crossplane-trace","title":"Step 1: <code>crossplane trace</code>","text":"<p>This is always your first step. It will show you the entire resource tree and pinpoint which resource is failing.</p> <pre><code>crossplane trace &lt;KIND&gt; &lt;NAME&gt;\n# e.g., crossplane trace akscluster my-failing-cluster\n</code></pre> <p>Look for the resource that does not have <code>READY: True</code>.</p>"},{"location":"troubleshooting/#step-2-kubectl-describe-the-failing-resource","title":"Step 2: <code>kubectl describe</code> the Failing Resource","text":"<p>Once you've identified the failing resource, use <code>kubectl describe</code> to get more details.</p> <pre><code>kubectl describe &lt;KIND&gt; &lt;NAME&gt;\n# e.g., kubectl describe managedresource my-failing-vm\n</code></pre> <p>Look at the <code>Events</code> section at the bottom. This will often contain a specific error message from the Crossplane provider.</p> <p>Common Errors:</p> <ul> <li><code>403 Forbidden</code>: The Crossplane provider's Service Principal or credentials do not have the required IAM permissions in the cloud provider.</li> <li><code>InvalidRequest</code>: You have passed an invalid value in the claim, which was then passed to the cloud provider API. Check your claim's <code>spec</code>.</li> <li><code>NotFound</code>: The resource was deleted out-of-band (e.g., in the cloud console), and Crossplane is trying to update it.</li> </ul>"},{"location":"troubleshooting/#step-3-check-the-provider-pod-logs","title":"Step 3: Check the Provider Pod Logs","text":"<p>If the events aren't clear, look at the logs of the relevant Crossplane provider pod.</p> <pre><code># Find the provider pod\nkubectl get pods -n crossplane-system | grep provider-azure\n\n# Tail the logs\nkubectl logs -f -n crossplane-system &lt;PROVIDER_POD_NAME&gt;\n</code></pre> <p>The logs will give you the raw error messages from the cloud provider's API.</p>"},{"location":"troubleshooting/#2-argocd-app-is-degraded-or-progressing","title":"2. ArgoCD App is <code>Degraded</code> or <code>Progressing</code>","text":""},{"location":"troubleshooting/#degraded","title":"<code>Degraded</code>","text":"<ul> <li>Check the Health Check: The resource is failing its health check. Click on the resource in the ArgoCD UI to see the health status message.</li> <li>Crossplane Issue: Often, an ArgoCD app is <code>Degraded</code> because a Crossplane resource it manages is failing. Use the troubleshooting steps above to debug the Crossplane side.</li> </ul>"},{"location":"troubleshooting/#progressing","title":"<code>Progressing</code>","text":"<ul> <li>Missing Health Check: The most common reason for a resource to be stuck in <code>Progressing</code> is that ArgoCD doesn't have a custom health check for it. The resource might be perfectly healthy, but ArgoCD doesn't know how to verify it.</li> <li>Long-Running Operation: The resource is legitimately taking a long time to create (e.g., provisioning a large database).</li> </ul>"},{"location":"troubleshooting/#3-my-composition-isnt-being-selected","title":"3. My <code>Composition</code> Isn't Being Selected","text":"<p>If you create a claim and nothing happens (no <code>CompositeResource</code> is created), it means Crossplane could not find a <code>Composition</code> to satisfy the claim.</p> <ul> <li>Check Labels/Selectors: If your <code>Composition</code> uses a <code>claimSelector</code>, ensure the labels on your claim match the selector.</li> <li>Check <code>compositeTypeRef</code>: Ensure the <code>compositeTypeRef</code> in your <code>Composition</code> matches the <code>group</code>, <code>version</code>, and <code>kind</code> of the <code>CompositeResourceDefinition</code>.</li> <li>Check <code>claimNames</code>: Ensure the <code>claimNames</code> in your XRD match the <code>kind</code> of the claim you are creating.</li> </ul>"},{"location":"troubleshooting/#4-pods-are-in-imagepullbackoff","title":"4. Pods are in <code>ImagePullBackOff</code>","text":"<ul> <li>Check Image Name: You may have a typo in the container image name in your <code>Deployment</code> or <code>Composition</code>.</li> <li>Private Registry: If the image is in a private registry, you need to create an <code>imagePullSecret</code> and attach it to the <code>Pod</code>'s <code>ServiceAccount</code>.</li> <li>Kyverno Policy: If you are using an image signature policy, the pod may be blocked because the image is not signed or the signature is invalid. Check the Kyverno pod logs.</li> </ul> <p>By following these steps, you should be able to diagnose and resolve the vast majority of issues you encounter in your GitOps journey.</p>"},{"location":"advanced/","title":"Advanced Topics","text":""},{"location":"advanced/01-composition-functions/","title":"01: Extending Crossplane with Composition Functions","text":"<p>Patch-and-transform is a powerful way to create <code>Compositions</code>, but it has its limits. What if you need to add complex logic, conditional resource creation, or loop over a list to generate resources? For this, we use Composition Functions.</p>"},{"location":"advanced/01-composition-functions/#what-are-composition-functions","title":"What are Composition Functions?","text":"<p>A Composition Function is a custom program that you write, package as a container image, and reference in your <code>Composition</code>. When Crossplane reconciles your <code>CompositeResource</code>, it sends the <code>Observed</code> and <code>Desired</code> state to your function. Your function then returns a new <code>Desired</code> state, which Crossplane applies.</p> <p>This allows you to inject any logic you can imagine into the composition process.</p>"},{"location":"advanced/01-composition-functions/#why-use-them","title":"Why Use Them?","text":"<ul> <li>Conditional Logic: Only create a resource if a certain field in the claim is set (e.g., <code>if claim.spec.ha == true, create a read replica</code>).</li> <li>Looping: Create a variable number of resources based on a list in the claim (e.g., <code>for each port in claim.spec.firewallPorts, create a FirewallRule</code>).</li> <li>External Lookups: Call an external API to fetch data and use it to enrich your resources.</li> <li>Complex Validation: Implement validation logic that is too complex for OpenAPI schema validation.</li> </ul>"},{"location":"advanced/01-composition-functions/#how-they-work","title":"How They Work","text":"<p>Your <code>Composition</code> is modified to run in <code>Pipeline</code> mode, which consists of a series of steps. One of these steps can be your function.</p> <p>Example <code>Composition</code> with a Function:</p> <pre><code>apiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-function-composition\nspec:\n  compositeTypeRef: # ...\n  mode: Pipeline\n  pipeline:\n    - step: patch-and-transform\n      functionRef:\n        name: function-patch-and-transform\n    - step: my-custom-logic\n      functionRef:\n        name: my-awesome-function\n      input:\n        apiVersion: my-fn.example.org/v1alpha1\n        kind: MyFunctionInput\n        spec:\n          someValue: \"hello world\"\n</code></pre> <p>In this example:</p> <ol> <li>The <code>mode</code> is set to <code>Pipeline</code>.</li> <li>The first step is the standard <code>patch-and-transform</code> function.</li> <li>The second step calls our custom function, <code>my-awesome-function</code>.</li> <li>We can pass custom <code>input</code> to our function.</li> </ol>"},{"location":"advanced/01-composition-functions/#writing-a-composition-function","title":"Writing a Composition Function","text":"<p>Composition Functions can be written in any language that can be packaged in a container. Go is a popular choice due to its strong typing and Kubernetes ecosystem tooling.</p> <p>Crossplane provides libraries (<code>crossplane-runtime/pkg/function</code> and <code>crossplane-runtime/pkg/function/proto</code>) to simplify the process.</p>"},{"location":"advanced/01-composition-functions/#the-functionrunner","title":"The <code>FunctionRunner</code>","text":"<p>Your function's <code>main.go</code> will typically use a <code>FunctionRunner</code>.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/crossplane/crossplane-runtime/pkg/errors\"\n    \"github.com/crossplane/crossplane-runtime/pkg/function\"\n    fnv1beta1 \"github.com/crossplane/function-sdk-go/proto/v1beta1\"\n)\n\nfunc main() {\n    function.Run(function.HandlerFunc(func(ctx context.Context, req *fnv1beta1.RunFunctionRequest) (*fnv1beta1.RunFunctionResponse, error) {\n        // 1. Get the observed and desired state from the request.\n        observed, err := function.ParseObservedResources(req)\n        if err != nil {\n            return nil, errors.Wrap(err, \"cannot parse observed resources\")\n        }\n        desired, err := function.ParseDesiredResources(req)\n        if err != nil {\n            return nil, errors.Wrap(err, \"cannot parse desired resources\")\n        }\n\n        // 2. Add your custom logic here.\n        // For example, loop over a field in the claim and add new resources to the `desired` map.\n\n        // 3. Return the modified desired state.\n        if err := function.ComposeDesiredResources(req, desired); err != nil {\n            return nil, errors.Wrap(err, \"cannot compose desired resources\")\n        }\n\n        return req, nil\n    }))\n}\n</code></pre>"},{"location":"advanced/01-composition-functions/#exercise-a-looping-function","title":"Exercise: A Looping Function","text":"<p>Objective: Create a Composition Function that creates a set of Azure Firewall rules based on a list in the claim.</p> <p>Tasks:</p> <ol> <li>Define the XRD: Create a <code>CompositeFirewall</code> with a claim, <code>Firewall</code>, that has a field <code>allowedPorts</code> which is an array of strings.</li> <li>Write the Function:<ul> <li>Create a new Go project for your function.</li> <li>The function should get the <code>allowedPorts</code> array from the claim.</li> <li>It should loop through the array.</li> <li>For each port, it should create a new Azure <code>FirewallRule</code> resource and add it to the desired state.</li> </ul> </li> <li>Package and Push: Build the function's Docker image and push it to a registry.</li> <li>Create the <code>Function</code> resource: Define a <code>Function</code> resource in your <code>platform</code> repository that points to your new image.</li> <li>Create the <code>Composition</code>: Create a <code>Composition</code> that uses your new function in its pipeline.</li> <li>Claim a <code>Firewall</code>: Create a <code>Firewall</code> claim with a list of ports.</li> <li>Verify: Check in the Azure portal that a firewall rule was created for each port in your claim.</li> </ol> <p>Composition Functions are an advanced topic, but they unlock the full potential of Crossplane, allowing you to build a truly powerful and customized Internal Developer Platform.</p> <p>\u27a1\ufe0f Next: Multi-Cluster Management</p>"},{"location":"advanced/02-multi-cluster-management/","title":"02: Multi-Cluster Management","text":"<p>We have successfully used Crossplane to provision Kubernetes clusters (AKS and GKE). This is known as Cluster as a Service. The next logical step is to manage the applications and configurations on those newly created clusters.</p> <p>This is the domain of Multi-Cluster Management (MCM).</p>"},{"location":"advanced/02-multi-cluster-management/#the-challenge","title":"The Challenge","text":"<p>How do we use our GitOps workflow, which is centered around our main KinD cluster, to push manifests and configurations to the new AKS and GKE clusters we are creating?</p>"},{"location":"advanced/02-multi-cluster-management/#solution-argocd-applicationsets-crossplane","title":"Solution: ArgoCD ApplicationSets + Crossplane","text":"<p>We can combine the power of Crossplane and ArgoCD ApplicationSets to create a fully automated, closed-loop multi-cluster management system.</p>"},{"location":"advanced/02-multi-cluster-management/#the-cluster-object","title":"The <code>Cluster</code> Object","text":"<p>ArgoCD has a concept of a <code>Cluster</code>. You can tell ArgoCD about a new remote cluster by creating a Kubernetes <code>Secret</code> with the cluster's kubeconfig.</p> <p>The <code>ApplicationSet</code> controller can then use this <code>Cluster</code> secret as a target for deploying applications.</p>"},{"location":"advanced/02-multi-cluster-management/#the-workflow","title":"The Workflow","text":"<ol> <li> <p>Crossplane Provisions a Cluster: We start by claiming an <code>AKSCluster</code> or <code>GKECluster</code> as we did in the previous sections.</p> </li> <li> <p>Crossplane Creates a Kubeconfig Secret: Our <code>Composition</code> is configured to patch the <code>kubeconfig</code> from the provisioned cluster into the connection details of the claim. This creates a <code>Secret</code> in our main KinD cluster.</p> </li> <li> <p>The <code>ApplicationSet</code> Generator: We will create an <code>ApplicationSet</code> that uses a <code>Cluster</code> generator. This generator automatically discovers any <code>Secret</code> that is labeled as an ArgoCD cluster secret.</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook-to-all-clusters\nspec:\n  generators:\n  - clusters: {}\n  template:\n    metadata:\n      name: '{{name}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps.git\n        targetRevision: HEAD\n        path: guestbook\n      destination:\n        server: '{{server}}'\n        namespace: guestbook\n</code></pre> </li> <li> <p>Labeling the Secret: We need to tell the <code>ApplicationSet</code> generator that our Crossplane-generated kubeconfig secret represents a new cluster. We can do this with a Composition Function or a simple Kubernetes controller that watches for our <code>AKSCluster</code> claims and automatically adds the <code>argocd.argoproj.io/secret-type: cluster</code> label to the generated secret.</p> </li> <li> <p>ArgoCD Deploys the App:</p> <ul> <li>The <code>ApplicationSet</code> controller discovers the newly labeled secret.</li> <li>It adds the new AKS/GKE cluster to ArgoCD's list of managed clusters.</li> <li>It then uses the <code>template</code> to generate a new ArgoCD <code>Application</code>.</li> <li>This new <code>Application</code> points to the <code>guestbook</code> app, but its <code>destination.server</code> is set to the API server of the new remote cluster.</li> <li>ArgoCD syncs the guestbook manifests to the new AKS/GKE cluster.</li> </ul> </li> </ol>"},{"location":"advanced/02-multi-cluster-management/#the-result-a-fully-automated-pipeline","title":"The Result: A Fully Automated Pipeline","text":"<p>With this pattern, the entire lifecycle is automated:</p> <ol> <li>A developer claims a new <code>AKSCluster</code> in a Git repository.</li> <li>Crossplane provisions the cluster.</li> <li>Crossplane creates a kubeconfig secret.</li> <li>A controller labels the secret for ArgoCD.</li> <li>The <code>ApplicationSet</code> detects the new cluster.</li> <li>ArgoCD deploys a standard set of baseline applications (e.g., an ingress controller, a monitoring agent, the guestbook app) to the new cluster without any human intervention.</li> </ol> <p>This is the pinnacle of GitOps-driven platform engineering. We have used Git to orchestrate the creation of a new cluster and the bootstrapping of all its day-1 applications.</p> <p>\u27a1\ufe0f Next: Troubleshooting</p>"},{"location":"crossplane-advanced-patterns/","title":"Crossplane Advanced Patterns","text":"<p>Welcome to the advanced section where you'll learn to build reusable infrastructure patterns using Crossplane v2's most powerful feature: Compositions.</p>"},{"location":"crossplane-advanced-patterns/#what-youll-master","title":"What You'll Master","text":"<p>By the end of this section, you'll be able to:</p> <ul> <li>\u2705 Design Composite Resource APIs that abstract complexity from developers</li> <li>\u2705 Build Compositions that provision multiple Azure resources together</li> <li>\u2705 Create Developer-Friendly Interfaces for infrastructure self-service</li> <li>\u2705 Implement Environment Strategies for dev/staging/prod workflows</li> <li>\u2705 Handle Complex Resource Dependencies and relationships</li> </ul>"},{"location":"crossplane-advanced-patterns/#from-resources-to-platforms","title":"From Resources to Platforms","text":"<p>In the fundamentals section, you learned to create individual cloud resources. Now we'll combine multiple resources into cohesive, reusable patterns that developers can easily consume.</p>"},{"location":"crossplane-advanced-patterns/#the-platform-engineering-journey","title":"The Platform Engineering Journey","text":"<pre><code>graph LR\n    A[Individual Resources&lt;br/&gt;Resource Groups] --&gt; B[Composed Resources&lt;br/&gt;Complete Environments]\n    B --&gt; C[Developer Platform&lt;br/&gt;Self-Service APIs]\n    C --&gt; D[Production Platform&lt;br/&gt;Multi-Environment]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n</code></pre>"},{"location":"crossplane-advanced-patterns/#key-concepts-preview","title":"Key Concepts Preview","text":""},{"location":"crossplane-advanced-patterns/#composite-resource-definition-xrd","title":"Composite Resource Definition (XRD)","text":"<p>Purpose: Defines the API that developers use to request infrastructure Analogy: Like defining a function signature - what parameters it takes and what it returns</p>"},{"location":"crossplane-advanced-patterns/#composition","title":"Composition","text":"<p>Purpose: Implementation of how to build the infrastructure Analogy: Like the function body - the actual logic that creates resources</p>"},{"location":"crossplane-advanced-patterns/#composite-resource-xr","title":"Composite Resource (XR)","text":"<p>Purpose: The instance created when someone uses your API Analogy: Like a function call result - the actual running instance</p>"},{"location":"crossplane-advanced-patterns/#module-overview","title":"Module Overview","text":""},{"location":"crossplane-advanced-patterns/#module-1-your-first-composition-45-minutes","title":"Module 1: Your First Composition (45 minutes)","text":"<p>What you'll build: A complete development environment with networking and compute resources</p> <p>Learning focus: - XRD design and API patterns - Basic Composition structure - Resource patching and templating - GitOps deployment of platform components</p> <p>Deliverables: - Working development environment API - Reusable Composition for team use - Developer documentation</p>"},{"location":"crossplane-advanced-patterns/#module-2-networking-composition-30-minutes","title":"Module 2: Networking Composition (30 minutes)","text":"<p>What you'll add: Virtual networks, subnets, and security groups to your environment</p> <p>Learning focus: - Resource dependencies and references - Advanced patching strategies - Network security patterns - Multi-resource orchestration</p> <p>Deliverables: - Complete networking stack Composition - Security best practices implementation - Cross-resource reference patterns</p>"},{"location":"crossplane-advanced-patterns/#module-3-environment-patterns-60-minutes","title":"Module 3: Environment Patterns (60 minutes)","text":"<p>What you'll implement: Different compositions for dev, staging, and production environments</p> <p>Learning focus: - Environment-specific configurations - Resource sizing and scaling patterns - Cost optimization strategies - Multi-composition management</p> <p>Deliverables: - Environment-aware platform - Cost-optimized resource patterns - Production-ready governance</p>"},{"location":"crossplane-advanced-patterns/#prerequisites-review","title":"Prerequisites Review","text":"<p>Ensure you've completed the Crossplane Fundamentals section:</p> <ul> <li>\u2705 Azure provider configured and working</li> <li>\u2705 Successfully created managed resources</li> <li>\u2705 Understanding of Crossplane architecture</li> <li>\u2705 Comfortable with GitOps workflows</li> </ul>"},{"location":"crossplane-advanced-patterns/#design-philosophy","title":"Design Philosophy","text":""},{"location":"crossplane-advanced-patterns/#developer-experience-first","title":"Developer Experience First","text":"<ul> <li>Simple APIs: Hide complexity behind easy-to-use interfaces</li> <li>Self-documenting: APIs that explain themselves</li> <li>Fail-fast: Clear error messages and validation</li> <li>Consistent: Same patterns work across environments</li> </ul>"},{"location":"crossplane-advanced-patterns/#production-ready","title":"Production Ready","text":"<ul> <li>Security integrated: Proper RBAC and secret management</li> <li>Monitoring built-in: Health checks and observability</li> <li>Scalable patterns: Handle growth from dev to enterprise</li> <li>GitOps native: Everything managed through version control</li> </ul>"},{"location":"crossplane-advanced-patterns/#enterprise-patterns","title":"Enterprise Patterns","text":"<ul> <li>Governance embedded: Policy and compliance built-in</li> <li>Multi-tenant aware: Isolation and resource limits</li> <li>Cost conscious: Right-sizing and optimization</li> <li>Team collaborative: Clear ownership and interfaces</li> </ul>"},{"location":"crossplane-advanced-patterns/#real-world-impact","title":"Real-World Impact","text":"<p>After completing this section, you'll have built a complete Internal Developer Platform that:</p> <ul> <li>Developers love: Simple YAML requests complex infrastructure</li> <li>Operations trust: Secure, compliant, and monitored</li> <li>Business supports: Cost-effective and scalable</li> <li>Teams adopt: Clear documentation and examples</li> </ul>"},{"location":"crossplane-advanced-patterns/#time-investment","title":"Time Investment","text":"<p>Total time: ~2.5 hours of hands-on exercises Format: Self-paced with immediate feedback Approach: Build working platform incrementally</p>"},{"location":"crossplane-advanced-patterns/#success-criteria","title":"Success Criteria","text":"<p>You'll know you've mastered these patterns when you can:</p> <ul> <li>[ ] Design intuitive APIs for infrastructure consumption</li> <li>[ ] Build Compositions that handle complex resource relationships</li> <li>[ ] Implement proper error handling and validation</li> <li>[ ] Create environment-specific deployment patterns</li> <li>[ ] Document and share platform capabilities with teams</li> </ul>"},{"location":"crossplane-advanced-patterns/#ready-to-build","title":"Ready to Build?","text":"<p>Let's start by creating your first Composition - a complete development environment that developers can request with a simple YAML file.</p> <p>\u27a1\ufe0f Module 1: Your First Composition</p>"},{"location":"crossplane-advanced-patterns/#platform-engineering-mindset","title":"Platform Engineering Mindset","text":"<p>As you work through these modules, think like a platform engineer:</p>"},{"location":"crossplane-advanced-patterns/#questions-to-ask","title":"Questions to Ask","text":"<ul> <li>How can I make this easier for developers?</li> <li>What failure modes should I handle gracefully?</li> <li>How will this scale as the team grows?</li> <li>What would good documentation look like?</li> <li>How can I enforce best practices automatically?</li> </ul>"},{"location":"crossplane-advanced-patterns/#principles-to-follow","title":"Principles to Follow","text":"<ul> <li>Abstract complexity, not capability</li> <li>Fail fast with clear error messages</li> <li>Document by example</li> <li>Version APIs thoughtfully</li> <li>Monitor everything</li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/","title":"Module 1: Your First Composition","text":"<p>Time: 45 minutes Objective: Build a reusable development environment API that developers can use to get complete infrastructure with a single YAML request</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#overview","title":"Overview","text":"<p>Individual Managed Resources are powerful, but creating complete environments requires multiple resources working together. Compositions solve this by bundling resources into reusable patterns with developer-friendly APIs.</p> <p>What you'll build: - An <code>XDevEnvironment</code> API that creates Resource Group + Virtual Network - Simple developer interface hiding Azure complexity - GitOps deployment for the platform components - Working example that others can copy and customize</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#tutorial-approach-single-repository-learning","title":"Tutorial Approach: Single Repository Learning","text":"<p>This tutorial uses a single repository approach to keep learning simple and focused. You'll work entirely within the cloned tutorial repository, avoiding the complexity of multi-repository setups.</p> <p>Why single repository for learning: - Simplified workflow: No need to manage multiple repos, branches, or access controls - Immediate feedback: See all components together in one place - Easy experimentation: Modify, commit, and test in the same repository - Clear structure: Understand separation of concerns without repo complexity</p> <p>Real-world considerations: - Production setups often use separate repositories for platform components vs. application instances - Multi-repo strategies enable different teams to own different parts - This tutorial establishes patterns you can later split across repositories as needed</p> <p>Learning progression: 1. Learn concepts in this single repository 2. Understand patterns and relationships 3. Apply to production with appropriate repository separation later</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#the-problem-were-solving","title":"The Problem We're Solving","text":"<p>Currently, developers need to: 1. Create Resource Group 2. Create Virtual Network 3. Configure subnets 4. Set up security groups 5. Remember all the configuration details</p> <p>After this module, they'll just write: <pre><code>apiVersion: platform.tutorial.com/v1alpha1\nkind: XDevEnvironment\nmetadata:\n  namespace: default\n  name: alice-dev\nspec:\n  parameters:\n    name: alice-dev\n    region: eastus\n  crossplane:\n    compositionRef:\n      name: dev-environment-composition\n</code></pre></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-1-apply-rock-solid-gitops-structure","title":"Step 1: Apply Rock-Solid GitOps Structure","text":"<p>Following the GitHub Flow + Environment-Based Directory pattern from our GitOps fundamentals:</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#11-create-gitops-ready-directory-structure","title":"1.1 Create GitOps-Ready Directory Structure","text":"<pre><code># Platform components (shared, reusable)\nmkdir -p platform-core/xrds\nmkdir -p platform-core/compositions\nmkdir -p platform-core/functions\n\n# Environment-specific deployments (follows GitOps workflow pattern)\nmkdir -p environments/dev/infrastructure\nmkdir -p environments/staging/infrastructure  \nmkdir -p environments/production/infrastructure\n\n# GitOps Applications (manages platform and environments)\nmkdir -p applications/platform\nmkdir -p applications/environments\n</code></pre> <p>GitOps Structure Explanation: - <code>platform-core/</code>: Platform components that serve all environments (XRDs, Compositions, Functions) - <code>environments/{env}/infrastructure/</code>: Environment-specific Crossplane resource instances - <code>applications/platform/</code>: ArgoCD Applications that manage platform components - <code>applications/environments/</code>: ArgoCD Applications that manage environment instances</p> <p>This structure supports the GitHub Flow workflow we established: 1. Feature branches modify platform components or environment configs 2. PR environments automatically test infrastructure changes in <code>dev</code> 3. Controlled promotion from dev \u2192 staging \u2192 production 4. Emergency hotfixes can bypass normal flow when needed</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#12-platform-component-workflow-integration","title":"1.2 Platform Component Workflow Integration","text":"<p>Platform engineers work on reusable components: <pre><code># Feature branch for platform enhancement\ngit checkout -b feature/enhanced-dev-environment\n\n# Work on platform components\nvim platform-core/xrds/dev-environment-xrd.yaml\nvim platform-core/compositions/dev-environment-composition.yaml\n\n# Commit platform changes\ngit add platform-core/\ngit commit -m \"feat: enhance dev environment with networking support\"\n</code></pre></p> <p>Development teams create environment instances: <pre><code># Feature branch for new environment\ngit checkout -b feature/alice-dev-environment\n\n# Create environment instance\nvim environments/dev/infrastructure/alice-dev.yaml\n\n# Commit environment instance\ngit add environments/dev/infrastructure/\ngit commit -m \"feat: create Alice's development environment\"\n</code></pre></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#13-crossplane-in-the-gitops-promotion-pipeline","title":"1.3 Crossplane in the GitOps Promotion Pipeline","text":"<p>Following our established Environment-Based Directory Structure pattern:</p> <pre><code>graph LR\n    A[Feature Branch&lt;br/&gt;platform-core/*] --&gt; B[PR Testing&lt;br/&gt;dev environment]\n    B --&gt; C[Merge to Main&lt;br/&gt;Auto-deploy dev]\n    C --&gt; D[Manual Promotion&lt;br/&gt;dev \u2192 staging]  \n    D --&gt; E[Manual Promotion&lt;br/&gt;staging \u2192 production]\n\n    F[Environment Instance&lt;br/&gt;environments/dev/*] --&gt; B\n    G[Environment Config&lt;br/&gt;environments/staging/*] --&gt; D\n    H[Environment Config&lt;br/&gt;environments/production/*] --&gt; E\n\n    style A fill:#e8f5e8\n    style F fill:#e8f5e8\n    style B fill:#fff3e0\n    style C fill:#f0f7ff\n    style D fill:#fff0f5\n    style E fill:#fff5f5\n</code></pre> <p>Key Integration Points: - Platform components (XRDs, Compositions) are environment-agnostic and live in <code>platform-core/</code> - Environment instances (XRs) are environment-specific and follow the promotion pipeline - ArgoCD Applications manage both platform and environments using the same GitOps workflow - Crossplane health checks integrate with ArgoCD sync status for end-to-end monitoring</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-2-design-the-developer-api","title":"Step 2: Design the Developer API","text":"<p>The XRD defines what developers can request:</p> <pre><code># platform-core/xrds/dev-environment-xrd.yaml\napiVersion: apiextensions.crossplane.io/v2\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdevenvironments.platform.tutorial.com\n  labels:\n    app: crossplane-tutorial\n    component: xrd\nspec:\n  group: platform.tutorial.com\n  names:\n    kind: XDevEnvironment\n    plural: xdevenvironments\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    description: \"Name of the development environment\"\n                    pattern: '^[a-z0-9-]+$'\n                    minLength: 3\n                    maxLength: 20\n                  region:\n                    type: string\n                    description: \"Azure region for deployment\"\n                    default: \"eastus\"\n                    enum: [\"eastus\", \"westus2\", \"eastus2\", \"westeurope\"]\n                  resourceGroupLocation:\n                    type: string\n                    description: \"Specific location for Azure resource group\"\n                    default: \"East US\"\n                  tags:\n                    type: object\n                    description: \"Additional tags for resources\"\n                    additionalProperties:\n                      type: string\n                required:\n                - name\n              crossplane:\n                type: object\n                properties:\n                  compositionRef:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                    required:\n                    - name\n                required:\n                - compositionRef\n            required:\n            - parameters\n            - crossplane\n          status:\n            type: object\n            properties:\n              resourceGroupId:\n                type: string\n                description: \"Azure Resource Group ID\"\n              virtualNetworkId:\n                type: string\n                description: \"Azure Virtual Network ID\"\n              ready:\n                type: boolean\n                description: \"Environment is ready for use\"\n</code></pre> <p>\ud83d\udcc1 Exercise Files: The complete XRD configuration is available at <code>exercises/crossplane-advanced-patterns-01/platform-core/xrds/dev-environment-xrd.yaml</code></p> <p>Key XRD concepts explained:</p> <ul> <li><code>group</code> and <code>names</code>: Define the API endpoint (like <code>apps/v1</code> for Deployments)</li> <li><code>scope</code>: Namespaced by default in v2 for better isolation and multi-tenancy</li> <li><code>schema</code>: OpenAPI schema with validation rules</li> <li><code>parameters</code>: Simple interface hiding Azure complexity</li> <li><code>crossplane</code>: v2 structure containing composition references and resource management</li> <li><code>status</code>: Information exposed back to developers</li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#13-understanding-namespaced-composite-resources-in-v2","title":"1.3 Understanding Namespaced Composite Resources in v2","text":"<pre><code>graph TD\n    A[Developer creates&lt;br/&gt;XDevEnvironment&lt;br/&gt;in namespace] --&gt; B[Crossplane processes&lt;br/&gt;Composite Resource]\n    B --&gt; C[Composition creates&lt;br/&gt;ResourceGroup]\n    B --&gt; D[Composition creates&lt;br/&gt;VirtualNetwork]\n\n    style A fill:#e8f5e8\n    style B fill:#fff3e0\n    style C fill:#e1f5fe\n    style D fill:#e1f5fe\n</code></pre> <p>Composite Resources (<code>XDevEnvironment</code>): What developers create directly in namespaces Managed Resources: The actual Azure resources created by compositions</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-2-build-the-function-based-composition","title":"Step 2: Build the Function-Based Composition","text":"<p>Crossplane v2 uses function pipelines for composition logic. First, we need to install the required function:</p> <pre><code># Install the patch-and-transform function\nkubectl apply -f - &lt;&lt;EOF\napiVersion: pkg.crossplane.io/v1beta1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.upbound.io/crossplane-contrib/function-patch-and-transform:v0.2.1\nEOF\n</code></pre> <p>Now we define HOW to build the environment using function pipelines:</p> <pre><code># platform-core/compositions/dev-environment-composition.yaml\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dev-environment-azure\n  labels:\n    provider: azure\n    service: development\n    app: crossplane-tutorial\nspec:\n  compositeTypeRef:\n    apiVersion: platform.tutorial.com/v1alpha1\n    kind: XDevEnvironment\n\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: resource-group\n        base:\n          apiVersion: azure.upbound.io/v1beta1\n          kind: ResourceGroup\n          spec:\n            forProvider:\n              tags:\n                managed-by: crossplane\n                environment: development\n                created-by: crossplane-tutorial\n        patches:\n        # Copy environment name to resource group name\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.name\n          toFieldPath: metadata.name\n          transforms:\n          - type: string\n            string:\n              fmt: \"%s-rg\"\n\n        # Copy region to Azure location\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.resourceGroupLocation\n          toFieldPath: spec.forProvider.location\n\n        # Add environment name to tags\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.name\n          toFieldPath: spec.forProvider.tags[\"environment-name\"]\n\n        # Merge user-provided tags\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.tags\n          toFieldPath: spec.forProvider.tags\n          policy:\n            mergeOptions:\n              keepMapValues: true\n\n        # Report back the resource group ID\n        - type: ToCompositeFieldPath\n          fromFieldPath: status.atProvider.id\n          toFieldPath: status.resourceGroupId\n\n        # Set readiness condition\n        - type: ToCompositeFieldPath\n          fromFieldPath: status.conditions[?(@.type==\"Ready\")].status\n          toFieldPath: status.ready\n          transforms:\n          - type: convert\n            convert:\n              toType: bool\n\n      - name: virtual-network\n        base:\n          apiVersion: network.azure.upbound.io/v1beta1\n          kind: VirtualNetwork\n          spec:\n            forProvider:\n              addressSpace: [\"10.0.0.0/16\"]\n              tags:\n                managed-by: crossplane\n                environment: development\n                resource-type: virtual-network\n        patches:\n        # Copy environment name to VNet name\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.name\n          toFieldPath: metadata.name\n          transforms:\n          - type: string\n            string:\n              fmt: \"%s-vnet\"\n\n        # Reference the resource group by name\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.name\n          toFieldPath: spec.forProvider.resourceGroupName\n          transforms:\n          - type: string\n            string:\n              fmt: \"%s-rg\"\n\n        # Copy region to Azure location\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.resourceGroupLocation\n          toFieldPath: spec.forProvider.location\n\n        # Add environment name to tags\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.name\n          toFieldPath: spec.forProvider.tags[\"environment-name\"]\n\n        # Merge user-provided tags\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.parameters.tags\n          toFieldPath: spec.forProvider.tags\n          policy:\n            mergeOptions:\n              keepMapValues: true\n\n        # Report back the VNet ID\n        - type: ToCompositeFieldPath\n          fromFieldPath: status.atProvider.id\n          toFieldPath: status.virtualNetworkId\n</code></pre> <p>\ud83d\udcc1 Exercise Files: The complete Composition configuration is available at <code>exercises/crossplane-advanced-patterns-01/platform-core/compositions/dev-environment-composition.yaml</code></p> <p>v2 Composition concepts explained:</p> <ul> <li><code>mode: Pipeline</code>: v2 function-based composition approach</li> <li><code>pipeline</code>: Ordered sequence of functions to execute</li> <li><code>functionRef</code>: Reference to installed composition function</li> <li><code>input</code>: Function-specific configuration and resources</li> <li><code>compositeTypeRef</code>: Links to the XRD we created</li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#patch-types-deep-dive","title":"Patch Types Deep Dive","text":""},{"location":"crossplane-advanced-patterns/01-your-first-composition/#fromcompositefieldpath","title":"<code>FromCompositeFieldPath</code>","text":"<p>Copies values from the developer's request to the resource: <pre><code>fromFieldPath: spec.parameters.name    # From XDevEnvironment\ntoFieldPath: metadata.name             # To ResourceGroup\n</code></pre></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#tocompositefieldpath","title":"<code>ToCompositeFieldPath</code>","text":"<p>Reports information back to the developer: <pre><code>fromFieldPath: status.atProvider.id    # From Azure\ntoFieldPath: status.resourceGroupId    # To XDevEnvironment status\n</code></pre></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#transforms","title":"Transforms","text":"<p>Modify values during patching: <pre><code>transforms:\n- type: string\n  string:\n    fmt: \"%s-rg\"  # Append \"-rg\" to the name\n</code></pre></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-3-create-argocd-applications","title":"Step 3: Create ArgoCD Applications","text":"<p>Create ArgoCD Applications to manage the platform components via GitOps:</p> <pre><code># applications/platform/platform-apis.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: platform-xrds\n  namespace: argocd\n  labels:\n    app: crossplane-tutorial\n    component: platform-apis\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: platform-core/xrds\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crossplane-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: platform-compositions\n  namespace: argocd\n  labels:\n    app: crossplane-tutorial\n    component: platform-logic\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: platform-core/compositions\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crossplane-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n</code></pre> <p>\ud83d\udcc1 Exercise Files: The complete ArgoCD Applications configuration is available at <code>exercises/crossplane-advanced-patterns-01/applications/platform/platform-apis.yaml</code></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-4-deploy-the-platform","title":"Step 4: Deploy the Platform","text":""},{"location":"crossplane-advanced-patterns/01-your-first-composition/#41-update-repository-urls","title":"4.1 Update Repository URLs","text":"<pre><code># Replace with your actual repository URL (this tutorial repository)\nexport TUTORIAL_REPO_URL=\"https://github.com/your-username/your-tutorial-repo.git\"\nsed -i \"s|__YOUR_PLATFORM_GITOPS_REPO_URL__|$TUTORIAL_REPO_URL|g\" applications/platform/platform-apis.yaml\n\n# Add all platform files\ngit add platform-core/xrds/dev-environment-xrd.yaml\ngit add platform-core/compositions/dev-environment-composition.yaml\ngit add applications/platform/platform-apis.yaml\n\ngit commit -m \"feat: add XDevEnvironment platform API\n\n- XRD defines namespaced composite resource\n- Function-based composition with Azure resources\n- ArgoCD applications for GitOps deployment\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#42-commit-platform-components","title":"4.2 Commit Platform Components","text":"<pre><code># Add all platform files\ngit add platform-core/xrds/\ngit add platform-core/compositions/\ngit add platform-core/applications/platform-apis.yaml\n\n# Commit with descriptive message\ngit commit -m \"feat: add XDevEnvironment platform API\n\n- XRD defines namespaced composite resource\n- Function-based composition with Azure resources\n- ArgoCD applications for GitOps deployment\"\n\n# Push to trigger GitOps deployment\ngit push\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#43-deploy-argocd-applications","title":"4.3 Deploy ArgoCD Applications","text":"<pre><code># Deploy the platform applications\nkubectl apply -f applications/platform/platform-apis.yaml\n\n# Watch applications sync\nkubectl get applications -n argocd | grep platform\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#44-verify-platform-installation","title":"4.4 Verify Platform Installation","text":"<pre><code># Check XRD installation\nkubectl get xrd\nkubectl describe xrd xdevenvironments.platform.tutorial.com\n\n# Check Composition installation  \nkubectl get composition\nkubectl describe composition dev-environment-azure\n\n# Verify APIs are available\nkubectl api-resources | grep platform.tutorial.com\n</code></pre> <p>Expected output: <pre><code>xdevenvironments    platform.tutorial.com/v1alpha1    true    XDevEnvironment\n</code></pre></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-5-apply-gitops-workflow-to-crossplane","title":"Step 5: Apply GitOps Workflow to Crossplane! \ud83c\udf89","text":"<p>Now let's demonstrate the complete GitOps workflow with Crossplane environments:</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#51-github-flow-create-development-environment","title":"5.1 GitHub Flow: Create Development Environment","text":"<p>Following our GitHub Flow + Environment-Based pattern:</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#development-team-workflow","title":"Development Team Workflow","text":"<pre><code># 1. Create feature branch for new environment\ngit checkout -b feature/alice-dev-environment\n\n# 2. Create environment instance in dev directory  \ncat &gt; environments/dev/infrastructure/alice-dev.yaml &lt;&lt;EOF\napiVersion: platform.tutorial.com/v1alpha1\nkind: XDevEnvironment\nmetadata:\n  name: alice-dev\n  namespace: dev\n  labels:\n    app: crossplane-tutorial\n    owner: alice\n    team: platform\n    environment: dev\nspec:\n  parameters:\n    name: alice-dev\n    region: eastus\n    resourceGroupLocation: \"East US\"\n    tags:\n      owner: alice\n      team: platform\n      cost-center: \"1234\"\n      purpose: development\n      environment: dev\n  crossplane:\n    compositionRef:\n      name: dev-environment-azure\nEOF\n\n# 3. Commit and push to trigger PR workflow\ngit add environments/dev/infrastructure/alice-dev.yaml\ngit commit -m \"feat: create Alice's development environment\n\n- Creates Resource Group + VNet in East US\n- Configured for development workloads  \n- Tagged for cost tracking and ownership\"\ngit push -u origin feature/alice-dev-environment\n</code></pre> <p>\ud83d\udcc1 Exercise Files: The complete environment configuration is available at <code>exercises/crossplane-advanced-patterns-01/environments/dev/infrastructure/alice-dev.yaml</code></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#automatic-pr-environment-testing","title":"Automatic PR Environment Testing","text":"<p>GitHub Actions automatically creates a PR-specific environment for testing:</p> <pre><code># .github/workflows/crossplane-pr-testing.yml\nname: Crossplane Infrastructure PR Testing\non:\n  pull_request:\n    paths: ['environments/dev/infrastructure/**']\n\njobs:\n  test-crossplane-infrastructure:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup kubectl and ArgoCD CLI\n      uses: azure/setup-kubectl@v3\n\n    - name: Create PR Environment Suffix\n      run: |\n        export PR_SUFFIX=\"pr-${{ github.event.number }}\"\n        echo \"PR_SUFFIX=${PR_SUFFIX}\" &gt;&gt; $GITHUB_ENV\n\n    - name: Deploy PR-specific Infrastructure\n      run: |\n        # Create PR-specific version of the environment\n        sed \"s/name: alice-dev/name: alice-dev-${PR_SUFFIX}/\" \\\n            environments/dev/infrastructure/alice-dev.yaml | \\\n        sed \"s/namespace: dev/namespace: dev-pr-${{ github.event.number }}/\" | \\\n        kubectl apply -f -\n\n        # Wait for Crossplane resources to be ready\n        kubectl wait --for=condition=Ready \\\n          xdevenvironment/alice-dev-${PR_SUFFIX} \\\n          -n dev-pr-${{ github.event.number }} \\\n          --timeout=600s\n\n    - name: Validate Infrastructure\n      run: |\n        # Check that Crossplane created all expected resources\n        kubectl get resourcegroups,virtualnetworks \\\n          -n dev-pr-${{ github.event.number }} \\\n          -l crossplane.io/composite=alice-dev-${PR_SUFFIX}\n\n        # Verify Azure resources exist (optional - requires Azure CLI)\n        # az group show --name alice-dev-${PR_SUFFIX}-rg --output table\n\n    - name: Cleanup PR Environment\n      if: always()\n      run: |\n        # Clean up PR-specific resources\n        kubectl delete namespace dev-pr-${{ github.event.number }} --ignore-not-found=true\n</code></pre> <p>\ud83d\udcc1 Exercise Files: The complete GitHub Actions workflow is available at <code>exercises/crossplane-advanced-patterns-01/.github/workflows/crossplane-pr-testing.yml</code></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#52-environment-promotion-pipeline","title":"5.2 Environment Promotion Pipeline","text":"<p>Following our controlled promotion pattern:</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#stage-1-development-automatic","title":"Stage 1: Development (Automatic)","text":"<pre><code># After PR merge, ArgoCD automatically deploys to dev\n# No manual intervention needed\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#stage-2-staging-promotion-manual","title":"Stage 2: Staging Promotion (Manual)","text":"<pre><code># Platform team promotes to staging with environment-specific configs\ngit checkout main &amp;&amp; git pull\n\n# Copy and modify for staging requirements\ncp environments/dev/infrastructure/alice-dev.yaml \\\n   environments/staging/infrastructure/alice-staging.yaml\n\n# Update for staging-specific configuration\nsed -i 's/name: alice-dev/name: alice-staging/' \\\n    environments/staging/infrastructure/alice-staging.yaml\nsed -i 's/namespace: dev/namespace: staging/' \\\n    environments/staging/infrastructure/alice-staging.yaml  \nsed -i 's/environment: dev/environment: staging/' \\\n    environments/staging/infrastructure/alice-staging.yaml\nsed -i 's/purpose: development/purpose: staging/' \\\n    environments/staging/infrastructure/alice-staging.yaml\n\n# Add staging-specific enhancements\ncat &gt;&gt; environments/staging/infrastructure/alice-staging.yaml &lt;&lt;EOF\n    # Staging-specific parameters\n    backup: true\n    monitoring: enabled\n    alerting: true\nEOF\n\ngit add environments/staging/infrastructure/alice-staging.yaml\ngit commit -m \"feat: promote Alice's environment to staging\n\n- Enable backup for data protection\n- Add monitoring and alerting\n- Staging-specific configuration applied\"\n\n# Push to feature branch and create PR for staging promotion (requires review)\ngit push -u origin promote/alice-staging\ngh pr create --title \"Promote: Alice's environment to staging\" \\\n             --body \"Promoting validated dev environment to staging with enhanced configuration\" \\\n             --reviewer platform-team\ngh pr merge --auto --squash --delete-branch\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#stage-3-production-promotion-strict-control","title":"Stage 3: Production Promotion (Strict Control)","text":"<pre><code># Production requires additional approval and safeguards  \ncp environments/staging/infrastructure/alice-staging.yaml \\\n   environments/production/infrastructure/alice-prod.yaml\n\n# Production-specific configuration\nsed -i 's/alice-staging/alice-prod/g' \\\n    environments/production/infrastructure/alice-prod.yaml\nsed -i 's/namespace: staging/namespace: production/' \\\n    environments/production/infrastructure/alice-prod.yaml\n\n# Add production-specific requirements\ncat &gt;&gt; environments/production/infrastructure/alice-prod.yaml &lt;&lt;EOF\n    # Production-specific parameters\n    highAvailability: true\n    backup: true\n    backupRetention: 30\n    monitoring: enabled\n    alerting: critical\n    disasterRecovery: enabled\nEOF\n\ngit add environments/production/infrastructure/alice-prod.yaml\ngit commit -m \"feat: promote Alice's environment to production\n\n- Enable high availability and disaster recovery\n- Set 30-day backup retention\n- Configure critical alerting\n- Production-ready configuration\"\n\n# This triggers GitHub Environment protection rules\ngh pr create --title \"\ud83d\udd12 PRODUCTION: Alice's environment\" \\\n             --body \"Production deployment - requires platform team approval\" \\\n             --label \"production,requires-approval\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#53-argocd-applications-for-environment-based-workflow","title":"5.3 ArgoCD Applications for Environment-Based Workflow","text":"<p>Create ArgoCD ApplicationSet to manage environments following our GitOps patterns:</p> <pre><code># applications/platform/environment-applicationset.yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: crossplane-environments\n  namespace: argocd\n  labels:\n    app: crossplane-tutorial\n    component: environment-management\nspec:\n  generators:\n  - matrix:\n      generators:\n      - git:\n          repoURL: https://github.com/your-username/your-tutorial-repo.git\n          revision: HEAD\n          directories:\n          - path: environments/*\n      - list:\n          elements:\n          - cluster: https://kubernetes.default.svc\n            server: in-cluster\n  template:\n    metadata:\n      name: 'crossplane-{{path.basename}}'\n      labels:\n        app: crossplane-tutorial\n        environment: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/your-username/your-tutorial-repo.git\n        targetRevision: HEAD\n        path: '{{path}}/infrastructure'\n      destination:\n        server: '{{cluster}}'\n        namespace: '{{path.basename}}'  # Deploy to environment-specific namespace\n      syncPolicy:\n        automated:\n          prune: true\n          selfHeal: true\n        syncOptions:\n          - CreateNamespace=true\n          - ApplyOutOfSyncOnly=true\n        # Environment-specific sync policies\n        retry:\n          limit: 3\n          backoff:\n            duration: 5s\n            maxDuration: 3m0s\n      # Crossplane-specific health checks\n      ignoreDifferences:\n      - group: platform.tutorial.com\n        kind: XDevEnvironment\n        jsonPointers:\n        - /metadata/generation\n        - /status\n</code></pre> <p>\ud83d\udcc1 Exercise Files: The complete ArgoCD ApplicationSet configuration is available at <code>exercises/crossplane-advanced-patterns-01/applications/platform/environment-applicationset.yaml</code></p> <p>Benefits of this ApplicationSet approach: - Automatic discovery of new environments (dev, staging, production) - Environment-specific namespaces for proper isolation - Consistent sync policies across all environments - Crossplane-aware health checking and status monitoring</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#54-deploy-gitops-infrastructure","title":"5.4 Deploy GitOps Infrastructure","text":"<pre><code># Deploy platform components (XRDs, Compositions)\nkubectl apply -f applications/platform/platform-apis.yaml\n\n# Deploy environment management ApplicationSet\nkubectl apply -f applications/platform/environment-applicationset.yaml\n\n# Watch environments being created\nkubectl get applications -n argocd -l app=crossplane-tutorial\n\n# Monitor Crossplane resources across environments\nwatch \"kubectl get xdevenvironments --all-namespaces\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#55-gitops-monitoring-troubleshooting","title":"5.5 GitOps Monitoring &amp; Troubleshooting","text":""},{"location":"crossplane-advanced-patterns/01-your-first-composition/#monitor-gitops-crossplane-health","title":"Monitor GitOps + Crossplane Health","text":"<pre><code># 1. Check ArgoCD Application health across environments\nkubectl get applications -n argocd -l app=crossplane-tutorial -o wide\n\n# 2. Monitor Crossplane resources across environments  \nkubectl get xdevenvironments --all-namespaces -o wide\n\n# 3. Check for sync issues\nargocd app list | grep crossplane\n\n# 4. Monitor underlying Azure resources\nkubectl get managed --all-namespaces | grep -E \"alice-dev|ResourceGroup|VirtualNetwork\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#troubleshooting-common-gitops-crossplane-issues","title":"Troubleshooting Common GitOps + Crossplane Issues","text":"<p>Issue 1: ArgoCD Out of Sync <pre><code># Check specific application sync status\nargocd app get crossplane-dev --output yaml\n\n# Force sync if needed\nargocd app sync crossplane-dev --prune\n\n# Check for resource conflicts\nkubectl get events -n dev --sort-by='.lastTimestamp' | grep -i error\n</code></pre></p> <p>Issue 2: Crossplane Resource Stuck <pre><code># Check Composite Resource conditions\nkubectl describe xdevenvironment alice-dev -n dev\n\n# Check underlying Managed Resources\nkubectl get managed -l crossplane.io/composite=alice-dev -n dev\n\n# Force reconciliation\nkubectl annotate xdevenvironment alice-dev -n dev \\\n  crossplane.io/reconcile=$(date +%Y%m%d%H%M%S) --overwrite\n</code></pre></p> <p>Issue 3: Environment Promotion Failure <pre><code># Compare environment configurations\ndiff environments/dev/infrastructure/alice-dev.yaml \\\n     environments/staging/infrastructure/alice-staging.yaml\n\n# Validate staging-specific resources\nkubectl diff -f environments/staging/infrastructure/ --dry-run=server\n\n# Check promotion pipeline status\ngh pr list --label \"promotion\" --state \"open\"\n</code></pre></p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-6-gitops-crossplane-integration-benefits","title":"Step 6: GitOps + Crossplane Integration Benefits","text":""},{"location":"crossplane-advanced-patterns/01-your-first-composition/#61-end-to-end-workflow-visualization","title":"6.1 End-to-End Workflow Visualization","text":"<pre><code>graph TB\n    subgraph \"GitHub Repository\"\n        A[platform-core/] --&gt; A1[XRDs]\n        A --&gt; A2[Compositions]\n        B[environments/dev/] --&gt; B1[alice-dev.yaml]\n        C[environments/staging/] --&gt; C1[alice-staging.yaml]  \n        D[environments/production/] --&gt; D1[alice-prod.yaml]\n    end\n\n    subgraph \"ArgoCD (GitOps Controller)\"\n        E[ApplicationSet&lt;br/&gt;crossplane-environments]\n        F[Application&lt;br/&gt;crossplane-dev]\n        G[Application&lt;br/&gt;crossplane-staging] \n        H[Application&lt;br/&gt;crossplane-production]\n    end\n\n    subgraph \"Kubernetes + Crossplane\"\n        I[dev namespace&lt;br/&gt;XDevEnvironment]\n        J[staging namespace&lt;br/&gt;XDevEnvironment]\n        K[production namespace&lt;br/&gt;XDevEnvironment]\n    end\n\n    subgraph \"Azure Cloud\"\n        L[alice-dev-rg&lt;br/&gt;alice-dev-vnet]\n        M[alice-staging-rg&lt;br/&gt;alice-staging-vnet]\n        N[alice-prod-rg&lt;br/&gt;alice-prod-vnet]\n    end\n\n    B1 --&gt; F --&gt; I --&gt; L\n    C1 --&gt; G --&gt; J --&gt; M  \n    D1 --&gt; H --&gt; K --&gt; N\n    E --&gt; F\n    E --&gt; G\n    E --&gt; H\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style I fill:#bbf,stroke:#333,stroke-width:2px\n    style L fill:#bfb,stroke:#333,stroke-width:2px\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#62-rock-solid-workflow-benefits","title":"6.2 Rock-Solid Workflow Benefits","text":"<p>\u2705 Developer Experience - Familiar GitHub Flow - no new workflows to learn - Environment parity - same code promoted through environments - Fast feedback - PR environments for infrastructure testing - Self-service - developers create environments via Git</p> <p>\u2705 Platform Engineering - Infrastructure as Code - everything in Git with full audit trail - Environment-specific tuning - dev vs staging vs production configs - Reusable components - XRDs and Compositions shared across environments - Automated promotion - controlled pipeline with approval gates</p> <p>\u2705 Operational Excellence - GitOps compliance - declarative, auditable, recoverable - Multi-environment safety - isolated namespaces and configs - Automatic rollback - failed deployments revert via ArgoCD - Monitoring integration - Crossplane health visible in ArgoCD</p> <p>\u2705 Enterprise Readiness - RBAC integration - namespace-based access control - Compliance tracking - Git provides complete audit trail - Disaster recovery - infrastructure recreated from Git - Cost management - environment-specific resource sizing</p> <p>Key v2 Relationships: - Developers create XRs directly in namespaces (no Claims layer) - Managed Resources live in same namespace as the XR for isolation - Function pipeline processes the XR and creates managed resources - Composition and XRD remain cluster-scoped for platform reuse</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#62-check-environment-status","title":"6.2 Check Environment Status","text":"<pre><code># Get detailed environment status\nkubectl get devenvironment alice-dev -n crossplane-system -o yaml | grep -A 20 status\n\n# Check resource readiness\nkubectl describe devenvironment alice-dev -n crossplane-system\n</code></pre> <p>Look for: - <code>resourceGroupId</code>: Azure resource group ID - <code>virtualNetworkId</code>: Azure VNet ID - <code>ready: true</code>: Environment is fully provisioned</p>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#step-7-add-another-developer","title":"Step 7: Add Another Developer","text":"<p>Development teams can easily add more environments using the same pattern:</p> <pre><code># applications/environments/bob-dev.yaml\napiVersion: platform.tutorial.com/v1alpha1\nkind: XDevEnvironment\nmetadata:\n  name: bob-dev\n  namespace: default\n  labels:\n    app: crossplane-tutorial\n    owner: bob\n    purpose: development\nspec:\n  parameters:\n    name: bob-dev\n    region: westus2\n    resourceGroupLocation: \"West US 2\"\n    tags:\n      owner: bob\n      team: backend\n      cost-center: \"5678\"\n      purpose: development\n  crossplane:\n    compositionRef:\n      name: dev-environment-azure\n</code></pre> <pre><code># Deploy Bob's environment  \ngit add applications/environments/bob-dev.yaml\ngit commit -m \"feat: create Bob's development environment in West US 2\"\ngit push\n\n# ArgoCD will automatically sync and create the environment\nkubectl get xdevenvironments -n default -w\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#learning-outcomes","title":"Learning Outcomes","text":"<p>After completing this module, you should understand:</p> <ul> <li>\u2705 XRD Design: How to create developer-friendly APIs</li> <li>\u2705 Composition Patterns: Bundling resources with relationships</li> <li>\u2705 Patching Strategies: Moving data between resources</li> <li>\u2705 GitOps Platform Deployment: Managing platform components</li> <li>\u2705 Resource Abstraction: Hiding complexity while maintaining capability</li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#advanced-concepts-introduced","title":"Advanced Concepts Introduced","text":""},{"location":"crossplane-advanced-patterns/01-your-first-composition/#api-design-principles","title":"API Design Principles","text":"<ul> <li>Simple parameters: Complex Azure configuration hidden</li> <li>Validation: Enum values and pattern matching prevent errors</li> <li>Defaults: Sensible defaults reduce cognitive load</li> <li>Status reporting: Clear information about environment state</li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#composition-techniques","title":"Composition Techniques","text":"<ul> <li>Resource dependencies: VNet references Resource Group</li> <li>Field transformations: String formatting for naming</li> <li>Tag merging: Combine platform and user tags</li> <li>Status propagation: Report Azure IDs back to developers</li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"crossplane-advanced-patterns/01-your-first-composition/#xrd-not-available","title":"XRD Not Available","text":"<pre><code># Check XRD status\nkubectl get xrd xdevenvironments.platform.tutorial.com\nkubectl describe xrd xdevenvironments.platform.tutorial.com\n\n# Verify ArgoCD sync\nargocd app get platform-xrds\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#composition-not-working","title":"Composition Not Working","text":"<pre><code># Check composition status\nkubectl describe composition dev-environment-azure\n\n# Look for events on the XR\nkubectl describe xdevenvironment &lt;name&gt; -n crossplane-system\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#resources-not-creating","title":"Resources Not Creating","text":"<pre><code># Check the composite resource\nkubectl get xdevenvironments -n crossplane-system\nkubectl describe xdevenvironment &lt;name&gt; -n crossplane-system\n\n# Check managed resources\nkubectl get managed -n crossplane-system | grep &lt;name&gt;\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#platform-documentation","title":"Platform Documentation","text":""},{"location":"crossplane-advanced-patterns/01-your-first-composition/#developer-guide","title":"Developer Guide","text":"<p>Create documentation for your platform users:</p> <pre><code># Development Environment Platform\n\n## Quick Start\n\nCreate a new development environment:\n\n```yaml\napiVersion: platform.tutorial.com/v1alpha1\nkind: DevEnvironment\nmetadata:\n  name: my-dev-env\nspec:\n  parameters:\n    name: my-dev-env\n    region: eastus\n    tags:\n      owner: your-name\n      team: your-team\n</code></pre>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Environment identifier (required)</li> <li><code>region</code>: Azure region (default: eastus)</li> <li><code>tags</code>: Additional resource tags (optional)</li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#what-you-get","title":"What You Get","text":"<ul> <li>Azure Resource Group</li> <li>Virtual Network (10.0.0.0/16)</li> <li>Proper tagging and labeling</li> <li>Automatic cleanup on deletion <pre><code>## Next Steps\n\nCongratulations! You've built your first platform API. Developers can now request complete environments with simple YAML files.\n\nIn the next module, we'll add networking components (subnets, security groups) to make the environments more complete and production-ready.\n\n**\u27a1\ufe0f [Module 2: Networking Composition](02-networking-composition.md)**\n\n---\n\n## Quick Reference\n\n### Platform Commands\n\n```bash\n# List all platform APIs\nkubectl api-resources | grep platform.tutorial.com\n\n# Get all environments (now in default namespace)\nkubectl get xdevenvironments -n default\n\n# Check environment status\nkubectl describe xdevenvironment &lt;name&gt; -n default\n\n# List all managed resources for an environment (in same namespace)\nkubectl get managed -l crossplane.io/composite=&lt;name&gt; -n default\n</code></pre></li> </ul>"},{"location":"crossplane-advanced-patterns/01-your-first-composition/#file-structure-created","title":"File Structure Created","text":"<p>Rock-solid GitOps + Crossplane integration:</p> <pre><code># Platform components (shared, reusable, environment-agnostic)\nplatform-core/\n\u251c\u2500\u2500 xrds/\n\u2502   \u2514\u2500\u2500 dev-environment-xrd.yaml        # Platform API definitions\n\u251c\u2500\u2500 compositions/\n\u2502   \u2514\u2500\u2500 dev-environment-composition.yaml # Platform implementation logic\n\u2514\u2500\u2500 functions/\n    \u2514\u2500\u2500 function-installations.yaml      # Composition functions\n\n# Environment-specific infrastructure (follows promotion pipeline)\nenvironments/\n\u251c\u2500\u2500 dev/\n\u2502   \u2514\u2500\u2500 infrastructure/\n\u2502       \u2514\u2500\u2500 alice-dev.yaml              # Development environment instances\n\u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 infrastructure/\n\u2502       \u2514\u2500\u2500 alice-staging.yaml          # Staging environment instances\n\u2514\u2500\u2500 production/\n    \u2514\u2500\u2500 infrastructure/\n        \u2514\u2500\u2500 alice-prod.yaml             # Production environment instances\n\n# GitOps management layer (ArgoCD Applications)  \napplications/\n\u251c\u2500\u2500 platform/\n\u2502   \u251c\u2500\u2500 platform-apis.yaml             # Manages platform-core components\n\u2502   \u2514\u2500\u2500 environment-applicationset.yaml # Manages all environments\n\u2514\u2500\u2500 workflows/\n    \u251c\u2500\u2500 pr-testing.yaml                 # PR environment automation\n    \u2514\u2500\u2500 promotion-pipeline.yaml         # Environment promotion workflow\n\n# GitHub Workflows (automation)\n.github/workflows/\n\u251c\u2500\u2500 crossplane-pr-testing.yml          # PR environment creation/testing\n\u251c\u2500\u2500 production-promotion.yml           # Production deployment gates\n\u2514\u2500\u2500 drift-detection.yml                # Environment drift monitoring\n</code></pre> <p>GitOps Workflow Integration Benefits:</p> <p>\u2705 Environment Separation: Clear dev \u2192 staging \u2192 production promotion path \u2705 Platform Reusability: XRDs and Compositions shared across all environments \u2705 GitOps Compliance: Full audit trail and declarative infrastructure \u2705 Developer Self-Service: Teams create environments via familiar Git workflow \u2705 Operational Safety: Approval gates, automated testing, rollback capabilities \u2705 Monitoring Integration: Crossplane health visible in ArgoCD dashboard</p> <p>This structure enables: - GitHub Flow compatibility with trunk-based development - Controlled environment promotion with manual approval gates - Automated PR testing with ephemeral infrastructure environments - Emergency hotfix procedures that bypass normal workflow when needed - Complete audit trail via Git history for compliance and troubleshooting</p> <p>Perfect for teams that need enterprise-grade infrastructure management with startup-level agility! \ud83d\ude80</p>"},{"location":"crossplane-advanced-patterns/02-networking-composition/","title":"Module 2: Networking Composition","text":"<p>Time: 30 minutes Objective: Extend your development environment with complete networking infrastructure including subnets and security groups</p>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#overview","title":"Overview","text":"<p>In the previous module, you created a basic development environment with a Resource Group and Virtual Network. Now we'll add the networking components that make environments actually usable:</p> <ul> <li>Subnets for organizing workloads</li> <li>Network Security Groups for traffic control</li> <li>Resource dependencies and cross-references</li> <li>Advanced patching techniques</li> </ul> <p>What developers will get: - Complete networking stack ready for workloads - Proper security boundaries - Multiple subnets for different purposes - Production-ready network architecture</p>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#step-1-enhance-the-xrd","title":"Step 1: Enhance the XRD","text":"<p>Let's extend our API to support networking configuration:</p> <pre><code># platform-core/xrds/dev-environment-xrd.yaml (UPDATE)\napiVersion: apiextensions.crossplane.io/v2\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdevenvironments.platform.tutorial.com\n  labels:\n    app: crossplane-tutorial\n    component: xrd\nspec:\n  group: platform.tutorial.com\n  names:\n    kind: XDevEnvironment\n    plural: xdevenvironments\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    description: \"Name of the development environment\"\n                    pattern: '^[a-z0-9-]+$'\n                    minLength: 3\n                    maxLength: 20\n                  region:\n                    type: string\n                    description: \"Azure region for deployment\"\n                    default: \"eastus\"\n                    enum: [\"eastus\", \"westus2\", \"eastus2\", \"westeurope\"]\n                  resourceGroupLocation:\n                    type: string\n                    description: \"Specific location for Azure resource group\"\n                    default: \"East US\"\n                  networking:\n                    type: object\n                    description: \"Networking configuration\"\n                    properties:\n                      vnetCidr:\n                        type: string\n                        description: \"CIDR block for the virtual network\"\n                        default: \"10.0.0.0/16\"\n                        pattern: '^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$'\n                      publicSubnetCidr:\n                        type: string\n                        description: \"CIDR block for public subnet\"\n                        default: \"10.0.1.0/24\"\n                        pattern: '^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$'\n                      privateSubnetCidr:\n                        type: string\n                        description: \"CIDR block for private subnet\"\n                        default: \"10.0.2.0/24\"\n                        pattern: '^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$'\n                      allowSshFrom:\n                        type: array\n                        description: \"CIDR blocks allowed to SSH (port 22)\"\n                        items:\n                          type: string\n                        default: [\"0.0.0.0/0\"]\n                      allowHttpFrom:\n                        type: array\n                        description: \"CIDR blocks allowed HTTP traffic (port 80/443)\"\n                        items:\n                          type: string\n                        default: [\"0.0.0.0/0\"]\n                  tags:\n                    type: object\n                    description: \"Additional tags for resources\"\n                    additionalProperties:\n                      type: string\n                required:\n                - name\n            required:\n            - parameters\n          status:\n            type: object\n            properties:\n              resourceGroupId:\n                type: string\n                description: \"Azure Resource Group ID\"\n              virtualNetworkId:\n                type: string\n                description: \"Azure Virtual Network ID\"\n              publicSubnetId:\n                type: string\n                description: \"Public subnet ID\"\n              privateSubnetId:\n                type: string\n                description: \"Private subnet ID\"\n              networkSecurityGroupId:\n                type: string\n                description: \"Network security group ID\"\n              ready:\n                type: boolean\n                description: \"Environment is ready for use\"\n              networkingReady:\n                type: boolean\n                description: \"All networking components are ready\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#step-2-enhanced-composition-with-networking","title":"Step 2: Enhanced Composition with Networking","text":"<p>Now let's update our Composition to include networking resources:</p> <pre><code># platform-core/compositions/dev-environment-composition.yaml (UPDATE)\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dev-environment-azure\n  labels:\n    provider: azure\n    service: development\n    app: crossplane-tutorial\nspec:\n  compositeTypeRef:\n    apiVersion: platform.tutorial.com/v1alpha1\n    kind: XDevEnvironment\n\n  resources:\n  - name: resource-group\n    base:\n      apiVersion: azure.upbound.io/v1beta1\n      kind: ResourceGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: development\n            created-by: crossplane-tutorial\n    patches:\n    # Copy environment name to resource group name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-rg\"\n\n    # Copy region to Azure location\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.resourceGroupLocation\n      toFieldPath: spec.forProvider.location\n\n    # Add environment name to tags\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.tags[\"environment-name\"]\n\n    # Merge user-provided tags\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.tags\n      toFieldPath: spec.forProvider.tags\n      policy:\n        mergeOptions:\n          keepMapValues: true\n\n    # Report back the resource group ID\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.id\n      toFieldPath: status.resourceGroupId\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: virtual-network\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: VirtualNetwork\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: development\n            resource-type: virtual-network\n    patches:\n    # Copy environment name to VNet name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n    # Reference the resource group by name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-rg\"\n\n    # Copy region to Azure location\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.resourceGroupLocation\n      toFieldPath: spec.forProvider.location\n\n    # Set VNet CIDR from parameters\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.vnetCidr\n      toFieldPath: spec.forProvider.addressSpace[0]\n\n    # Add environment name to tags\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.tags[\"environment-name\"]\n\n    # Merge user-provided tags\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.tags\n      toFieldPath: spec.forProvider.tags\n      policy:\n        mergeOptions:\n          keepMapValues: true\n\n    # Report back the VNet ID\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.id\n      toFieldPath: status.virtualNetworkId\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: network-security-group\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: development\n            resource-type: network-security-group\n    patches:\n    # Copy environment name to NSG name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    # Reference the resource group by name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-rg\"\n\n    # Copy region to Azure location\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.resourceGroupLocation\n      toFieldPath: spec.forProvider.location\n\n    # Add environment name to tags\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.tags[\"environment-name\"]\n\n    # Merge user-provided tags\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.tags\n      toFieldPath: spec.forProvider.tags\n      policy:\n        mergeOptions:\n          keepMapValues: true\n\n    # Report back the NSG ID\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.id\n      toFieldPath: status.networkSecurityGroupId\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: ssh-security-rule\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityRule\n      spec:\n        forProvider:\n          priority: 1001\n          direction: \"Inbound\"\n          access: \"Allow\"\n          protocol: \"Tcp\"\n          destinationPortRange: \"22\"\n          destinationAddressPrefix: \"*\"\n    patches:\n    # Copy environment name to rule name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-ssh-rule\"\n\n    # Reference the resource group and NSG\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.networkSecurityGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    # Set source addresses from parameters\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.allowSshFrom\n      toFieldPath: spec.forProvider.sourceAddressPrefixes\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: http-security-rule\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityRule\n      spec:\n        forProvider:\n          priority: 1002\n          direction: \"Inbound\"\n          access: \"Allow\"\n          protocol: \"Tcp\"\n          destinationPortRanges: [\"80\", \"443\"]\n          destinationAddressPrefix: \"*\"\n    patches:\n    # Copy environment name to rule name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-http-rule\"\n\n    # Reference the resource group and NSG\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.networkSecurityGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    # Set source addresses from parameters\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.allowHttpFrom\n      toFieldPath: spec.forProvider.sourceAddressPrefixes\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: public-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider: {}\n    patches:\n    # Copy environment name to subnet name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-public-subnet\"\n\n    # Reference the resource group and VNet\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n    # Set subnet CIDR from parameters\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.publicSubnetCidr\n      toFieldPath: spec.forProvider.addressPrefixes[0]\n\n    # Report back the subnet ID\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.id\n      toFieldPath: status.publicSubnetId\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: private-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider: {}\n    patches:\n    # Copy environment name to subnet name\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-private-subnet\"\n\n    # Reference the resource group and VNet\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n    # Set subnet CIDR from parameters\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.privateSubnetCidr\n      toFieldPath: spec.forProvider.addressPrefixes[0]\n\n    # Report back the subnet ID\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.id\n      toFieldPath: status.privateSubnetId\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: subnet-nsg-association-public\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: SubnetNetworkSecurityGroupAssociation\n      spec:\n        forProvider: {}\n    patches:\n    # Name the association\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-public-nsg-assoc\"\n\n    # Reference subnet by name selector\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[\"crossplane.io/composite\"]\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-public-subnet\"\n\n    # Reference NSG by name selector  \n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.networkSecurityGroupIdSelector.matchLabels[\"crossplane.io/composite\"]\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  - name: subnet-nsg-association-private\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: SubnetNetworkSecurityGroupAssociation\n      spec:\n        forProvider: {}\n    patches:\n    # Name the association\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-private-nsg-assoc\"\n\n    # Reference subnet by name selector\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[\"crossplane.io/composite\"]\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-private-subnet\"\n\n    # Reference NSG by name selector\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.networkSecurityGroupIdSelector.matchLabels[\"crossplane.io/composite\"]\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    # Set labels for resource selection\n    - type: FromCompositeFieldPath\n      fromFieldPath: metadata.uid\n      toFieldPath: metadata.labels[\"crossplane.io/composite\"]\n\n  # Set overall networking readiness\n  - name: networking-readiness-check\n    base:\n      apiVersion: kubernetes.crossplane.io/v1alpha1\n      kind: Object\n      spec:\n        forProvider:\n          manifest:\n            apiVersion: v1\n            kind: ConfigMap\n            metadata:\n              namespace: crossplane-system\n            data:\n              ready: \"true\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-networking-ready\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.manifest.metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-networking-ready\"\n\n    # Report networking readiness\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.conditions[?(@.type==\"Ready\")].status\n      toFieldPath: status.networkingReady\n      transforms:\n      - type: convert\n        convert:\n          toType: bool\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#step-3-update-environment-examples","title":"Step 3: Update Environment Examples","text":"<p>Let's update our example environments to use the new networking features:</p> <pre><code># applications/environments/alice-dev.yaml (UPDATE)\napiVersion: platform.tutorial.com/v1alpha1\nkind: XDevEnvironment\nmetadata:\n  name: alice-dev\n  namespace: default\n  labels:\n    app: crossplane-tutorial\n    owner: alice\n    purpose: development\nspec:\n  parameters:\n    name: alice-dev\n    region: eastus\n    resourceGroupLocation: \"East US\"\n    networking:\n      vnetCidr: \"10.0.0.0/16\"\n      publicSubnetCidr: \"10.0.1.0/24\"\n      privateSubnetCidr: \"10.0.2.0/24\"\n      allowSshFrom:\n        - \"203.0.113.0/24\"  # Alice's office IP range\n        - \"198.51.100.0/24\" # VPN IP range\n      allowHttpFrom:\n        - \"0.0.0.0/0\"       # Allow HTTP from anywhere\n    tags:\n      owner: alice\n      team: platform\n      cost-center: \"1234\"\n      purpose: development\n      networking: enhanced\n  crossplane:\n    compositionRef:\n      name: dev-environment-azure-networking\n</code></pre> <pre><code># applications/environments/charlie-dev.yaml (NEW)\napiVersion: platform.tutorial.com/v1alpha1\nkind: XDevEnvironment\nmetadata:\n  name: charlie-dev\n  namespace: default\n  labels:\n    app: crossplane-tutorial\n    owner: charlie\n    purpose: development\nspec:\n  parameters:\n    name: charlie-dev\n    region: westus2\n    resourceGroupLocation: \"West US 2\"\n    networking:\n      vnetCidr: \"10.1.0.0/16\"  # Different IP range to avoid conflicts\n      publicSubnetCidr: \"10.1.1.0/24\"\n      privateSubnetCidr: \"10.1.2.0/24\"\n      allowSshFrom:\n        - \"192.0.2.0/24\"     # Charlie's specific IP range\n      allowHttpFrom:\n        - \"0.0.0.0/0\"\n    tags:\n      owner: charlie\n      team: backend\n      cost-center: \"5678\"\n      purpose: development\n  crossplane:\n    compositionRef:\n      name: dev-environment-azure-networking\n      networking: enhanced\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#step-4-deploy-enhanced-platform","title":"Step 4: Deploy Enhanced Platform","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#41-commit-changes","title":"4.1 Commit Changes","text":"<pre><code># Add all updated files\ngit add platform-core/xrds/dev-environment-xrd.yaml\ngit add platform-core/compositions/dev-environment-composition.yaml\ngit add applications/environments/\n\n# Commit with descriptive message\ngit commit -m \"feat: enhance XDevEnvironment with complete networking\n\n- Add subnets (public/private) with configurable CIDR blocks\n- Implement Network Security Groups with SSH/HTTP rules\n- Add subnet-NSG associations for proper security\n- Support custom source IP ranges for security rules\n- Expose networking resource IDs in status\n- Add networking readiness indicators\n- Update examples with enhanced networking configuration\"\n\n# Push to trigger GitOps deployment\ngit push\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#42-watch-platform-update","title":"4.2 Watch Platform Update","text":"<pre><code># Watch ArgoCD sync the platform components\nkubectl get applications -n argocd | grep platform\n\n# Check XRD update\nkubectl describe xrd xdevenvironments.platform.tutorial.com\n\n# Check composition update\nkubectl describe composition dev-environment-azure\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#step-5-test-enhanced-networking","title":"Step 5: Test Enhanced Networking","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#51-update-existing-environment","title":"5.1 Update Existing Environment","text":"<p>Let's update Alice's environment to use the new networking features:</p> <pre><code># The updated alice-dev.yaml will be synced automatically by ArgoCD\n# Watch the environment update\nkubectl get xdevenvironment alice-dev -n default -w\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#52-check-all-created-resources","title":"5.2 Check All Created Resources","text":"<pre><code># List all managed resources for Alice's environment (in same namespace as XR)\nkubectl get managed -n default | grep alice-dev\n\n# Check specific resource types\nkubectl get resourcegroups,virtualnetworks,subnets,networksecuritygroups,networksecurityrules -n default | grep alice-dev\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#53-verify-azure-infrastructure","title":"5.3 Verify Azure Infrastructure","text":"<pre><code># Check resource group and VNet\naz group show --name alice-dev-rg --output table\naz network vnet show --resource-group alice-dev-rg --name alice-dev-vnet --output table\n\n# Check subnets\naz network vnet subnet list --resource-group alice-dev-rg --vnet-name alice-dev-vnet --output table\n\n# Check network security group and rules\naz network nsg show --resource-group alice-dev-rg --name alice-dev-nsg --output table\naz network nsg rule list --resource-group alice-dev-rg --nsg-name alice-dev-nsg --output table\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#54-check-environment-status","title":"5.4 Check Environment Status","text":"<pre><code># Get detailed environment status including networking\nkubectl get xdevenvironment alice-dev -n default -o yaml | grep -A 15 status\n\n# Should show:\n# - resourceGroupId\n# - virtualNetworkId  \n# - publicSubnetId\n# - privateSubnetId\n# - networkSecurityGroupId\n# - ready: true\n# - networkingReady: true\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#step-6-create-charlies-environment","title":"Step 6: Create Charlie's Environment","text":"<p>Let's test our enhanced platform with a new environment:</p> <pre><code># Add Charlie's environment file\ngit add applications/environments/charlie-dev.yaml\ngit commit -m \"feat: create Charlie's enhanced development environment\"\ngit push\n\n# Watch it being created\nkubectl get xdevenvironments -n default -w\n\n# Check all resources created (in same namespace)\nkubectl get managed -n default | grep charlie-dev\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#understanding-advanced-composition-patterns","title":"Understanding Advanced Composition Patterns","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#resource-dependencies","title":"Resource Dependencies","text":"<p>Our composition demonstrates several dependency patterns:</p> <pre><code>graph TD\n    A[ResourceGroup] --&gt; B[VirtualNetwork]\n    A --&gt; C[NetworkSecurityGroup]\n    B --&gt; D[Public Subnet]\n    B --&gt; E[Private Subnet]\n    C --&gt; F[SSH Security Rule]\n    C --&gt; G[HTTP Security Rule]\n    D --&gt; H[Public NSG Association]\n    E --&gt; I[Private NSG Association]\n    C --&gt; H\n    C --&gt; I\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#f3e5f5\n    style D fill:#e8f5e8\n    style E fill:#e8f5e8\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#advanced-patching-techniques","title":"Advanced Patching Techniques","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#string-formatting","title":"String Formatting","text":"<pre><code>transforms:\n- type: string\n  string:\n    fmt: \"%s-subnet\"  # Appends \"-subnet\" to the name\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#array-patching","title":"Array Patching","text":"<pre><code># Copy array of IP ranges to security rule\nfromFieldPath: spec.parameters.networking.allowSshFrom\ntoFieldPath: spec.forProvider.sourceAddressPrefixes\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#conditional-logic","title":"Conditional Logic","text":"<pre><code># Convert string status to boolean\ntransforms:\n- type: convert\n  convert:\n    toType: bool\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#resource-selectors","title":"Resource Selectors","text":"<pre><code># Reference resources by labels instead of names\nspec.forProvider.subnetIdSelector.matchLabels[\"crossplane.io/composite\"]\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#production-networking-patterns","title":"Production Networking Patterns","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#1-network-segmentation","title":"1. Network Segmentation","text":"<pre><code># In a production XRD, you might have:\nnetworking:\n  subnets:\n    - name: web\n      cidr: \"10.0.1.0/24\"\n      type: public\n    - name: app  \n      cidr: \"10.0.2.0/24\"\n      type: private\n    - name: data\n      cidr: \"10.0.3.0/24\" \n      type: private\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#2-security-rules-management","title":"2. Security Rules Management","text":"<pre><code># Structured security rules\nsecurityRules:\n  - name: allow-web\n    priority: 100\n    protocol: TCP\n    ports: [80, 443]\n    source: \"0.0.0.0/0\"\n  - name: allow-ssh\n    priority: 200  \n    protocol: TCP\n    ports: [22]\n    source: \"office-ip-range\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#3-dns-integration","title":"3. DNS Integration","text":"<pre><code># DNS zones and records\ndnsZone: \"dev.company.com\"\ncreatePublicDns: true\nprivateDnsZone: \"internal.dev.company.com\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#troubleshooting-networking-issues","title":"Troubleshooting Networking Issues","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#common-problems","title":"Common Problems","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#1-subnet-creation-fails","title":"1. Subnet Creation Fails","text":"<pre><code># Check VNet status first\nkubectl describe virtualnetwork alice-dev-vnet -n crossplane-system\n\n# Check subnet events\nkubectl describe subnet alice-dev-public-subnet -n crossplane-system\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#2-nsg-association-fails","title":"2. NSG Association Fails","text":"<pre><code># Check if both resources exist\nkubectl get networksecuritygroup alice-dev-nsg -n crossplane-system\nkubectl get subnet alice-dev-public-subnet -n crossplane-system\n\n# Check association status\nkubectl describe subnetnetworksecuritygroupassociation alice-dev-public-nsg-assoc -n crossplane-system\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#3-resource-reference-issues","title":"3. Resource Reference Issues","text":"<pre><code># Check resource labels for selector matching\nkubectl get subnet alice-dev-public-subnet -n crossplane-system -o yaml | grep -A 5 labels\n\n# Verify composite resource UID\nkubectl get xdevenvironment alice-dev -n crossplane-system -o jsonpath='{.metadata.uid}'\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#learning-outcomes","title":"Learning Outcomes","text":"<p>After completing this module, you should understand:</p> <ul> <li>\u2705 Complex Resource Composition: Orchestrating multiple interdependent resources</li> <li>\u2705 Advanced Patching: String formatting, array handling, and type conversion</li> <li>\u2705 Resource Selection: Using selectors instead of hard-coded names</li> <li>\u2705 Security Patterns: Implementing network security best practices</li> <li>\u2705 Status Propagation: Exposing detailed resource information to developers</li> </ul>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#architecture-benefits","title":"Architecture Benefits","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#developer-experience","title":"Developer Experience","text":"<ul> <li>Single YAML file creates complete networking infrastructure</li> <li>Configurable security without Azure expertise required</li> <li>Clear status reporting shows all created resource IDs</li> <li>Consistent patterns across all environments</li> </ul>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#operations-benefits","title":"Operations Benefits","text":"<ul> <li>Standardized networking across all environments</li> <li>Automated security group management reduces human error</li> <li>Consistent IP addressing prevents conflicts</li> <li>GitOps deployment provides audit trail and rollback</li> </ul>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#next-steps","title":"Next Steps","text":"<p>Your development environment platform now provides complete networking infrastructure! Developers get production-ready networking with subnets, security groups, and proper traffic controls.</p> <p>In the next module, we'll implement environment-specific patterns to handle different requirements for development, staging, and production environments.</p> <p>\u27a1\ufe0f Module 3: Environment Patterns</p>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#quick-reference","title":"Quick Reference","text":""},{"location":"crossplane-advanced-patterns/02-networking-composition/#networking-commands","title":"Networking Commands","text":"<pre><code># List all networking resources\nkubectl get virtualnetworks,subnets,networksecuritygroups,networksecurityrules -n crossplane-system\n\n# Check environment networking status\nkubectl get devenvironment &lt;name&gt; -n crossplane-system -o jsonpath='{.status}'\n\n# Azure networking verification\naz network vnet list --output table\naz network vnet subnet list --resource-group &lt;rg-name&gt; --vnet-name &lt;vnet-name&gt; --output table\naz network nsg list --output table\n</code></pre>"},{"location":"crossplane-advanced-patterns/02-networking-composition/#file-structure-after-this-module","title":"File Structure After This Module","text":"<pre><code>platform-core/\n\u251c\u2500\u2500 xrds/\n\u2502   \u2514\u2500\u2500 dev-environment-xrd.yaml          # Enhanced with networking parameters\n\u251c\u2500\u2500 compositions/\n\u2502   \u2514\u2500\u2500 dev-environment-composition.yaml  # Added subnets, NSGs, security rules\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 alice-dev.yaml                    # Updated with networking config\n\u2502   \u251c\u2500\u2500 bob-dev.yaml                      # Existing environment\n\u2502   \u2514\u2500\u2500 charlie-dev.yaml                 # New environment with networking\n\u2514\u2500\u2500 applications/\n    \u251c\u2500\u2500 platform-apis.yaml\n    \u2514\u2500\u2500 dev-environments.yaml\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/","title":"Module 3: Environment Patterns","text":"<p>Time: 60 minutes Objective: Implement environment-specific patterns for development, staging, and production with appropriate resource sizing, security, and cost optimization</p>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#overview","title":"Overview","text":"<p>Different environments have different requirements:</p> <ul> <li>Development: Cost-optimized, relaxed security, developer-friendly</li> <li>Staging: Production-like, testing-focused, moderate security</li> <li>Production: High availability, strict security, performance-optimized</li> </ul> <p>Instead of one-size-fits-all, we'll create environment-specific Compositions that automatically apply the right patterns based on environment type.</p> <p>What you'll build: - Multiple Compositions for different environment types - Environment-aware resource sizing and configuration - Cost optimization patterns - Security policies per environment - Production-ready governance</p>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#step-1-design-environment-specific-apis","title":"Step 1: Design Environment-Specific APIs","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#11-create-environment-specific-xrds","title":"1.1 Create Environment-Specific XRDs","text":"<p>Let's create dedicated XRDs for different environment types:</p> <pre><code># platform-core/xrds/environment-dev-xrd.yaml\napiVersion: apiextensions.crossplane.io/v2\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdevenvironments.environments.platform.tutorial.com\n  labels:\n    app: crossplane-tutorial\n    component: xrd\n    environment-type: development\nspec:\n  group: environments.platform.tutorial.com\n  names:\n    kind: XDevEnvironment\n    plural: xdevenvironments\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    description: \"Name of the development environment\"\n                    pattern: '^[a-z0-9-]+$'\n                    minLength: 3\n                    maxLength: 20\n                  owner:\n                    type: string\n                    description: \"Environment owner (developer name)\"\n                    pattern: '^[a-z0-9.-]+$'\n                  team:\n                    type: string\n                    description: \"Team responsible for this environment\"\n                    pattern: '^[a-z0-9-]+$'\n                  region:\n                    type: string\n                    description: \"Azure region for deployment\"\n                    default: \"eastus\"\n                    enum: [\"eastus\", \"westus2\", \"eastus2\"]\n                  costLimit:\n                    type: string\n                    description: \"Maximum monthly cost limit\"\n                    default: \"$50\"\n                    enum: [\"$25\", \"$50\", \"$100\", \"$200\"]\n                  autoShutdown:\n                    type: object\n                    description: \"Auto-shutdown configuration to save costs\"\n                    properties:\n                      enabled:\n                        type: boolean\n                        default: true\n                      schedule:\n                        type: string\n                        description: \"Shutdown schedule in cron format\"\n                        default: \"0 18 * * 1-5\"  # 6 PM weekdays\n                      timezone:\n                        type: string\n                        default: \"UTC\"\n                  networking:\n                    type: object\n                    properties:\n                      vnetCidr:\n                        type: string\n                        default: \"10.0.0.0/16\"\n                      allowSshFrom:\n                        type: array\n                        items:\n                          type: string\n                        default: [\"0.0.0.0/0\"]  # Relaxed for dev\n                      allowRdpFrom:\n                        type: array\n                        items:\n                          type: string\n                        default: [\"0.0.0.0/0\"]  # Relaxed for dev\n                  compute:\n                    type: object\n                    description: \"Compute resource specifications\"\n                    properties:\n                      vmSize:\n                        type: string\n                        description: \"VM size for compute resources\"\n                        default: \"Standard_B2s\"  # Cost-optimized\n                        enum: [\"Standard_B1s\", \"Standard_B2s\", \"Standard_B4ms\"]\n                      diskType:\n                        type: string\n                        description: \"Disk type for cost optimization\"\n                        default: \"Standard_LRS\"\n                        enum: [\"Standard_LRS\", \"StandardSSD_LRS\"]\n                required:\n                - name\n                - owner\n                - team\n            required:\n            - parameters\n</code></pre> <pre><code># platform-core/xrds/environment-staging-xrd.yaml\napiVersion: apiextensions.crossplane.io/v2\nkind: CompositeResourceDefinition\nmetadata:\n  name: xstagingenvironments.environments.platform.tutorial.com\n  labels:\n    app: crossplane-tutorial\n    component: xrd\n    environment-type: staging\nspec:\n  group: environments.platform.tutorial.com\n  names:\n    kind: XStagingEnvironment\n    plural: xstagingenvironments\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    description: \"Name of the staging environment\"\n                    pattern: '^[a-z0-9-]+-staging$'\n                    minLength: 10\n                    maxLength: 30\n                  team:\n                    type: string\n                    description: \"Team responsible for this environment\"\n                    pattern: '^[a-z0-9-]+$'\n                  region:\n                    type: string\n                    description: \"Azure region for deployment\"\n                    default: \"eastus\"\n                    enum: [\"eastus\", \"westus2\", \"eastus2\", \"westeurope\"]\n                  highAvailability:\n                    type: boolean\n                    description: \"Enable high availability features\"\n                    default: false\n                  backupRetention:\n                    type: integer\n                    description: \"Backup retention in days\"\n                    default: 7\n                    minimum: 7\n                    maximum: 30\n                  monitoring:\n                    type: object\n                    properties:\n                      alerting:\n                        type: boolean\n                        default: true\n                      metricsRetention:\n                        type: integer\n                        default: 30\n                  networking:\n                    type: object\n                    properties:\n                      vnetCidr:\n                        type: string\n                        default: \"10.1.0.0/16\"\n                      allowSshFrom:\n                        type: array\n                        items:\n                          type: string\n                        default: [\"10.0.0.0/8\", \"172.16.0.0/12\"]  # More restrictive\n                      enablePrivateEndpoints:\n                        type: boolean\n                        default: true\n                  compute:\n                    type: object\n                    properties:\n                      vmSize:\n                        type: string\n                        default: \"Standard_D2s_v3\"  # Performance-oriented\n                        enum: [\"Standard_D2s_v3\", \"Standard_D4s_v3\", \"Standard_D8s_v3\"]\n                      diskType:\n                        type: string\n                        default: \"Premium_LRS\"  # Better performance\n                        enum: [\"StandardSSD_LRS\", \"Premium_LRS\"]\n                required:\n                - name\n                - team\n            required:\n            - parameters\n</code></pre> <pre><code># platform-core/xrds/environment-production-xrd.yaml\napiVersion: apiextensions.crossplane.io/v2\nkind: CompositeResourceDefinition\nmetadata:\n  name: xproductionenvironments.environments.platform.tutorial.com\n  labels:\n    app: crossplane-tutorial\n    component: xrd\n    environment-type: production\nspec:\n  group: environments.platform.tutorial.com\n  names:\n    kind: XProductionEnvironment\n    plural: xproductionenvironments\n  scope: Namespaced\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    description: \"Name of the production environment\"\n                    pattern: '^[a-z0-9-]+-prod$'\n                    minLength: 10\n                    maxLength: 30\n                  team:\n                    type: string\n                    description: \"Team responsible for this environment\"\n                    pattern: '^[a-z0-9-]+$'\n                  businessCriticality:\n                    type: string\n                    description: \"Business criticality level\"\n                    enum: [\"high\", \"critical\"]\n                    default: \"high\"\n                  region:\n                    type: string\n                    description: \"Primary Azure region\"\n                    default: \"eastus\"\n                    enum: [\"eastus\", \"westus2\", \"eastus2\", \"westeurope\"]\n                  multiRegion:\n                    type: object\n                    properties:\n                      enabled:\n                        type: boolean\n                        default: false\n                      secondaryRegion:\n                        type: string\n                        enum: [\"eastus\", \"westus2\", \"eastus2\", \"westeurope\"]\n                  backup:\n                    type: object\n                    properties:\n                      retention:\n                        type: integer\n                        default: 90\n                        minimum: 30\n                        maximum: 365\n                      geoRedundant:\n                        type: boolean\n                        default: true\n                  security:\n                    type: object\n                    properties:\n                      privateEndpoints:\n                        type: boolean\n                        default: true\n                      encryptionAtRest:\n                        type: boolean\n                        default: true\n                      networkIsolation:\n                        type: boolean\n                        default: true\n                  monitoring:\n                    type: object\n                    properties:\n                      alerting:\n                        type: boolean\n                        default: true\n                      metricsRetention:\n                        type: integer\n                        default: 90\n                      logRetention:\n                        type: integer\n                        default: 365\n                  networking:\n                    type: object\n                    properties:\n                      vnetCidr:\n                        type: string\n                        default: \"10.2.0.0/16\"\n                      allowSshFrom:\n                        type: array\n                        items:\n                          type: string\n                        default: [\"10.0.0.0/8\"]  # Very restrictive\n                      bastionHost:\n                        type: boolean\n                        default: true\n                  compute:\n                    type: object\n                    properties:\n                      vmSize:\n                        type: string\n                        default: \"Standard_D4s_v3\"\n                        enum: [\"Standard_D4s_v3\", \"Standard_D8s_v3\", \"Standard_D16s_v3\"]\n                      diskType:\n                        type: string\n                        default: \"Premium_LRS\"\n                        enum: [\"Premium_LRS\", \"UltraSSD_LRS\"]\n                      availabilityZones:\n                        type: boolean\n                        default: true\n                required:\n                - name\n                - team\n                - businessCriticality\n            required:\n            - parameters\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#step-2-environment-specific-compositions","title":"Step 2: Environment-Specific Compositions","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#21-development-environment-composition","title":"2.1 Development Environment Composition","text":"<pre><code># platform-core/compositions/environment-dev-composition.yaml\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dev-environment-azure\n  labels:\n    provider: azure\n    environment: development\n    cost-optimized: \"true\"\n    app: crossplane-tutorial\nspec:\n  compositeTypeRef:\n    apiVersion: environments.platform.tutorial.com/v1alpha1\n    kind: XDevEnvironment\n\n  resources:\n  - name: resource-group\n    base:\n      apiVersion: azure.upbound.io/v1beta1\n      kind: ResourceGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: development\n            cost-optimization: enabled\n            auto-shutdown: enabled\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.region\n      toFieldPath: spec.forProvider.location\n      transforms:\n      - type: map\n        map:\n          eastus: \"East US\"\n          westus2: \"West US 2\"\n          eastus2: \"East US 2\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.owner\n      toFieldPath: spec.forProvider.tags[\"owner\"]\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.team\n      toFieldPath: spec.forProvider.tags[\"team\"]\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.costLimit\n      toFieldPath: spec.forProvider.tags[\"cost-limit\"]\n\n  - name: virtual-network\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: VirtualNetwork\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: development\n            network-type: basic\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-vnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.region\n      toFieldPath: spec.forProvider.location\n      transforms:\n      - type: map\n        map:\n          eastus: \"East US\"\n          westus2: \"West US 2\"\n          eastus2: \"East US 2\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.vnetCidr\n      toFieldPath: spec.forProvider.addressSpace[0]\n\n  - name: dev-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider:\n          addressPrefixes: [\"10.0.1.0/24\"]\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-subnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-vnet\"\n\n  - name: dev-nsg\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: development\n            security-level: relaxed\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-nsg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-rg\"\n\n  # Dev-specific: Allow SSH from anywhere (relaxed security)\n  - name: ssh-rule-dev\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityRule\n      spec:\n        forProvider:\n          priority: 1000\n          direction: \"Inbound\"\n          access: \"Allow\"\n          protocol: \"Tcp\"\n          destinationPortRange: \"22\"\n          destinationAddressPrefix: \"*\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-ssh-dev-rule\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-rg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.networkSecurityGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-dev-nsg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.allowSshFrom\n      toFieldPath: spec.forProvider.sourceAddressPrefixes\n\n  # Dev-specific: Cost optimization automation\n  - name: auto-shutdown-config\n    base:\n      apiVersion: kubernetes.crossplane.io/v1alpha1\n      kind: Object\n      spec:\n        forProvider:\n          manifest:\n            apiVersion: v1\n            kind: ConfigMap\n            metadata:\n              namespace: crossplane-system\n            data:\n              enabled: \"true\"\n              schedule: \"0 18 * * 1-5\"\n              timezone: \"UTC\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-autoshutdown-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.manifest.metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-autoshutdown-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.autoShutdown.enabled\n      toFieldPath: spec.forProvider.manifest.data.enabled\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.autoShutdown.schedule\n      toFieldPath: spec.forProvider.manifest.data.schedule\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#22-staging-environment-composition","title":"2.2 Staging Environment Composition","text":"<pre><code># platform-core/compositions/environment-staging-composition.yaml\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: staging-environment-azure\n  labels:\n    provider: azure\n    environment: staging\n    production-like: \"true\"\n    app: crossplane-tutorial\nspec:\n  compositeTypeRef:\n    apiVersion: environments.platform.tutorial.com/v1alpha1\n    kind: XStagingEnvironment\n\n  resources:\n  - name: resource-group\n    base:\n      apiVersion: azure.upbound.io/v1beta1\n      kind: ResourceGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: staging\n            production-like: \"true\"\n            backup-enabled: \"true\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.region\n      toFieldPath: spec.forProvider.location\n      transforms:\n      - type: map\n        map:\n          eastus: \"East US\"\n          westus2: \"West US 2\"\n          eastus2: \"East US 2\"\n          westeurope: \"West Europe\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.team\n      toFieldPath: spec.forProvider.tags[\"team\"]\n\n  - name: virtual-network\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: VirtualNetwork\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: staging\n            network-type: production-like\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.region\n      toFieldPath: spec.forProvider.location\n      transforms:\n      - type: map\n        map:\n          eastus: \"East US\"\n          westus2: \"West US 2\"\n          eastus2: \"East US 2\"\n          westeurope: \"West Europe\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.vnetCidr\n      toFieldPath: spec.forProvider.addressSpace[0]\n\n  # Multiple subnets for staging (more production-like)\n  - name: app-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider:\n          addressPrefixes: [\"10.1.1.0/24\"]\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-app-subnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n  - name: data-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider:\n          addressPrefixes: [\"10.1.2.0/24\"]\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-data-subnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n  - name: staging-nsg\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: staging\n            security-level: moderate\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n  # Staging-specific: Restricted SSH access\n  - name: ssh-rule-staging\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityRule\n      spec:\n        forProvider:\n          priority: 1000\n          direction: \"Inbound\"\n          access: \"Allow\"\n          protocol: \"Tcp\"\n          destinationPortRange: \"22\"\n          destinationAddressPrefix: \"*\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-ssh-rule\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.networkSecurityGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.allowSshFrom\n      toFieldPath: spec.forProvider.sourceAddressPrefixes\n\n  # Staging-specific: Monitoring configuration\n  - name: monitoring-config\n    base:\n      apiVersion: kubernetes.crossplane.io/v1alpha1\n      kind: Object\n      spec:\n        forProvider:\n          manifest:\n            apiVersion: v1\n            kind: ConfigMap\n            metadata:\n              namespace: crossplane-system\n            data:\n              alerting: \"true\"\n              metrics-retention: \"30\"\n              environment: \"staging\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-monitoring-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.manifest.metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-monitoring-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.monitoring.alerting\n      toFieldPath: spec.forProvider.manifest.data.alerting\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.monitoring.metricsRetention\n      toFieldPath: spec.forProvider.manifest.data.metrics-retention\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#23-production-environment-composition","title":"2.3 Production Environment Composition","text":"<pre><code># platform-core/compositions/environment-production-composition.yaml\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: production-environment-azure\n  labels:\n    provider: azure\n    environment: production\n    high-availability: \"true\"\n    security-hardened: \"true\"\n    app: crossplane-tutorial\nspec:\n  compositeTypeRef:\n    apiVersion: environments.platform.tutorial.com/v1alpha1\n    kind: XProductionEnvironment\n\n  resources:\n  - name: resource-group\n    base:\n      apiVersion: azure.upbound.io/v1beta1\n      kind: ResourceGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: production\n            high-availability: \"true\"\n            backup-enabled: \"true\"\n            encryption-enabled: \"true\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.region\n      toFieldPath: spec.forProvider.location\n      transforms:\n      - type: map\n        map:\n          eastus: \"East US\"\n          westus2: \"West US 2\"\n          eastus2: \"East US 2\"\n          westeurope: \"West Europe\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.team\n      toFieldPath: spec.forProvider.tags[\"team\"]\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.businessCriticality\n      toFieldPath: spec.forProvider.tags[\"criticality\"]\n\n  - name: virtual-network\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: VirtualNetwork\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: production\n            network-type: enterprise\n            security-level: high\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.region\n      toFieldPath: spec.forProvider.location\n      transforms:\n      - type: map\n        map:\n          eastus: \"East US\"\n          westus2: \"West US 2\"\n          eastus2: \"East US 2\"\n          westeurope: \"West Europe\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.vnetCidr\n      toFieldPath: spec.forProvider.addressSpace[0]\n\n  # Production: Multiple subnets with specific purposes\n  - name: web-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider:\n          addressPrefixes: [\"10.2.1.0/24\"]\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-web-subnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n  - name: app-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider:\n          addressPrefixes: [\"10.2.2.0/24\"]\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-app-subnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n  - name: data-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider:\n          addressPrefixes: [\"10.2.3.0/24\"]\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-data-subnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n  # Production-specific: Bastion subnet for secure access\n  - name: bastion-subnet\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: Subnet\n      spec:\n        forProvider:\n          addressPrefixes: [\"10.2.4.0/24\"]\n          name: \"AzureBastionSubnet\"  # Required name for Bastion\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-bastion-subnet\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.virtualNetworkName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-vnet\"\n\n  - name: production-nsg\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityGroup\n      spec:\n        forProvider:\n          tags:\n            managed-by: crossplane\n            environment: production\n            security-level: high\n            compliance-required: \"true\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n  # Production-specific: Very restrictive SSH access\n  - name: ssh-rule-production\n    base:\n      apiVersion: network.azure.upbound.io/v1beta1\n      kind: NetworkSecurityRule\n      spec:\n        forProvider:\n          priority: 1000\n          direction: \"Inbound\"\n          access: \"Allow\"\n          protocol: \"Tcp\"\n          destinationPortRange: \"22\"\n          destinationAddressPrefix: \"*\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-ssh-rule\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.resourceGroupName\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.networkSecurityGroupName\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-nsg\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.networking.allowSshFrom\n      toFieldPath: spec.forProvider.sourceAddressPrefixes\n\n  # Production-specific: Comprehensive monitoring\n  - name: monitoring-config\n    base:\n      apiVersion: kubernetes.crossplane.io/v1alpha1\n      kind: Object\n      spec:\n        forProvider:\n          manifest:\n            apiVersion: v1\n            kind: ConfigMap\n            metadata:\n              namespace: crossplane-system\n            data:\n              alerting: \"true\"\n              metrics-retention: \"90\"\n              log-retention: \"365\"\n              environment: \"production\"\n              high-availability: \"true\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-monitoring-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.manifest.metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-monitoring-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.monitoring.alerting\n      toFieldPath: spec.forProvider.manifest.data.alerting\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.monitoring.metricsRetention\n      toFieldPath: spec.forProvider.manifest.data.metrics-retention\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.monitoring.logRetention\n      toFieldPath: spec.forProvider.manifest.data.log-retention\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n\n  # Production-specific: Backup configuration\n  - name: backup-config\n    base:\n      apiVersion: kubernetes.crossplane.io/v1alpha1\n      kind: Object\n      spec:\n        forProvider:\n          manifest:\n            apiVersion: v1\n            kind: ConfigMap\n            metadata:\n              namespace: crossplane-system\n            data:\n              retention-days: \"90\"\n              geo-redundant: \"true\"\n              environment: \"production\"\n    patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-backup-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.name\n      toFieldPath: spec.forProvider.manifest.metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-backup-config\"\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.backup.retention\n      toFieldPath: spec.forProvider.manifest.data.retention-days\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.parameters.backup.geoRedundant\n      toFieldPath: spec.forProvider.manifest.data.geo-redundant\n      transforms:\n      - type: convert\n        convert:\n          toType: string\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#step-3-create-environment-examples","title":"Step 3: Create Environment Examples","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#31-development-environments","title":"3.1 Development Environments","text":"<pre><code># applications/environments/dev/alice-dev.yaml\napiVersion: environments.platform.tutorial.com/v1alpha1\nkind: DevEnvironment\nmetadata:\n  name: alice-dev\n  namespace: crossplane-system\n  labels:\n    app: crossplane-tutorial\n    owner: alice\n    environment: development\nspec:\n  parameters:\n    name: alice-dev\n    owner: alice.smith\n    team: frontend\n    region: eastus\n    costLimit: \"$50\"\n    autoShutdown:\n      enabled: true\n      schedule: \"0 18 * * 1-5\"  # 6 PM weekdays\n      timezone: \"America/New_York\"\n    networking:\n      vnetCidr: \"10.0.0.0/16\"\n      allowSshFrom:\n        - \"203.0.113.0/24\"  # Alice's office\n        - \"198.51.100.0/24\" # VPN range\n      allowRdpFrom:\n        - \"203.0.113.0/24\"\n    compute:\n      vmSize: \"Standard_B2s\"  # Cost-optimized\n      diskType: \"Standard_LRS\"\n</code></pre> <pre><code># applications/environments/dev/bob-dev.yaml\napiVersion: environments.platform.tutorial.com/v1alpha1\nkind: DevEnvironment\nmetadata:\n  name: bob-dev\n  namespace: crossplane-system\n  labels:\n    app: crossplane-tutorial\n    owner: bob\n    environment: development\nspec:\n  parameters:\n    name: bob-dev\n    owner: bob.jones\n    team: backend\n    region: westus2\n    costLimit: \"$100\"  # Bob needs more resources\n    autoShutdown:\n      enabled: true\n      schedule: \"0 19 * * 1-5\"  # 7 PM weekdays\n      timezone: \"America/Los_Angeles\"\n    networking:\n      vnetCidr: \"10.10.0.0/16\"\n      allowSshFrom:\n        - \"192.0.2.0/24\"   # Bob's office\n        - \"198.51.100.0/24\" # VPN range\n    compute:\n      vmSize: \"Standard_B4ms\"  # Bob needs more CPU\n      diskType: \"StandardSSD_LRS\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#32-staging-environment","title":"3.2 Staging Environment","text":"<pre><code># applications/environments/staging/myapp-staging.yaml\napiVersion: environments.platform.tutorial.com/v1alpha1\nkind: StagingEnvironment\nmetadata:\n  name: myapp-staging\n  namespace: crossplane-system\n  labels:\n    app: crossplane-tutorial\n    environment: staging\n    team: platform\nspec:\n  parameters:\n    name: myapp-staging\n    team: platform\n    region: eastus\n    highAvailability: false  # Cost-conscious staging\n    backupRetention: 14\n    monitoring:\n      alerting: true\n      metricsRetention: 30\n    networking:\n      vnetCidr: \"10.1.0.0/16\"\n      allowSshFrom:\n        - \"10.0.0.0/8\"      # Internal networks only\n        - \"172.16.0.0/12\"   # Corporate VPN\n      enablePrivateEndpoints: true\n    compute:\n      vmSize: \"Standard_D2s_v3\"  # Performance for testing\n      diskType: \"Premium_LRS\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#33-production-environment","title":"3.3 Production Environment","text":"<pre><code># applications/environments/production/myapp-prod.yaml\napiVersion: environments.platform.tutorial.com/v1alpha1\nkind: ProductionEnvironment\nmetadata:\n  name: myapp-prod\n  namespace: crossplane-system\n  labels:\n    app: crossplane-tutorial\n    environment: production\n    criticality: high\nspec:\n  parameters:\n    name: myapp-prod\n    team: platform\n    businessCriticality: high\n    region: eastus\n    multiRegion:\n      enabled: false  # Start simple, can enable later\n    backup:\n      retention: 90\n      geoRedundant: true\n    security:\n      privateEndpoints: true\n      encryptionAtRest: true\n      networkIsolation: true\n    monitoring:\n      alerting: true\n      metricsRetention: 90\n      logRetention: 365\n    networking:\n      vnetCidr: \"10.2.0.0/16\"\n      allowSshFrom:\n        - \"10.0.0.0/8\"    # Very restrictive - internal only\n      bastionHost: true\n    compute:\n      vmSize: \"Standard_D4s_v3\"  # Production performance\n      diskType: \"Premium_LRS\"\n      availabilityZones: true\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#step-4-deploy-environment-patterns","title":"Step 4: Deploy Environment Patterns","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#41-update-argocd-applications","title":"4.1 Update ArgoCD Applications","text":"<pre><code># applications/platform/environment-apis.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: environment-xrds\n  namespace: argocd\n  labels:\n    app: crossplane-tutorial\n    component: environment-apis\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: platform-core/xrds\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crossplane-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: environment-compositions\n  namespace: argocd\n  labels:\n    app: crossplane-tutorial\n    component: environment-logic\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: platform-core/compositions\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crossplane-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: environment-instances\n  namespace: argocd\n  labels:\n    app: crossplane-tutorial\n    component: environments\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: applications/environments\n    directory:\n      recurse: true\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crossplane-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#42-commit-and-deploy","title":"4.2 Commit and Deploy","text":"<pre><code># Add all new environment files\ngit add platform-core/xrds/environment-*.yaml\ngit add platform-core/compositions/environment-*.yaml\ngit add applications/environments/\ngit add applications/platform/environment-apis.yaml\n\n# Update repository URL  \nsed -i \"s|__YOUR_PLATFORM_GITOPS_REPO_URL__|$TUTORIAL_REPO_URL|g\" applications/platform/environment-apis.yaml\n\n# Commit with comprehensive message\ngit commit -m \"feat: implement environment-specific patterns\n\n- Add dedicated XRDs for dev/staging/prod environments\n- Implement environment-aware Compositions with:\n  * Development: Cost-optimized, relaxed security, auto-shutdown\n  * Staging: Production-like, moderate security, monitoring\n  * Production: High security, HA, comprehensive monitoring/backup\n- Add environment examples demonstrating patterns\n- Support for cost limits, auto-shutdown, and compliance requirements\n- Environment-specific networking and security configurations\"\n\n# Push to trigger deployment\ngit push\n\n# Deploy ArgoCD applications\nkubectl apply -f applications/platform/environment-apis.yaml\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#step-5-test-environment-patterns","title":"Step 5: Test Environment Patterns","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#51-verify-apis-are-available","title":"5.1 Verify APIs are Available","text":"<pre><code># Check all new APIs are registered\nkubectl api-resources | grep environments.platform.tutorial.com\n\n# Should see:\n# devenvironments        environments.platform.tutorial.com/v1alpha1    true    DevEnvironment\n# stagingenvironments    environments.platform.tutorial.com/v1alpha1    true    StagingEnvironment  \n# productionenvironments environments.platform.tutorial.com/v1alpha1    true    ProductionEnvironment\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#52-watch-environments-deploy","title":"5.2 Watch Environments Deploy","text":"<pre><code># Watch all environment types\nkubectl get devenvironments,stagingenvironments,productionenvironments -n crossplane-system -w\n\n# Check specific environment\nkubectl describe devenvironment alice-dev -n crossplane-system\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#53-compare-resource-patterns","title":"5.3 Compare Resource Patterns","text":"<pre><code># Development environment resources (cost-optimized)\nkubectl get managed -n crossplane-system | grep alice-dev\n\n# Staging environment resources (production-like)\nkubectl get managed -n crossplane-system | grep myapp-staging\n\n# Production environment resources (fully featured)\nkubectl get managed -n crossplane-system | grep myapp-prod\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#54-verify-azure-resources","title":"5.4 Verify Azure Resources","text":"<pre><code># Development environment\naz group show --name alice-dev-dev-rg --query tags\naz network vnet show --resource-group alice-dev-dev-rg --name alice-dev-dev-vnet --query addressSpace\n\n# Staging environment  \naz group show --name myapp-staging --query tags\naz network vnet subnet list --resource-group myapp-staging --vnet-name myapp-staging-vnet --output table\n\n# Production environment\naz group show --name myapp-prod --query tags\naz network vnet subnet list --resource-group myapp-prod --vnet-name myapp-prod-vnet --output table\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#environment-pattern-benefits","title":"Environment Pattern Benefits","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#1-right-sizing-by-environment","title":"1. Right-Sizing by Environment","text":"<pre><code>graph TD\n    A[Environment Request] --&gt; B{Environment Type}\n    B --&gt;|Development| C[Cost-Optimized&lt;br/&gt;B-series VMs&lt;br/&gt;Standard Storage&lt;br/&gt;Relaxed Security]\n    B --&gt;|Staging| D[Balanced&lt;br/&gt;D-series VMs&lt;br/&gt;Premium Storage&lt;br/&gt;Moderate Security]\n    B --&gt;|Production| E[Performance&lt;br/&gt;High-end VMs&lt;br/&gt;Ultra Storage&lt;br/&gt;Maximum Security]\n\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#ffebee\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#2-automated-compliance","title":"2. Automated Compliance","text":"<ul> <li>Development: Cost controls, auto-shutdown</li> <li>Staging: Backup enabled, monitoring configured</li> <li>Production: Encryption, geo-redundancy, audit logging</li> </ul>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#3-security-progressive-enhancement","title":"3. Security Progressive Enhancement","text":"<ul> <li>Development: <code>0.0.0.0/0</code> SSH access (developer convenience)</li> <li>Staging: Private network ranges only</li> <li>Production: Bastion host, private endpoints</li> </ul>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#cost-optimization-patterns","title":"Cost Optimization Patterns","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#development-environment-savings","title":"Development Environment Savings","text":"<pre><code># Automatic shutdown saves ~60% on compute costs\nautoShutdown:\n  enabled: true\n  schedule: \"0 18 * * 1-5\"  # Weekdays only\n\n# Burstable VMs save on baseline costs\ncompute:\n  vmSize: \"Standard_B2s\"  # Burstable performance\n  diskType: \"Standard_LRS\"  # Cheapest storage\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#resource-tagging-for-cost-tracking","title":"Resource Tagging for Cost Tracking","text":"<pre><code>tags:\n  cost-center: \"1234\"\n  cost-limit: \"$50\" \n  auto-shutdown: \"enabled\"\n  environment: \"development\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#platform-governance","title":"Platform Governance","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#1-environment-naming-conventions","title":"1. Environment Naming Conventions","text":"<pre><code># Development: flexible naming\npattern: '^[a-z0-9-]+$'\n\n# Staging: must end with -staging  \npattern: '^[a-z0-9-]+-staging$'\n\n# Production: must end with -prod\npattern: '^[a-z0-9-]+-prod$'\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#2-required-fields-by-environment","title":"2. Required Fields by Environment","text":"<pre><code># Development: minimal requirements\nrequired: [name, owner, team]\n\n# Staging: team ownership\nrequired: [name, team]\n\n# Production: business criticality\nrequired: [name, team, businessCriticality]\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#3-default-security-policies","title":"3. Default Security Policies","text":"<p>Environment-specific defaults ensure security scales with criticality:</p> <ul> <li>Dev: Open for productivity</li> <li>Staging: Controlled for testing  </li> <li>Prod: Locked down for security</li> </ul>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#learning-outcomes","title":"Learning Outcomes","text":"<p>After completing this module, you should understand:</p> <ul> <li>\u2705 Environment-Specific Design: Different XRDs for different needs</li> <li>\u2705 Cost Optimization Patterns: Auto-shutdown, right-sizing, resource selection</li> <li>\u2705 Security Progressive Enhancement: Environment-appropriate security levels</li> <li>\u2705 Governance Through Code: Naming conventions, required fields, validation</li> <li>\u2705 Platform Scalability: Patterns that work from dev to enterprise</li> </ul>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#advanced-platform-features","title":"Advanced Platform Features","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#multi-region-support","title":"Multi-Region Support","text":"<pre><code># Production environments can span regions\nmultiRegion:\n  enabled: true\n  secondaryRegion: \"westus2\"\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#business-criticality-awareness","title":"Business Criticality Awareness","text":"<pre><code># Different SLAs based on criticality\nbusinessCriticality: \"critical\"  # vs \"high\"\n# Automatically adjusts backup, monitoring, alerting\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#team-based-resource-isolation","title":"Team-Based Resource Isolation","text":"<pre><code># Team-specific networking and security\nteam: \"platform\"\n# Automatically applies team-specific policies\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#congratulations","title":"Congratulations! \ud83c\udf89","text":"<p>You've built a complete environment platform with:</p> <ul> <li>\u2705 Three Environment Types with appropriate patterns</li> <li>\u2705 Cost Optimization built into development environments</li> <li>\u2705 Security Progressive Enhancement from dev to prod</li> <li>\u2705 Governance and Compliance through validation and defaults</li> <li>\u2705 Team Self-Service with easy-to-use APIs</li> </ul>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#complete-platform-architecture","title":"Complete Platform Architecture","text":"<pre><code>graph TB\n    subgraph \"Developer Experience\"\n        A[DevEnvironment YAML] \n        B[StagingEnvironment YAML]\n        C[ProductionEnvironment YAML]\n    end\n\n    subgraph \"Platform Logic\"\n        D[Dev Composition&lt;br/&gt;Cost-Optimized]\n        E[Staging Composition&lt;br/&gt;Production-Like] \n        F[Production Composition&lt;br/&gt;Fully Featured]\n    end\n\n    subgraph \"Azure Infrastructure\"\n        G[Dev Resources&lt;br/&gt;B-series VMs&lt;br/&gt;Standard Storage]\n        H[Staging Resources&lt;br/&gt;D-series VMs&lt;br/&gt;Premium Storage]\n        I[Production Resources&lt;br/&gt;High-end VMs&lt;br/&gt;Ultra Storage&lt;br/&gt;Bastion Host]\n    end\n\n    A --&gt; D --&gt; G\n    B --&gt; E --&gt; H  \n    C --&gt; F --&gt; I\n\n    style A fill:#e8f5e8\n    style B fill:#fff3e0\n    style C fill:#ffebee\n</code></pre> <p>Your platform now provides a complete Internal Developer Platform that teams can use to provision appropriate infrastructure for any stage of their application lifecycle.</p>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#next-steps","title":"Next Steps","text":"<p>With your environment patterns complete, you might consider:</p> <ol> <li>Add Database Compositions - PostgreSQL, MySQL, Redis patterns</li> <li>Implement Kubernetes Integration - AKS clusters with proper networking</li> <li>Build Application Compositions - Complete app stacks with databases and monitoring</li> <li>Add Policy Integration - OPA/Gatekeeper for governance</li> <li>Implement Cost Management - Budget alerts and resource optimization</li> </ol>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#quick-reference","title":"Quick Reference","text":""},{"location":"crossplane-advanced-patterns/03-environment-patterns/#environment-commands","title":"Environment Commands","text":"<pre><code># List all environment types\nkubectl get devenvironments,stagingenvironments,productionenvironments -n crossplane-system\n\n# Check environment-specific resources\nkubectl get managed -l crossplane.io/composite=&lt;env-name&gt; -n crossplane-system\n\n# Get environment status\nkubectl describe &lt;environment-type&gt; &lt;name&gt; -n crossplane-system\n</code></pre>"},{"location":"crossplane-advanced-patterns/03-environment-patterns/#file-structure-after-this-module","title":"File Structure After This Module","text":"<pre><code>platform-core/\n\u251c\u2500\u2500 xrds/\n\u2502   \u251c\u2500\u2500 environment-dev-xrd.yaml\n\u2502   \u251c\u2500\u2500 environment-staging-xrd.yaml\n\u2502   \u2514\u2500\u2500 environment-production-xrd.yaml\n\u251c\u2500\u2500 compositions/\n\u2502   \u251c\u2500\u2500 environment-dev-composition.yaml\n\u2502   \u251c\u2500\u2500 environment-staging-composition.yaml\n\u2502   \u2514\u2500\u2500 environment-production-composition.yaml\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 alice-dev.yaml\n\u2502   \u2502   \u2514\u2500\u2500 bob-dev.yaml\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u2514\u2500\u2500 myapp-staging.yaml\n\u2502   \u2514\u2500\u2500 production/\n\u2502       \u2514\u2500\u2500 myapp-prod.yaml\n\u2514\u2500\u2500 applications/\n    \u2514\u2500\u2500 environment-apis.yaml\n</code></pre>"},{"location":"crossplane-fundamentals/","title":"Crossplane Fundamentals","text":"<p>Welcome to the Crossplane v2.0 learning journey! In this section, you'll transform from a Crossplane beginner to someone who can provision real Azure infrastructure using GitOps workflows.</p>"},{"location":"crossplane-fundamentals/#what-makes-crossplane-v20-different","title":"What Makes Crossplane v2.0 Different","text":"<p>Crossplane v2.0 introduces a namespace-first architecture that makes building control planes more intuitive and powerful:</p>"},{"location":"crossplane-fundamentals/#namespaced-everything","title":"\ud83c\udfd7\ufe0f Namespaced Everything","text":"<ul> <li>Composite Resources (XRs) live in user namespaces, not cluster-wide</li> <li>Managed Resources are namespaced for better isolation and RBAC</li> <li>No more Claims - developers work directly with XRs</li> </ul>"},{"location":"crossplane-fundamentals/#composition-functions-only","title":"\ud83d\udd27 Composition Functions Only","text":"<ul> <li>Native patch &amp; transform removed - functions provide more flexibility</li> <li>Pipeline-based compositions with reusable function libraries</li> <li>Any Kubernetes resource can be composed, not just managed resources</li> </ul>"},{"location":"crossplane-fundamentals/#cleaner-developer-experience","title":"\ud83c\udfaf Cleaner Developer Experience","text":"<ul> <li>spec.crossplane groups all Crossplane machinery for clarity</li> <li>Direct resource creation without intermediate claim objects</li> <li>Better namespace isolation for teams and projects</li> </ul>"},{"location":"crossplane-fundamentals/#what-youll-build","title":"What You'll Build","text":"<p>By the end of these modules, you'll have:</p> <ul> <li>\u2705 Secure Azure Provider configured with Sealed Secrets  </li> <li>\u2705 Real Cloud Infrastructure provisioned via Git commits  </li> <li>\u2705 Production-Ready Security following best practices  </li> <li>\u2705 GitOps Workflows for infrastructure management  </li> </ul>"},{"location":"crossplane-fundamentals/#learning-philosophy-build-first-understand-later","title":"Learning Philosophy: \"Build First, Understand Later\"","text":"<p>We start with working examples that demonstrate immediate value, then dive deeper into concepts. Every exercise follows GitOps principles from day one and produces production-ready artifacts.</p>"},{"location":"crossplane-fundamentals/#prerequisites","title":"Prerequisites","text":"<p>Before starting this section, ensure you have completed:</p> <ul> <li>\u2705 Getting Started: DevBox Setup </li> <li>\u2705 Getting Started: Local Cluster Setup </li> <li>\u2705 Getting Started: GitOps Bootstrap </li> <li>\u2705 Getting Started: Sealed Secrets Setup </li> </ul>"},{"location":"crossplane-fundamentals/#azure-account-requirements","title":"Azure Account Requirements","text":"<p>You'll need an active Azure subscription with:</p> <ul> <li>\u2705 Subscription access to create resources  </li> <li>\u2705 Permission to create service principals  </li> <li>\u2705 Azure CLI configured and authenticated  </li> </ul>"},{"location":"crossplane-fundamentals/#namespace-strategy-for-v20","title":"Namespace Strategy for v2.0","text":"<p>In Crossplane v2.0, namespaces provide natural boundaries for:</p>"},{"location":"crossplane-fundamentals/#resource-organization","title":"Resource Organization","text":"<pre><code>tutorial/              # Learning resources\n\u251c\u2500\u2500 ResourceGroups\n\u251c\u2500\u2500 VirtualNetworks    \n\u2514\u2500\u2500 XDevEnvironments\n\nproduction/           # Production workloads\n\u251c\u2500\u2500 Databases\n\u251c\u2500\u2500 AKSClusters\n\u2514\u2500\u2500 XProdEnvironments\n</code></pre>"},{"location":"crossplane-fundamentals/#team-isolation","title":"Team Isolation","text":"<ul> <li><code>frontend-team</code> namespace for UI-focused resources</li> <li><code>backend-team</code> namespace for API and data resources  </li> <li><code>platform-team</code> namespace for shared infrastructure</li> </ul>"},{"location":"crossplane-fundamentals/#rbac-benefits","title":"RBAC Benefits","text":"<ul> <li>Fine-grained permissions per namespace</li> <li>Team-specific resource access</li> <li>Natural audit boundaries</li> </ul> <p>For this tutorial: We'll use the <code>tutorial</code> namespace to keep all learning resources organized and isolated from other workloads.</p>"},{"location":"crossplane-fundamentals/#function-based-composition-in-v2","title":"Function-Based Composition in v2","text":"<p>Crossplane v2 moves from native patch-and-transform to function pipelines. Understanding functions is crucial for v2 success:</p>"},{"location":"crossplane-fundamentals/#core-functions-youll-use","title":"Core Functions You'll Use","text":"<ul> <li><code>function-patch-and-transform</code>: YAML-based transformations (most common)</li> <li><code>function-python</code>: Python scripting for complex logic  </li> <li><code>function-kcl</code>: KCL configuration language for validation</li> <li><code>function-go-templating</code>: Go templates for dynamic generation</li> </ul>"},{"location":"crossplane-fundamentals/#function-installation-pattern","title":"Function Installation Pattern","text":"<pre><code>apiVersion: pkg.crossplane.io/v1beta1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.upbound.io/crossplane-contrib/function-patch-and-transform:v0.2.1\n</code></pre>"},{"location":"crossplane-fundamentals/#pipeline-execution","title":"Pipeline Execution","text":"<pre><code>apiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline  # v2 default\n  pipeline:\n  - step: patch-resources\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      # Function-specific configuration\n</code></pre>"},{"location":"crossplane-fundamentals/#when-youll-learn-functions","title":"When You'll Learn Functions","text":"<ul> <li>Module 2: Basic function installation and usage</li> <li>Advanced Patterns: Complex function pipelines and custom logic</li> <li>Troubleshooting: Function debugging techniques</li> </ul>"},{"location":"crossplane-fundamentals/#module-overview","title":"Module Overview","text":""},{"location":"crossplane-fundamentals/#module-1-azure-provider-setup-15-minutes","title":"Module 1: Azure Provider Setup (15 minutes)","text":"<p>Objective: Configure Crossplane to securely manage Azure resources</p> <p>What you'll learn: - How to install Azure provider in Crossplane - Secure credential management with Sealed Secrets - Provider configuration and verification - GitOps deployment of provider components  </p> <p>Deliverables: - Azure provider installed and configured - Service principal credentials securely stored - Provider health verification  </p>"},{"location":"crossplane-fundamentals/#module-2-your-first-managed-resource-15-minutes","title":"Module 2: Your First Managed Resource (15 minutes)","text":"<p>Objective: Deploy a real Azure resource using Crossplane</p> <p>What you'll learn: - What are Managed Resources (MRs) - How to create Azure Resource Groups - GitOps workflow for resource deployment - Resource status monitoring and troubleshooting  </p> <p>Deliverables: - Azure Resource Group deployed via Git - Understanding of resource lifecycle - ArgoCD application managing infrastructure  </p>"},{"location":"crossplane-fundamentals/#module-3-understanding-what-happened-15-minutes","title":"Module 3: Understanding What Happened (15 minutes)","text":"<p>Objective: Explore the Crossplane resource model and reconciliation</p> <p>What you'll learn: - Crossplane architecture and components - Resource states and conditions - Troubleshooting resource issues - Best practices for resource management  </p> <p>Deliverables: - Deep understanding of Crossplane concepts - Troubleshooting skills and techniques - Foundation for advanced patterns  </p>"},{"location":"crossplane-fundamentals/#operations-in-crossplane-v2-alpha-feature","title":"Operations in Crossplane v2 (Alpha Feature)","text":"<p>Crossplane v2 introduces Operations - an alpha feature for operational workflows that run to completion like Kubernetes Jobs:</p>"},{"location":"crossplane-fundamentals/#operation-types","title":"Operation Types","text":"<ul> <li><code>Operation</code>: Run function pipeline once  </li> <li><code>CronOperation</code>: Scheduled function execution  </li> <li><code>WatchOperation</code>: Event-driven function triggers  </li> </ul>"},{"location":"crossplane-fundamentals/#use-cases","title":"Use Cases","text":"<ul> <li>Certificate renewal: Automated cert lifecycle management</li> <li>Database backups: Scheduled backup operations  </li> <li>Health monitoring: Periodic health checks and reporting</li> <li>Configuration drift: Automated configuration validation</li> </ul>"},{"location":"crossplane-fundamentals/#example-daily-database-backup","title":"Example: Daily Database Backup","text":"<pre><code>apiVersion: ops.crossplane.io/v1alpha1\nkind: CronOperation\nmetadata:\n  name: backup-postgres\n  namespace: production\nspec:\n  schedule: \"0 2 * * *\"  # Daily at 2 AM\n  mode: Pipeline\n  pipeline:\n  - step: backup-database\n    functionRef:\n      name: function-python\n</code></pre>"},{"location":"crossplane-fundamentals/#enabling-operations","title":"Enabling Operations","text":"<p>Operations must be explicitly enabled: <pre><code># Add to Crossplane deployment\n--enable-operations=true\n</code></pre></p> <p>Note: Operations are alpha in v2 and may change. We'll cover them in advanced patterns once you master the core concepts.</p>"},{"location":"crossplane-fundamentals/#success-criteria","title":"Success Criteria","text":"<p>After completing this section, you should be able to:</p> <ul> <li>Explain the relationship between Providers, ProviderConfigs, and Managed Resources  </li> <li>Create Azure resources using Crossplane and GitOps workflows  </li> <li>Troubleshoot common resource provisioning issues  </li> <li>Follow security best practices for cloud credentials  </li> <li>Use ArgoCD to deploy and manage infrastructure components  </li> </ul>"},{"location":"crossplane-fundamentals/#time-investment","title":"Time Investment","text":"<p>Total time: ~45 minutes of hands-on exercises Format: Self-paced with immediate feedback Approach: Practical exercises with real Azure resources</p>"},{"location":"crossplane-fundamentals/#next-steps","title":"Next Steps","text":"<p>Ready to get started? Let's begin with setting up the Azure provider:</p> <p>\u27a1\ufe0f Module 1: Azure Provider Setup</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/","title":"Module 1: Azure Provider Setup","text":"<p>Time: 30-45 minutes Breakdown: - Azure service principal setup: 10-15 minutes - Provider configuration: 10 minutes - Sealed secrets creation: 10 minutes - Verification and troubleshooting: 10 minutes</p> <p>Objective: Configure Crossplane to securely manage Azure resources using GitOps workflows</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#overview","title":"Overview","text":"<p>Before Crossplane can create Azure resources, we need to: 1. Install the Azure provider 2. Create a service principal for authentication 3. Store credentials securely using Sealed Secrets 4. Configure the provider for use</p> <p>All of this will be done using GitOps principles - no manual <code>kubectl apply</code> commands!</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#prerequisites-check","title":"Prerequisites Check","text":"<p>Let's verify your environment is ready:</p> <pre><code># Verify you're in your platform repository\npwd\n# Should show something like: /path/to/your-platform-repo\n\n# Verify Azure CLI is authenticated\naz account show\n# Should show your active subscription\n\n# Verify Sealed Secrets is ready\nkubectl get pods -n sealed-secrets -l app.kubernetes.io/name=sealed-secrets-controller\n# Should show Running pod\n\n# Verify kubeseal CLI works\nkubeseal --version\n# Should show version 0.24.0 or newer\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-1-create-azure-service-principal","title":"Step 1: Create Azure Service Principal","text":"<p>A service principal is a security identity that Crossplane uses to manage Azure resources on your behalf.</p> <p>Skip this step, if you already have a service principal set up.</p> <pre><code># Set environment variables for your subscription\nexport SUBSCRIPTION_ID=$(az account show --query id --output tsv)\nexport TENANT_ID=$(az account show --query tenantId --output tsv)\n\n# Create service principal with Contributor role\necho \"Creating service principal for Crossplane...\"\nSP_OUTPUT=$(az ad sp create-for-rbac \\\n  --name \"crossplane-tutorial-sp\" \\\n  --role \"Contributor\" \\\n  --scopes \"/subscriptions/$SUBSCRIPTION_ID\" \\\n  --output json)\n\n# Extract values for later use\nexport CLIENT_ID=$(echo $SP_OUTPUT | jq -r '.appId')\nexport CLIENT_SECRET=$(echo $SP_OUTPUT | jq -r '.password')\n\necho \"Service Principal created successfully!\"\necho \"CLIENT_ID: $CLIENT_ID\"\necho \"TENANT_ID: $TENANT_ID\"\necho \"SUBSCRIPTION_ID: $SUBSCRIPTION_ID\"\necho \"CLIENT_SECRET: [HIDDEN]\"\n</code></pre> <p>Security Note: The service principal secret is sensitive. We'll encrypt it using Sealed Secrets before storing in Git.</p> <p>\ud83d\udcb0 Cost Awareness: Most resources in this tutorial use Azure's free tier or have minimal costs. We'll focus on: - Resource Groups: Free - Storage Accounts: ~$1-2/month for basic usage - App Services: Free tier available - Azure Functions: 1M executions free monthly</p> <p>Higher-cost resources like databases will be configured at the lowest tiers and include cleanup instructions.</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-2-create-directory-structure","title":"Step 2: Create Directory Structure","text":"<p>Let's organize our platform repository with proper structure:</p> <pre><code># Create directories for provider configuration\nmkdir -p platform-core/providers\nmkdir -p platform-core/provider-configs\nmkdir -p platform-core/applications\n\n# Verify structure\ntree platform-core/\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-3-define-azure-provider","title":"Step 3: Define Azure Provider","text":"<p>Create the provider installation manifest:</p> <pre><code># platform-core/providers/azure-provider.yaml\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-family-azure\n  annotations:\n    argocd.argoproj.io/sync-wave: \"0\"\nspec:\n  package: xpkg.upbound.io/upbound/provider-family-azure:v2.0.0\n  packagePullPolicy: IfNotPresent\n</code></pre> <p>Key points: - <code>sync-wave: \"1\"</code> ensures provider installs before configs - We pin to a specific version for reproducibility - <code>IfNotPresent</code> prevents unnecessary downloads</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-4-create-encrypted-credentials","title":"Step 4: Create Encrypted Credentials","text":"<p>Now we'll create the service principal credentials as a Sealed Secret:</p> <pre><code># Create temporary secret file (DO NOT COMMIT THIS)\ncat &gt; azure-secret-temp.yaml &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: azure-secret\n  namespace: crossplane-system\n  labels:\n    app: crossplane\n    component: azure-credentials\ntype: Opaque\nstringData:\n  creds: |\n    {\n      \"clientId\": \"$CLIENT_ID\",\n      \"clientSecret\": \"$CLIENT_SECRET\",\n      \"subscriptionId\": \"$SUBSCRIPTION_ID\",\n      \"tenantId\": \"$TENANT_ID\"\n    }\nEOF\n\n# Encrypt with Sealed Secrets\nkubeseal -o yaml &lt; azure-secret-temp.yaml &gt; platform-core/provider-configs/azure-credentials-sealed-secret.yaml\n\n# Clean up temporary file immediately\nrm azure-secret-temp.yaml\n\necho \"Credentials encrypted and saved to platform-core/provider-configs/azure-credentials-sealed-secret.yaml\"\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-5-create-providerconfig","title":"Step 5: Create ProviderConfig","text":"<p>The ProviderConfig tells Crossplane how to authenticate with Azure:</p> <pre><code># platform-core/provider-configs/azure-provider-config.yaml\napiVersion: azure.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\n  annotations:\n    argocd.argoproj.io/sync-wave: \"2\"\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\n</code></pre> <p>Key points: - Named <code>default</code> so it's used automatically - <code>sync-wave: \"2\"</code> ensures it creates after the provider - References our sealed secret by name</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-6-create-argocd-applications","title":"Step 6: Create ArgoCD Applications","text":"<p>Now we'll create ArgoCD applications to deploy our provider configuration:</p> <pre><code># platform-core/applications/azure-provider.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: azure-provider\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: platform-core/providers\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crossplane-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: azure-provider-config\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: platform-core/provider-configs\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crossplane-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-7-update-repository-url","title":"Step 7: Update Repository URL","text":"<p>Replace the placeholder with your actual repository URL:</p> <pre><code># Replace placeholder with your repository URL\nsed -i \"s|__YOUR_PLATFORM_GITOPS_REPO_URL__|$PLATFORM_GITOPS_REPO_URL|g\" platform-core/applications/azure-provider.yaml\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-8-deploy-configuration","title":"Step 8: Deploy Configuration","text":"<p>Now let's deploy our changes through GitOps:</p> <pre><code># Add the new provider configuration\ngit add platform-core/\n\n# Simple commit for configuration addition\ngit commit -m \"feat: add Azure provider with secure credentials\"\n\n# Push to trigger GitOps deployment\ngit push\n</code></pre> <p>Note: This is a simple configuration addition using direct git operations. For complex changes requiring review (like environment promotions), we would use PR workflows with <code>gh</code> CLI.</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-9-deploy-argocd-applications","title":"Step 9: Deploy ArgoCD Applications","text":"<p>Apply the ArgoCD applications to start the deployment:</p> <pre><code># Deploy the ArgoCD applications\nkubectl apply -f platform-core/applications/azure-provider.yaml\n\n# Watch the applications sync\nkubectl get applications -n argocd\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#step-10-verify-installation","title":"Step 10: Verify Installation","text":"<p>Let's verify that everything deployed correctly:</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#101-check-argocd-applications","title":"10.1 Check ArgoCD Applications","text":"<pre><code># Check application status\nkubectl get applications -n argocd -l app.kubernetes.io/part-of=azure-provider\n\n# Get detailed status\nkubectl describe application azure-provider -n argocd\nkubectl describe application azure-provider-config -n argocd\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#102-check-provider-installation","title":"10.2 Check Provider Installation","text":"<pre><code># List all providers\nkubectl get providers\n\n# Check Azure provider status\nkubectl get provider upbound-provider-azure -o yaml | grep -A 5 status\n\n# Look for provider pods\nkubectl get pods -n crossplane-system | grep azure\n</code></pre> <p>Expected output: <pre><code>NAME                                        READY   STATUS    RESTARTS   AGE\nupbound-provider-azure-xyz                  1/1     Running   0          2m\n</code></pre></p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#103-check-providerconfig","title":"10.3 Check ProviderConfig","text":"<pre><code># Check provider config\nkubectl get providerconfig default\n\n# Get detailed status\nkubectl describe providerconfig default\n</code></pre> <p>Expected output should show <code>Ready: True</code> in the status.</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#104-verify-credentials","title":"10.4 Verify Credentials","text":"<pre><code># Check that sealed secret was decrypted\nkubectl get secret azure-secret -n crossplane-system\n\n# Verify secret has the right keys (don't view contents)\nkubectl get secret azure-secret -n crossplane-system -o jsonpath='{.data}' | jq 'keys'\n</code></pre> <p>Should show: <code>[\"creds\"]</code></p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"crossplane-fundamentals/01-azure-provider-setup/#provider-not-installing","title":"Provider Not Installing","text":"<pre><code># Check provider logs\nkubectl logs -n crossplane-system deployment/crossplane -f\n\n# Check if provider exists\nkubectl get providers\nkubectl describe provider upbound-provider-azure\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#authentication-issues","title":"Authentication Issues","text":"<pre><code># Check sealed secret decryption\nkubectl get sealedsecrets -n crossplane-system\nkubectl describe sealedsecret azure-secret -n crossplane-system\n\n# Check provider config status\nkubectl describe providerconfig default\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#argocd-sync-issues","title":"ArgoCD Sync Issues","text":"<pre><code># Check application status\nargocd app get azure-provider\nargocd app get azure-provider-config\n\n# Force sync if needed\nargocd app sync azure-provider\nargocd app sync azure-provider-config\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#understanding-what-you-built","title":"Understanding What You Built","text":""},{"location":"crossplane-fundamentals/01-azure-provider-setup/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[Git Repository] --&gt;|ArgoCD Sync| B[Azure Provider]\n    A --&gt;|ArgoCD Sync| C[Sealed Secret]\n    A --&gt;|ArgoCD Sync| D[ProviderConfig]\n\n    C --&gt;|Decrypts to| E[Azure Secret]\n    D --&gt;|Uses| E\n    B --&gt;|Configured by| D\n    B --&gt;|Manages| F[Azure Resources]\n\n    G[Sealed Secrets Controller] --&gt;|Decrypts| C\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#key-components","title":"Key Components","text":"<ol> <li>Provider: The Crossplane Azure provider package</li> <li>Sealed Secret: Encrypted credentials safe for Git storage</li> <li>ProviderConfig: Configuration telling Crossplane how to authenticate</li> <li>ArgoCD Applications: GitOps deployment automation</li> </ol>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#security-benefits","title":"Security Benefits","text":"<ul> <li>\u2705 No plain-text secrets in Git repository</li> <li>\u2705 Encrypted credentials that only cluster can decrypt</li> <li>\u2705 Least privilege service principal with only required permissions</li> <li>\u2705 GitOps security - all changes tracked and auditable</li> </ul>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#learning-outcomes","title":"Learning Outcomes","text":"<p>After completing this module, you should understand:</p> <ul> <li>\u2705 How to install Crossplane providers using GitOps</li> <li>\u2705 How to securely store cloud credentials using Sealed Secrets</li> <li>\u2705 The relationship between Provider, ProviderConfig, and credentials</li> <li>\u2705 How to verify provider installation and troubleshoot issues</li> <li>\u2705 GitOps workflows for infrastructure component deployment</li> </ul>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#next-steps","title":"Next Steps","text":"<p>Your Azure provider is now configured and ready to create resources! In the next module, we'll use it to provision your first Azure resource.</p> <p>\u27a1\ufe0f Module 2: Your First Managed Resource</p>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#quick-reference","title":"Quick Reference","text":""},{"location":"crossplane-fundamentals/01-azure-provider-setup/#useful-commands","title":"Useful Commands","text":"<pre><code># Check all Crossplane resources\nkubectl get crossplane\n\n# View provider status\nkubectl get providers\n\n# Check provider configs\nkubectl get providerconfigs\n\n# View crossplane logs\nkubectl logs -n crossplane-system deployment/crossplane -f\n\n# List provider CRDs\nkubectl get crd | grep azure\n</code></pre>"},{"location":"crossplane-fundamentals/01-azure-provider-setup/#file-structure-created","title":"File Structure Created","text":"<pre><code>platform-core/\n\u251c\u2500\u2500 providers/\n\u2502   \u2514\u2500\u2500 azure-provider.yaml\n\u251c\u2500\u2500 provider-configs/\n\u2502   \u251c\u2500\u2500 azure-provider-config.yaml\n\u2502   \u2514\u2500\u2500 azure-credentials-sealed-secret.yaml\n\u2514\u2500\u2500 applications/\n    \u2514\u2500\u2500 azure-provider.yaml\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/","title":"Module 2: Your First Managed Resource","text":"<p>Time: 15 minutes Objective: Deploy a real Azure Resource Group using Crossplane and GitOps workflows</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#overview","title":"Overview","text":"<p>Now that the Azure provider is configured, let's create our first cloud resource! We'll deploy an Azure Resource Group, which is a fundamental building block for organizing Azure resources.</p> <p>What you'll experience: 1. Create a Managed Resource manifest 2. Set up GitOps deployment 3. Watch Crossplane create real Azure infrastructure 4. Verify the resource in Azure Portal</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#prerequisites-check","title":"Prerequisites Check","text":"<p>Ensure the previous module completed successfully:</p> <pre><code># Verify provider is ready\nkubectl get provider provider-family-azure\n# Should show INSTALLED: True, HEALTHY: True\n\n# Verify provider config exists\nkubectl get providerconfig default\n# Should show READY: True\n\n# Verify Azure provider pods are running\nkubectl get pods -n crossplane-system | grep azure\n# Should show Running pod\n</code></pre> <p>If any of these fail, return to Module 1 and complete the setup.</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-1-understanding-managed-resources","title":"Step 1: Understanding Managed Resources","text":"<p>Managed Resources (MRs) are Crossplane's representation of cloud infrastructure resources. Each MR corresponds to exactly one cloud resource (1:1 relationship).</p> <p>Key characteristics: - Declarative: Describe desired state, Crossplane handles the implementation - Cloud-agnostic API: Same patterns work across AWS, Azure, GCP - Kubernetes native: Use <code>kubectl</code> and GitOps workflows - Lifecycle managed: Crossplane handles creation, updates, and deletion</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-2-create-directory-structure","title":"Step 2: Create Directory Structure","text":"<p>Let's organize our resource deployment:</p> <pre><code># Create directory for Azure resources\nmkdir -p platform-core/azure/01-resource-group\n\n# Verify structure\ntree platform-core/azure/\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-3-define-your-first-managed-resource","title":"Step 3: Define Your First Managed Resource","text":"<p>Create an Azure Resource Group using Crossplane:</p> <pre><code># platform-core/azure/01-resource-group/resource-group.yaml\napiVersion: azure.upbound.io/v1beta1\nkind: ResourceGroup\nmetadata:\n  name: tutorial-rg-001\n  namespace: tutorial\n  labels:\n    app: crossplane-tutorial\n    component: resource-group\n    environment: tutorial\nspec:\n  forProvider:\n    location: East US\n    tags:\n      environment: tutorial\n      managed-by: crossplane\n      purpose: learning\n      created-by: crossplane-tutorial\n  providerConfigRef:\n    name: default\n</code></pre> <p>Key components explained:</p> <ul> <li><code>apiVersion</code>: Azure provider's API for Resource Groups</li> <li><code>kind: ResourceGroup</code>: The specific Azure resource type</li> <li><code>metadata.name</code>: Kubernetes resource name (must be unique in namespace)</li> <li><code>spec.forProvider</code>: Azure-specific configuration</li> <li><code>location</code>: Azure region for the resource</li> <li><code>tags</code>: Metadata for resource organization and billing</li> <li><code>providerConfigRef</code>: Which provider config to use (we created \"default\")</li> </ul>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-4-create-argocd-application","title":"Step 4: Create ArgoCD Application","text":"<p>Set up GitOps deployment for the resource:</p> <pre><code># platform-core/azure/01-resource-group/application.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: azure-resource-group-tutorial\n  namespace: argocd\n  labels:\n    app: crossplane-tutorial\n    component: azure-resources\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: __YOUR_PLATFORM_GITOPS_REPO_URL__\n    targetRevision: HEAD\n    path: platform-core/azure/01-resource-group\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: tutorial  # v2.0: Match namespace where resources are created\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - ApplyOutOfSyncOnly=true\n  info:\n    - name: 'Purpose'\n      value: 'Deploy tutorial Azure Resource Group via Crossplane'\n    - name: 'Resource Type'\n      value: 'Azure Resource Group'\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-5-update-repository-url","title":"Step 5: Update Repository URL","text":"<p>Replace the placeholder with your repository URL:</p> <pre><code># Replace placeholder (adjust path if your repo URL env var has different name)\nsed -i \"s|__YOUR_PLATFORM_GITOPS_REPO_URL__|$PLATFORM_GITOPS_REPO_URL|g\" platform-core/azure/01-resource-group/application.yaml\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-6-commit-and-deploy","title":"Step 6: Commit and Deploy","text":"<p>Let's commit our changes and trigger the GitOps deployment:</p> <pre><code># Add the new files\ngit add platform-core/azure/\n\n# Commit with descriptive message\ngit commit -m \"feat: add first managed resource - Azure Resource Group\n\n- Create Azure Resource Group in East US region\n- Deploy via ArgoCD with automated sync\n- Include proper labeling and tagging\n- Demonstrate Crossplane managed resource lifecycle\"\n\n# Push to trigger deployment\ngit push\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-7-deploy-the-argocd-application","title":"Step 7: Deploy the ArgoCD Application","text":"<p>Apply the ArgoCD application to start managing the resource:</p> <pre><code># Deploy the ArgoCD application\nkubectl apply -f platform-core/azure/01-resource-group/application.yaml\n\n# Verify application was created\nkubectl get application azure-resource-group-tutorial -n argocd\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-8-watch-the-magic-happen","title":"Step 8: Watch the Magic Happen! \ud83c\udf89","text":"<p>Now let's watch Crossplane create real Azure infrastructure:</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#81-monitor-argocd-sync","title":"8.1 Monitor ArgoCD Sync","text":"<pre><code># Watch ArgoCD sync the resource\nkubectl get application azure-resource-group-tutorial -n argocd -w\n\n# Or check sync status\nargocd app get azure-resource-group-tutorial\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#82-monitor-resource-creation","title":"8.2 Monitor Resource Creation","text":"<pre><code># Watch resource creation\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -w\n\n# Check resource status\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o yaml\n</code></pre> <p>Expected progression: 1. Initial state: Resource appears with <code>READY: False</code> 2. Creating: Crossplane calls Azure API to create resource 3. Created: <code>READY: True</code>, <code>SYNCED: True</code> - success! \ud83c\udf89</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#83-monitor-provider-logs","title":"8.3 Monitor Provider Logs","text":"<pre><code># Watch provider logs to see Azure API calls\nkubectl logs -n crossplane-system deployment/upbound-provider-azure -f\n</code></pre> <p>You'll see logs like: <pre><code>Successfully created resource group: tutorial-rg-001\nResource sync completed successfully\n</code></pre></p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-9-verify-in-azure-portal","title":"Step 9: Verify in Azure Portal","text":"<p>Let's confirm the resource was created in Azure:</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#91-using-azure-cli","title":"9.1 Using Azure CLI","text":"<pre><code># List resource groups to find ours\naz group list --query \"[?contains(name, 'tutorial-rg-001')]\" --output table\n\n# Get detailed information\naz group show --name tutorial-rg-001 --output table\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#92-using-azure-portal","title":"9.2 Using Azure Portal","text":"<ol> <li>Open Azure Portal</li> <li>Navigate to \"Resource Groups\"</li> <li>Look for <code>tutorial-rg-001</code></li> <li>Verify location is \"East US\"</li> <li>Check tags match what we specified</li> </ol>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-10-explore-resource-status","title":"Step 10: Explore Resource Status","text":"<p>Let's examine what Crossplane provides for resource management:</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#101-resource-status-fields","title":"10.1 Resource Status Fields","text":"<pre><code># Get full resource status\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o yaml\n</code></pre> <p>Key status fields: - <code>conditions</code>: Health and sync status - <code>atProvider</code>: Actual state from Azure - <code>observedGeneration</code>: Last processed spec version</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#102-resource-events","title":"10.2 Resource Events","text":"<pre><code># Check Kubernetes events for the resource\nkubectl describe resourcegroup tutorial-rg-001 -n tutorial | grep -A 10 Events\n\n# Or get events directly\nkubectl get events -n tutorial --field-selector involvedObject.name=tutorial-rg-001\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#103-resource-conditions","title":"10.3 Resource Conditions","text":"<pre><code># Check resource conditions\nkubectl get resourcegroup tutorial-rg-001 -n crossplane-system -o jsonpath='{.status.conditions}' | jq '.'\n</code></pre> <p>Healthy resource should show: - <code>Ready: True</code> - <code>Synced: True</code> - <code>LastSyncTime</code>: Recent timestamp</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#understanding-what-happened","title":"Understanding What Happened","text":""},{"location":"crossplane-fundamentals/02-first-managed-resource/#the-gitops-flow","title":"The GitOps Flow","text":"<pre><code>sequenceDiagram\n    participant Dev as Developer\n    participant Git as Git Repo\n    participant ArgoCD as ArgoCD\n    participant Crossplane as Crossplane\n    participant Azure as Azure API\n\n    Dev-&gt;&gt;Git: 1. Commit ResourceGroup YAML\n    ArgoCD-&gt;&gt;Git: 2. Detect changes\n    ArgoCD-&gt;&gt;Crossplane: 3. Apply ResourceGroup\n    Crossplane-&gt;&gt;Azure: 4. Create Resource Group\n    Azure-&gt;&gt;Crossplane: 5. Confirm creation\n    Crossplane-&gt;&gt;ArgoCD: 6. Update status\n    ArgoCD-&gt;&gt;Dev: 7. Sync complete\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#crossplane-resource-lifecycle","title":"Crossplane Resource Lifecycle","text":"<ol> <li>Creation: Crossplane detects new resource, calls Azure API</li> <li>Monitoring: Continuously polls Azure for status changes</li> <li>Updates: If spec changes, Crossplane updates Azure resource</li> <li>Deletion: If resource deleted from Git, Crossplane removes from Azure</li> </ol>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#experiment-time","title":"Experiment Time! \ud83e\uddea","text":"<p>Let's make a change to see the reconciliation in action:</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#modify-resource-tags","title":"Modify Resource Tags","text":"<pre><code># Edit the resource group file\nvim platform-core/azure/01-resource-group/resource-group.yaml\n</code></pre> <p>Add a new tag to the <code>spec.forProvider.tags</code> section: <pre><code>spec:\n  forProvider:\n    tags:\n      environment: tutorial\n      managed-by: crossplane\n      purpose: learning\n      created-by: crossplane-tutorial\n      modified-at: \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"  # Add this line\n</code></pre></p> <pre><code># Commit the change\ngit add platform-core/azure/01-resource-group/resource-group.yaml\ngit commit -m \"feat: add timestamp tag to resource group\"\ngit push\n\n# Watch Crossplane update the Azure resource\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -w\n</code></pre> <p>Verify in Azure: <pre><code># Check updated tags\naz group show --name tutorial-rg-001 --query tags\n</code></pre></p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"crossplane-fundamentals/02-first-managed-resource/#resource-stuck-in-creating-state","title":"Resource Stuck in Creating State","text":"<pre><code># Check resource events\nkubectl describe resourcegroup tutorial-rg-001 -n tutorial\n\n# Check provider logs\nkubectl logs -n crossplane-system deployment/upbound-provider-azure --tail=50\n\n# Verify provider config\nkubectl describe providerconfig default\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#argocd-sync-issues","title":"ArgoCD Sync Issues","text":"<pre><code># Check application status\nargocd app get azure-resource-group-tutorial\n\n# Force sync if needed\nargocd app sync azure-resource-group-tutorial\n\n# Check for sync errors\nkubectl describe application azure-resource-group-tutorial -n argocd\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#permission-issues","title":"Permission Issues","text":"<pre><code># Verify service principal has correct permissions\naz role assignment list --assignee $CLIENT_ID --output table\n\n# Check if subscription is correct\nkubectl get secret azure-secret -n crossplane-system -o jsonpath='{.data.creds}' | base64 -d | jq '.subscriptionId'\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#learning-outcomes","title":"Learning Outcomes","text":"<p>After completing this module, you should understand:</p> <ul> <li>\u2705 Managed Resources represent cloud resources in Crossplane</li> <li>\u2705 GitOps workflow for infrastructure deployment</li> <li>\u2705 Resource lifecycle - creation, monitoring, updates, deletion</li> <li>\u2705 Status monitoring and troubleshooting techniques</li> <li>\u2705 Real-world impact - Git commits create cloud infrastructure!</li> </ul>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#key-concepts-reinforced","title":"Key Concepts Reinforced","text":""},{"location":"crossplane-fundamentals/02-first-managed-resource/#declarative-infrastructure","title":"Declarative Infrastructure","text":"<ul> <li>You declared \"I want a Resource Group with these properties\"</li> <li>Crossplane handled all the implementation details</li> <li>Changes to declaration trigger automatic reconciliation</li> </ul>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#gitops-benefits","title":"GitOps Benefits","text":"<ul> <li>Version control: All changes tracked in Git</li> <li>Audit trail: Who changed what and when</li> <li>Rollback capability: Git revert undoes infrastructure changes</li> <li>Collaboration: Team can review infrastructure changes via PRs</li> </ul>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#security-integration","title":"Security Integration","text":"<ul> <li>Credentials remain encrypted in Git</li> <li>Only authorized clusters can decrypt and use credentials</li> <li>All API calls use least-privilege service principal</li> </ul>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've successfully created your first cloud resource using Crossplane and GitOps. You now have real Azure infrastructure managed by Git commits.</p> <p>In the next module, we'll explore what happened under the hood and learn more about Crossplane's architecture and troubleshooting techniques.</p> <p>\u27a1\ufe0f Module 3: Understanding What Happened</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#quick-reference","title":"Quick Reference","text":""},{"location":"crossplane-fundamentals/02-first-managed-resource/#resource-status-commands","title":"Resource Status Commands","text":"<pre><code># Quick status check\nkubectl get resourcegroups -n azure-resource-group\n\n# Detailed resource info\nkubectl describe resourcegroup tutorial-rg-001 -n azure-resource-group\n\n# Watch resource changes\nkubectl get resourcegroup tutorial-rg-001 -n azure-resource-group -w\n\n# Get resource YAML\nkubectl get resourcegroup tutorial-rg-001 -n azure-resource-group -o yaml\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#step-5-complete-verification-guide","title":"Step 5: Complete Verification Guide","text":""},{"location":"crossplane-fundamentals/02-first-managed-resource/#kubernetes-verification-commands","title":"Kubernetes Verification Commands","text":"<pre><code># Check if resource is created and ready\nkubectl get resourcegroup tutorial-rg-001 -n azure-resource-group\n# Expected: STATUS should be \"Ready\" after 2-3 minutes\n\n# View detailed status and conditions\nkubectl describe resourcegroup tutorial-rg-001 -n azure-resource-group\n# Look for: Status conditions showing \"Ready: True\"\n\n# Watch resource creation progress  \nkubectl get resourcegroup tutorial-rg-001 -n azure-resource-group -w\n# Watch until STATUS changes from \"Creating\" to \"Ready\"\n\n# Get complete resource YAML with Azure details\nkubectl get resourcegroup tutorial-rg-001 -n azure-resource-group -o yaml\n# Contains Azure resource ID and connection details\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#azure-cli-verification-commands","title":"Azure CLI Verification Commands","text":"<pre><code># List all resource groups to confirm creation\naz group list --output table\n# Look for: tutorial-rg-001 in East US region\n\n# Show specific resource group details\naz group show --name tutorial-rg-001 --output table\n# Expected: State should be \"Succeeded\"\n\n# Verify all tags were applied correctly\naz group show --name tutorial-rg-001 --query tags\n# Expected: Should show environment, managed-by, purpose, created-by tags\n\n# Confirm resource group location\naz group show --name tutorial-rg-001 --query location\n# Expected: \"eastus\"\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#argocd-verification","title":"ArgoCD Verification","text":"<pre><code># Check application sync status\nkubectl get application azure-resource-group-tutorial -n argocd\n# Expected: SYNC STATUS: \"Synced\", HEALTH STATUS: \"Healthy\"\n\n# Get detailed application status\nargocd app get azure-resource-group-tutorial\n# Shows complete dependency tree and sync history\n</code></pre>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#expected-results-summary","title":"Expected Results Summary","text":"<p>\u2705 Successful deployment indicators: - kubectl shows ResourceGroup with STATUS: \"Ready\" - ArgoCD shows application as \"Synced\" and \"Healthy\" - Azure CLI shows resource group in \"Succeeded\" state - All tags are present and correct in Azure - Location matches specification (East US)</p> <p>\ud83d\udd27 Troubleshooting common issues: - STATUS shows \"Creating\" for &gt;5 minutes \u2192 Check Azure service principal permissions - STATUS shows \"Failed\" \u2192 Check Azure quotas and subscription limits - ArgoCD shows \"OutOfSync\" \u2192 Resource may have been modified outside Crossplane - Resource not visible in Azure \u2192 Check subscription context with <code>az account show</code></p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#cleanup-resources","title":"Cleanup Resources","text":"<p>To remove the resources created in this exercise:</p> <pre><code># Delete the managed resource by removing the configuration file\nrm platform-core/azure/01-resource-group/resource-group.yaml\ngit add -A\ngit commit -m \"cleanup: remove tutorial resource group\"\ngit push\n\n# Verify deletion in Azure (after ArgoCD sync)\naz group show --name tutorial-rg-001\n# Expected: ResourceGroupNotFound error after GitOps cleanup\n</code></pre> <p>Cost Note: Resource Groups themselves don't incur charges, but always clean up resources to develop good habits for more expensive resources like databases and compute instances.</p>"},{"location":"crossplane-fundamentals/02-first-managed-resource/#files-created","title":"Files Created","text":"<pre><code>platform-core/azure/01-resource-group/\n\u251c\u2500\u2500 resource-group.yaml    # The Azure Resource Group definition\n\u2514\u2500\u2500 application.yaml       # ArgoCD application for GitOps deployment\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/","title":"Module 3: Understanding What Happened","text":"<p>Time: 15 minutes Objective: Explore Crossplane architecture, resource lifecycle, and troubleshooting techniques</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#overview","title":"Overview","text":"<p>You've successfully created Azure infrastructure using Git commits and Crossplane v2.0! Now let's dive deep into what happened behind the scenes, focusing on the new v2.0 architecture patterns.</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#key-v20-architecture-changes","title":"Key v2.0 Architecture Changes","text":"<p>Before exploring troubleshooting, let's understand what makes Crossplane v2.0 different:</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#namespaced-resources","title":"Namespaced Resources","text":"<ul> <li>User resources (like your ResourceGroup) live in namespaces like <code>tutorial</code></li> <li>System components (like providers) stay in <code>crossplane-system</code> </li> <li>Better isolation and RBAC control through namespace boundaries</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#simplified-resource-model","title":"Simplified Resource Model","text":"<ul> <li>No Claims needed - you create managed resources directly in namespaces</li> <li>Cleaner separation between user resources and system components</li> <li>Direct resource management without intermediate claim objects</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#what-well-explore","title":"What We'll Explore","text":"<ol> <li>Crossplane Architecture - Components and their roles</li> <li>Resource Reconciliation - How Crossplane manages state</li> <li>Status and Conditions - Understanding resource health</li> <li>Troubleshooting Techniques - Debugging common issues</li> <li>Best Practices - Production-ready patterns</li> </ol>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#crossplane-architecture-deep-dive","title":"Crossplane Architecture Deep Dive","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    subgraph \"Kubernetes Cluster\"\n        CP[Crossplane Core]\n        PR[Provider Runtime]\n        AP[Azure Provider Pod]\n\n        subgraph \"Resources\"\n            XR[Composite Resources]\n            MR[Managed Resources]\n            PC[Provider Configs]\n        end\n    end\n\n    subgraph \"External\"\n        Azure[Azure API]\n        Git[Git Repository]\n        ArgoCD[ArgoCD]\n    end\n\n    Git --&gt; ArgoCD\n    ArgoCD --&gt; MR\n    ArgoCD --&gt; PC\n    CP --&gt; PR\n    PR --&gt; AP\n    AP --&gt; Azure\n    MR --&gt; AP\n    PC --&gt; AP\n    XR --&gt; MR\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#component-roles","title":"Component Roles","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#crossplane-core","title":"Crossplane Core","text":"<ul> <li>Purpose: Orchestrates the entire system</li> <li>Responsibilities: </li> <li>Manages provider lifecycle</li> <li>Handles composite resource logic</li> <li>Coordinates between components</li> <li>Location: <code>crossplane-system</code> namespace</li> </ul> <pre><code># View Crossplane core\nkubectl get deployment crossplane -n crossplane-system\nkubectl logs deployment/crossplane -n crossplane-system --tail=20\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#provider-runtime","title":"Provider Runtime","text":"<ul> <li>Purpose: Generic controller framework</li> <li>Responsibilities:</li> <li>Resource reconciliation loops</li> <li>API client management</li> <li>Error handling and retries</li> <li>Shared: Used by all providers</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#azure-provider-pod","title":"Azure Provider Pod","text":"<ul> <li>Purpose: Azure-specific resource management</li> <li>Responsibilities:</li> <li>Azure API authentication</li> <li>Resource CRUD operations</li> <li>Status reporting back to Kubernetes</li> <li>Location: Runs as deployment in <code>crossplane-system</code></li> </ul> <pre><code># View Azure provider\nkubectl get pods -n crossplane-system | grep azure\nkubectl logs deployment/upbound-provider-azure -n crossplane-system --tail=20\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#resource-reconciliation-explained","title":"Resource Reconciliation Explained","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#the-control-loop","title":"The Control Loop","text":"<p>Crossplane uses Kubernetes' controller pattern with continuous reconciliation:</p> <pre><code>graph LR\n    A[Desired State&lt;br/&gt;YAML in Git] --&gt; B[Current State&lt;br/&gt;Kubernetes API]\n    B --&gt; C[Actual State&lt;br/&gt;Azure API]\n    C --&gt; D[Reconcile&lt;br/&gt;Make Changes]\n    D --&gt; B\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#reconciliation-process","title":"Reconciliation Process","text":"<p>Let's trace what happened when you created the Resource Group:</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#1-initial-detection","title":"1. Initial Detection","text":"<pre><code># ArgoCD detected changes in Git\nkubectl logs deployment/argocd-application-controller -n argocd | grep tutorial-rg-001\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#2-resource-creation","title":"2. Resource Creation","text":"<pre><code># Check when resource was first created\n# Check when resource was created\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o jsonpath='{.metadata.creationTimestamp}'\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#3-provider-processing","title":"3. Provider Processing","text":"<pre><code># View provider logs for our resource\nkubectl logs deployment/upbound-provider-azure -n crossplane-system | grep tutorial-rg-001\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#4-azure-api-calls","title":"4. Azure API Calls","text":"<p>The provider made these API calls to Azure: 1. Authentication: Used service principal credentials 2. Create: Called Azure Resource Manager API 3. Polling: Checked creation status 4. Success: Updated Kubernetes with final state</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#understanding-resource-status","title":"Understanding Resource Status","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#status-fields-deep-dive","title":"Status Fields Deep Dive","text":"<p>Let's examine your Resource Group's status:</p> <pre><code># Get full status information\n# Check resource status\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o jsonpath='{.status}' | jq '.'\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#key-status-components","title":"Key Status Components","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#conditions","title":"Conditions","text":"<pre><code># Check resource conditions\n# Check conditions (health status)\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o jsonpath='{.status.conditions}' | jq '.'\n</code></pre> <p>Standard conditions: - <code>Ready</code>: Resource is fully provisioned and healthy - <code>Synced</code>: Kubernetes state matches Azure state - <code>LastSyncTime</code>: When last reconciliation occurred</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#atprovider","title":"AtProvider","text":"<pre><code># Check actual Azure state\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o jsonpath='{.status.atProvider}' | jq '.'\n</code></pre> <p>Contains: - Azure resource ID - Current tags - Actual location - Provisioning state</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#observedgeneration","title":"ObservedGeneration","text":"<pre><code># Check generation tracking\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o jsonpath='{.status.observedGeneration}'\nkubectl get resourcegroup tutorial-rg-001 -n tutorial -o jsonpath='{.metadata.generation}'\n</code></pre> <p>Purpose: Tracks if status reflects latest spec changes</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#hands-on-troubleshooting","title":"Hands-On Troubleshooting","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#scenario-1-unhealthy-resource","title":"Scenario 1: Unhealthy Resource","text":"<p>Let's intentionally create a problematic resource to practice troubleshooting:</p> <pre><code># Create a resource with invalid location\ncat &gt; /tmp/broken-rg.yaml &lt;&lt;EOF\napiVersion: azure.upbound.io/v1beta1\nkind: ResourceGroup\nmetadata:\n  name: broken-rg\n  namespace: tutorial  # v2.0: User resources in tutorial namespace\nspec:\n  forProvider:\n    location: \"Invalid-Region\"  # This will fail\n    tags:\n      purpose: troubleshooting-demo\nEOF\n\n# Apply the broken resource\nkubectl apply -f /tmp/broken-rg.yaml\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#troubleshooting-steps","title":"Troubleshooting Steps","text":"<ol> <li> <p>Check Resource Status <pre><code># Look at overall status\nkubectl get resourcegroup broken-rg -n tutorial\n\n# Check conditions for errors\nkubectl describe resourcegroup broken-rg -n tutorial\n</code></pre></p> </li> <li> <p>Examine Events <pre><code># Look for error events\nkubectl get events -n tutorial --field-selector involvedObject.name=broken-rg\n</code></pre></p> </li> <li> <p>Check Provider Logs <pre><code># Look for provider errors\nkubectl logs deployment/upbound-provider-azure -n crossplane-system | grep broken-rg\n</code></pre></p> </li> <li> <p>Fix the Issue <pre><code># Update with correct location\nkubectl patch resourcegroup broken-rg -n tutorial --type='merge' -p='{\"spec\":{\"forProvider\":{\"location\":\"East US\"}}}'\n\n# Watch it recover\nkubectl get resourcegroup broken-rg -n tutorial -w\n</code></pre></p> </li> <li> <p>Clean Up <pre><code># Remove test resource\nkubectl delete resourcegroup broken-rg -n tutorial\nrm /tmp/broken-rg.yaml\n</code></pre></p> </li> </ol>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#scenario-2-provider-authentication-issues","title":"Scenario 2: Provider Authentication Issues","text":"<p>Let's simulate and troubleshoot authentication problems:</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#check-current-authentication","title":"Check Current Authentication","text":"<pre><code># Verify ProviderConfig status\nkubectl describe providerconfig default\n\n# Check secret exists and has correct keys\nkubectl get secret azure-secret -n crossplane-system -o jsonpath='{.data}' | jq 'keys'\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#common-authentication-errors","title":"Common Authentication Errors","text":"<pre><code># Look for auth errors in provider logs\nkubectl logs deployment/upbound-provider-azure -n crossplane-system | grep -i \"auth\\|credential\\|permission\"\n</code></pre> <p>Typical issues: - Expired service principal secret - Insufficient RBAC permissions - Wrong subscription ID - Invalid tenant ID</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#best-practices-for-production","title":"Best Practices for Production","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#1-resource-naming","title":"1. Resource Naming","text":"<p>\u2705 Good naming pattern: <pre><code>metadata:\n  name: myapp-prod-eastus-rg-001\n  labels:\n    app: myapp\n    environment: prod\n    region: eastus\n    resource-type: resource-group\n</code></pre></p> <p>\u274c Poor naming: <pre><code>metadata:\n  name: rg1  # Too generic, no context\n</code></pre></p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#2-proper-labeling-and-tagging","title":"2. Proper Labeling and Tagging","text":"<p>\u2705 Comprehensive labeling: <pre><code>metadata:\n  labels:\n    app: myapp\n    component: infrastructure\n    environment: production\n    managed-by: crossplane\n    team: platform\nspec:\n  forProvider:\n    tags:\n      Environment: production\n      ManagedBy: crossplane\n      Team: platform-engineering\n      CostCenter: \"1234\"\n      Project: myapp\n</code></pre></p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#3-resource-organization","title":"3. Resource Organization","text":"<pre><code># Organize by environment and component\nplatform-core/\n\u251c\u2500\u2500 azure/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 networking/\n\u2502   \u2502   \u2514\u2500\u2500 compute/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u251c\u2500\u2500 networking/\n\u2502   \u2502   \u2514\u2500\u2500 compute/\n\u2502   \u2514\u2500\u2500 prod/\n\u2502       \u251c\u2500\u2500 networking/\n\u2502       \u2514\u2500\u2500 compute/\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#4-monitoring-and-alerting","title":"4. Monitoring and Alerting","text":"<pre><code># Set up monitoring for resource health\nkubectl get resourcegroups -n crossplane-system -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.status.conditions[?(@.type==\"Ready\")].status}{\"\\n\"}{end}'\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#advanced-debugging-techniques","title":"Advanced Debugging Techniques","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#1-resource-finalizers","title":"1. Resource Finalizers","text":"<p>Understanding how cleanup works:</p> <pre><code># Check finalizers on your resource\nkubectl get resourcegroup tutorial-rg-001 -n crossplane-system -o jsonpath='{.metadata.finalizers}'\n</code></pre> <p>Finalizers ensure proper cleanup order: - <code>finalizer.managedresource.crossplane.io</code></p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#2-provider-specific-debugging","title":"2. Provider-Specific Debugging","text":"<pre><code># Enable debug logging (if needed)\nkubectl set env deployment/upbound-provider-azure -n crossplane-system --list\n\n# Check provider configuration\nkubectl get provider upbound-provider-azure -o yaml | grep -A 10 status\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#3-resource-relationships","title":"3. Resource Relationships","text":"<pre><code># Find all resources managed by our ProviderConfig\nkubectl get managed -n crossplane-system | grep default\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#performance-and-scale-considerations","title":"Performance and Scale Considerations","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#resource-limits","title":"Resource Limits","text":"<pre><code># Check provider resource usage\nkubectl top pod -n crossplane-system | grep azure\n\n# View resource limits\nkubectl describe deployment upbound-provider-azure -n crossplane-system | grep -A 5 Limits\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#reconciliation-frequency","title":"Reconciliation Frequency","text":"<ul> <li>Default: Every 60 seconds for healthy resources</li> <li>Backoff: Exponential backoff for failed resources</li> <li>Immediate: On spec changes</li> </ul> <pre><code># Check reconciliation timing\nkubectl get resourcegroup tutorial-rg-001 -n crossplane-system -o jsonpath='{.status.conditions[?(@.type==\"Synced\")].lastTransitionTime}'\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#cleanup-and-resource-lifecycle","title":"Cleanup and Resource Lifecycle","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#understanding-deletion","title":"Understanding Deletion","text":"<p>When you delete a Crossplane resource:</p> <ol> <li>Finalizer prevents immediate deletion</li> <li>Provider receives deletion event</li> <li>Azure resource is deleted</li> <li>Finalizer is removed</li> <li>Kubernetes resource is deleted</li> </ol>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#safe-cleanup","title":"Safe Cleanup","text":"<pre><code># View deletion policy (if set)\nkubectl get resourcegroup tutorial-rg-001 -n crossplane-system -o jsonpath='{.spec.deletionPolicy}'\n\n# Safe deletion\nkubectl delete resourcegroup tutorial-rg-001 -n crossplane-system\n\n# Verify Azure resource is also deleted\naz group show --name tutorial-rg-001 --output table 2&gt;/dev/null || echo \"Resource Group successfully deleted from Azure\"\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#learning-outcomes","title":"Learning Outcomes","text":"<p>After completing this module, you should understand:</p> <ul> <li>\u2705 Crossplane Architecture - Core components and their roles</li> <li>\u2705 Reconciliation Loop - How Crossplane maintains desired state</li> <li>\u2705 Resource Status - Reading and interpreting resource health</li> <li>\u2705 Troubleshooting - Systematic approach to debugging issues</li> <li>\u2705 Best Practices - Production-ready patterns and conventions</li> <li>\u2705 Resource Lifecycle - Creation, updates, and deletion processes</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#key-insights","title":"Key Insights","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#the-power-of-declarative-infrastructure","title":"The Power of Declarative Infrastructure","text":"<ul> <li>Intent-based: You declare what you want, not how to achieve it</li> <li>Self-healing: System continuously works toward desired state</li> <li>Consistent: Same patterns work across all cloud providers</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#gitops-benefits-realized","title":"GitOps Benefits Realized","text":"<ul> <li>Audit trail: Every change tracked in version control</li> <li>Collaboration: Infrastructure changes via code review</li> <li>Rollback: Git revert = infrastructure rollback</li> <li>Automation: No manual cloud console clicking</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#production-readiness","title":"Production Readiness","text":"<ul> <li>Monitoring: Resource health visible via Kubernetes APIs</li> <li>Security: Credentials encrypted and rotated</li> <li>Scale: Handles thousands of resources efficiently</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#congratulations","title":"Congratulations! \ud83c\udf89","text":"<p>You've completed the Crossplane Fundamentals section! You now have:</p> <ul> <li>\u2705 Working knowledge of Crossplane v2 architecture</li> <li>\u2705 Hands-on experience creating Azure resources via GitOps</li> <li>\u2705 Troubleshooting skills for common issues</li> <li>\u2705 Foundation for building more complex infrastructure patterns</li> </ul>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#next-steps","title":"Next Steps","text":"<p>You're ready to move beyond individual resources to building reusable infrastructure patterns. The next section will introduce Compositions - Crossplane's powerful abstraction mechanism.</p> <p>\u27a1\ufe0f Advanced Patterns: Compositions</p>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#quick-reference","title":"Quick Reference","text":""},{"location":"crossplane-fundamentals/03-understanding-crossplane/#debugging-commands-cheatsheet","title":"Debugging Commands Cheatsheet","text":"<pre><code># Resource health check\nkubectl get &lt;resource-type&gt; &lt;name&gt; -n crossplane-system\n\n# Detailed resource information\nkubectl describe &lt;resource-type&gt; &lt;name&gt; -n crossplane-system\n\n# Provider logs\nkubectl logs deployment/upbound-provider-azure -n crossplane-system --tail=50\n\n# ArgoCD application status\nargocd app get &lt;app-name&gt;\n\n# Resource events\nkubectl get events -n crossplane-system --field-selector involvedObject.name=&lt;name&gt;\n\n# Provider health\nkubectl get providers\nkubectl describe provider upbound-provider-azure\n\n# ProviderConfig status\nkubectl get providerconfigs\nkubectl describe providerconfig default\n</code></pre>"},{"location":"crossplane-fundamentals/03-understanding-crossplane/#resource-status-fields","title":"Resource Status Fields","text":"<ul> <li><code>conditions[].type</code>: <code>Ready</code>, <code>Synced</code>, <code>Healthy</code></li> <li><code>conditions[].status</code>: <code>True</code>, <code>False</code>, <code>Unknown</code></li> <li><code>conditions[].reason</code>: Brief explanation</li> <li><code>atProvider</code>: Current state from cloud provider</li> <li><code>observedGeneration</code>: Last processed spec version</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the comprehensive GitOps and Crossplane tutorial! This section will guide you through setting up a complete Internal Developer Platform (IDP) using GitOps principles.</p>"},{"location":"getting-started/#what-youll-build","title":"What You'll Build","text":"<p>By the end of this section, you'll have: - \u2705 A reproducible development environment using DevBox - \u2705 A local Kubernetes cluster running on KinD - \u2705 ArgoCD managing your platform through GitOps - \u2705 Secure secret management with Sealed Secrets - \u2705 Foundation for Crossplane infrastructure automation</p>"},{"location":"getting-started/#repository-structure","title":"Repository Structure","text":"<p>This tutorial repository is organized as follows:</p> <pre><code>idp-tutorial/\n\u251c\u2500\u2500 docs/                    # Tutorial documentation (you're reading this)\n\u251c\u2500\u2500 exercises/               # Hands-on exercise files\n\u251c\u2500\u2500 gitops-bootstrap/        # Ready-to-use bootstrap configurations\n\u251c\u2500\u2500 platform-core/          # Pre-populated platform configurations\n\u2514\u2500\u2500 repository-templates/    # Templates for creating new repositories\n</code></pre> <ul> <li>docs/: Step-by-step tutorial content</li> <li>exercises/: Practice files organized by module</li> <li>gitops-bootstrap/: Production-ready GitOps configurations</li> <li>platform-core/: Platform components managed by ArgoCD</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have: - macOS or Linux (Windows with WSL2 also works) - Git installed and configured - GitHub account with Personal Access Token - Azure subscription (free tier is sufficient for most exercises) - 8GB+ RAM recommended for local cluster - 10GB+ free disk space</p>"},{"location":"getting-started/#prerequisites-validation","title":"Prerequisites Validation","text":"<p>Before starting, validate your environment:</p>"},{"location":"getting-started/#1-git-configuration","title":"1. Git Configuration","text":"<pre><code>git --version\n# Expected: git version 2.40.0 or later\n\ngit config --global user.name\ngit config --global user.email\n# Expected: Your name and email configured\n</code></pre>"},{"location":"getting-started/#2-github-access","title":"2. GitHub Access","text":"<pre><code>gh auth status\n# Expected: \u2713 Logged in to github.com as &lt;username&gt;\n</code></pre>"},{"location":"getting-started/#3-azure-cli","title":"3. Azure CLI","text":"<pre><code>az account show\n# Expected: JSON output showing your active subscription\n</code></pre>"},{"location":"getting-started/#learning-path-overview","title":"Learning Path Overview","text":""},{"location":"getting-started/#module-1-introduction-5-minutes","title":"Module 1: Introduction (5 minutes)","text":"<ul> <li>Understand the core components and architectural vision</li> <li>Learn about GitOps principles and IDP concepts</li> </ul>"},{"location":"getting-started/#module-2-devbox-setup-15-minutes","title":"Module 2: DevBox Setup (15 minutes)","text":"<ul> <li>Install DevBox for reproducible development environment</li> <li>Set up all required tools and dependencies</li> </ul>"},{"location":"getting-started/#module-3-local-cluster-setup-10-minutes","title":"Module 3: Local Cluster Setup (10 minutes)","text":"<ul> <li>Create a KinD cluster for local development</li> <li>Verify cluster connectivity and basic operations</li> </ul>"},{"location":"getting-started/#module-4-gitops-bootstrap-30-minutes","title":"Module 4: GitOps Bootstrap (30 minutes)","text":"<ul> <li>Deploy ArgoCD using GitOps principles</li> <li>Connect your platform repository</li> <li>Experience the \"magic\" of GitOps automation</li> </ul>"},{"location":"getting-started/#module-5-sealed-secrets-setup-20-minutes","title":"Module 5: Sealed Secrets Setup (20 minutes)","text":"<ul> <li>Add secure secret management capabilities</li> <li>Learn to encrypt secrets for safe Git storage</li> <li>Test the complete secret management workflow</li> </ul> <p>Total estimated time: 80 minutes</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Ready to begin? Start with understanding the foundational concepts and architectural vision.</p> <p>\u27a1\ufe0f Begin: Introduction to GitOps Workflow</p>"},{"location":"getting-started/01-introduction/","title":"01: Introduction to the GitOps Workflow","text":"<p>Welcome to the first module of the Crossplane GitOps tutorial. In this section, we will lay the foundation for everything that follows. We'll start with a high-level overview of the core technologies and the architectural philosophy behind this course.</p>"},{"location":"getting-started/01-introduction/#the-core-components","title":"The Core Components","text":"<p>Our platform is built on three key pillars:</p> <ol> <li> <p>Crossplane: The infrastructure-as-code engine. Crossplane extends Kubernetes with Custom Resource Definitions (CRDs) that allow us to model infrastructure from any cloud provider as native Kubernetes objects. Instead of writing HCL, Bicep, or CloudFormation, we write YAML.</p> </li> <li> <p>ArgoCD: The GitOps engine. ArgoCD continuously monitors a Git repository and applies the desired state (defined in YAML) to our Kubernetes cluster. This ensures that our cluster's state always matches what's in Git.</p> </li> <li> <p>DevBox: The environment management tool. DevBox ensures that every developer on the team has the exact same version of every tool, library, and dependency, providing a reproducible development environment that works consistently across different machines and CI/CD pipelines.</p> </li> </ol>"},{"location":"getting-started/01-introduction/#the-architectural-vision-a-true-idp","title":"The Architectural Vision: A True IDP","text":"<p>Our goal is not just to automate infrastructure provisioning. We are building an Internal Developer Platform (IDP). What does this mean?</p> <ul> <li>Self-Service for Developers: Developers can provision the infrastructure they need (e.g., a PostgreSQL database, a Redis cache, a Kubernetes cluster) by simply creating a YAML file and pushing it to Git. They don't need to be experts in Azure or GCP.</li> <li>Platform Team as Enablers: The platform team (that's us!) defines the \"blueprints\" for this infrastructure using Crossplane Compositions. We control the security, networking, and configuration details, ensuring that all provisioned resources adhere to company standards.</li> <li>Git as the Single Source of Truth: Every single piece of infrastructure, from a single S3 bucket to an entire Kubernetes cluster, is defined declaratively in a Git repository. This provides a complete audit trail and enables powerful automation.</li> </ul>"},{"location":"getting-started/01-introduction/#what-we-will-build","title":"What We Will Build","text":"<p>By the end of this tutorial, you will have a fully functional, multi-cloud IDP running on a local KinD cluster. You will be able to:</p> <ul> <li>Define a new type of \"product\" (e.g., a <code>CompositePostgresInstance</code>) that bundles together all the necessary cloud resources.</li> <li>Provision that product on Azure or GCP by creating a simple one-line YAML \"claim\".</li> <li>Automatically deploy applications to newly provisioned Kubernetes clusters.</li> <li>Monitor the health and status of your infrastructure using Prometheus and Grafana.</li> </ul> <p>This is a powerful paradigm shift for infrastructure management. Let's get started by setting up our development environment.</p> <p>\u27a1\ufe0f Next: Devbox Setup</p>"},{"location":"getting-started/02-devbox-setup/","title":"02: Devbox Setup","text":"<p>Reproducibility is critical for a stable GitOps workflow. We need to ensure that every engineer on the team, as well as our CI/CD pipelines, are using the exact same versions of our command-line tools. We will use DevBox to achieve this.</p>"},{"location":"getting-started/02-devbox-setup/#what-is-devbox","title":"What is Devbox?","text":"<p>Devbox provides a user-friendly, JSON-based interface for managing reproducible development environments. It simplifies the process of ensuring consistent tooling across your team and CI/CD pipelines.</p> <p>We have already defined the necessary tools in the <code>devbox.json</code> file at the root of this project. Take a moment to inspect it:</p> <pre><code>{\n  \"packages\": [\n    \"git@latest\",\n    \"kubectl@latest\",\n    \"gh@latest\", \n    \"uv@latest\",\n    \"kind@latest\",\n    \"kubeseal@latest\",\n    \"azure-cli@latest\"\n  ],\n  \"shell\": {\n    \"init_hook\": [\n      \"[ ! -d .venv ] &amp;&amp; uv venv\",\n      \"source .venv/bin/activate\",\n      \"export UV_LINK_MODE=copy\",\n      \"echo 'Welcome to the GitOps Tutorial Dev Environment!'\"\n    ],\n    \"scripts\": {\n      \"setup-tools\": [\n        \"mkdir -p ~/bin/\",\n        \"uv pip install -r pyproject.toml\",\n        \"[ ! -e ~/bin/crossplane ] &amp;&amp; curl -sL \\\"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\\\" | sh &gt; /dev/null\",\n        \"mv crossplane ~/bin/ &amp;&amp; chmod +x ~/bin/crossplane\",\n        \"[ ! -e ~/bin/argocd ] &amp;&amp; curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 &amp;&amp; mv argocd-linux-amd64 ~/bin/argocd &amp;&amp; chmod +x ~/bin/argocd\",\n        \"echo 'export PATH=~/bin:$PATH' &gt;&gt; ~/.profile\",\n        \"source ~/.profile\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Package Breakdown: - git@latest: Version control for GitOps workflows - kubectl@latest: Kubernetes command-line interface - gh@latest: GitHub CLI for repository management - uv@latest: Fast Python package installer and virtual environment manager - kind@latest: Kubernetes in Docker for local development - kubeseal@latest: CLI tool for encrypting secrets with Sealed Secrets - azure-cli@latest: Azure command-line interface for cloud resources</p> <p>Setup Script Explanation: The <code>setup-tools</code> script performs several important tasks:</p> <ol> <li>Creates local bin directory: <code>mkdir -p ~/bin/</code> - Safe location for user binaries</li> <li>Installs Python dependencies: <code>uv pip install -r pyproject.toml</code> - MkDocs and documentation tools</li> <li>Downloads Crossplane CLI: Latest stable version from official source</li> <li>Downloads ArgoCD CLI: Latest stable version for GitOps management  </li> <li>Updates PATH: Ensures tools are available in your shell session</li> </ol> <p>Note on Tool Versions: The Crossplane CLI (<code>crossplane</code>) and ArgoCD CLI (<code>argocd</code>) are installed via the <code>devbox run setup-tools</code> command. This ensures you always have the latest compatible versions, which is crucial for compatibility with Crossplane's rapid development cycle.</p> <p>As you can see, we have pinned the exact versions of <code>kubectl</code>, and all our other essential tools.</p>"},{"location":"getting-started/02-devbox-setup/#setup-instructions","title":"Setup Instructions","text":""},{"location":"getting-started/02-devbox-setup/#1-install-devbox","title":"1. Install Devbox","text":"<p>Next, install Devbox.</p> <pre><code># Install DevBox (works on macOS and Linux)\ncurl -fsSL https://get.jetpack.io/devbox | bash\n\n# For macOS with Homebrew (alternative)\n# brew install jetpack-io/tap/devbox\n\n# Verify installation\ndevbox version\n</code></pre>"},{"location":"getting-started/02-devbox-setup/#2-activate-the-devbox-shell","title":"2. Activate the Devbox Shell","text":"<p>Now, navigate to the root of the <code>idp-tutorial</code> directory and run:</p> <pre><code>devbox shell\n</code></pre> <p>This command will:</p> <ol> <li>Read the <code>devbox.json</code> file.</li> <li>Download and install the exact versions of all the packages listed.</li> <li>Activate a new shell session with all those tools available in your <code>PATH</code>.</li> </ol> <p>You are now in a fully reproducible development environment. Every command you run in this shell will use the tools defined in our project, not your globally installed versions.</p>"},{"location":"getting-started/02-devbox-setup/#3-install-project-tools","title":"3. Install Project Tools","text":"<p>Run the <code>setup-tools</code> script to install the Crossplane CLI and Python dependencies for MkDocs:</p> <pre><code>devbox run setup-tools\n</code></pre> <p>To verify, run:</p> <pre><code>kubectl version --client\n# Should output v1.29.2 or later\n\ncrossplane version --client\n# Should output v1.16.0 or later\n\nargocd version --client\n# Should output ArgoCD CLI version\n\nkubeseal --version\n# Should output 0.24.0 or later\n\naz version\n# Should output Azure CLI version information\n</code></pre>"},{"location":"getting-started/02-devbox-setup/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":"<p>Issue: Command not found after setup <pre><code># Solution: Ensure PATH is updated\necho 'export PATH=~/bin:$PATH' &gt;&gt; ~/.bashrc  # or ~/.zshrc\nsource ~/.bashrc  # or ~/.zshrc\n</code></pre></p> <p>Issue: Permission denied on downloaded binaries <pre><code># Solution: Make binaries executable\nchmod +x ~/bin/crossplane ~/bin/argocd\n</code></pre></p> <p>Issue: DevBox shell not activating Python environment <pre><code># Solution: Manually activate the virtual environment\nsource .venv/bin/activate\n</code></pre></p> <p>With our environment set up, we can now install the core components.</p> <p>\u27a1\ufe0f Next: Local Cluster Setup</p>"},{"location":"getting-started/03-local-cluster-setup/","title":"03: Local Cluster Setup","text":"<p>With our Devbox environment activated, we have all the necessary command-line tools. Now, we need to create the local Kubernetes cluster that will serve as the foundation for our platform.</p>"},{"location":"getting-started/03-local-cluster-setup/#1-create-the-local-kubernetes-cluster","title":"1. Create the Local Kubernetes Cluster","text":"<p>We have provided a <code>kind-cluster.yaml</code> file inside the <code>gitops-bootstrap/kind-cluster/</code> directory. Take a moment to inspect its contents:</p> <pre><code>kind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n</code></pre> <p>Now, from within your <code>devbox shell</code>, run:</p> <pre><code># Use the provided gitops-bootstrap configuration (recommended)\nkind create cluster --config gitops-bootstrap/kind-cluster/kind-cluster.yaml\n</code></pre> <p>Note: There's also an exercise file at <code>exercises/getting-started/cluster-setup/kind-cluster.yaml</code> with the same configuration for practice, but we recommend using the gitops-bootstrap version for consistency with the tutorial structure.</p> <p>This will take a few minutes to provision a new, single-node Kubernetes cluster. Once it's complete, your <code>kubectl</code> context will automatically be configured to point to the new <code>kind-idp-tutorial</code> cluster.</p> <p>Verify the cluster is running:</p> <pre><code>kubectl cluster-info\n</code></pre> <p>With our cluster running, we are ready to bootstrap our GitOps engine, ArgoCD.</p> <p>\u27a1\ufe0f Next: GitOps Bootstrap</p>"},{"location":"getting-started/04-gitops-bootstrap/","title":"04: GitOps Bootstrap with ArgoCD","text":"<p>Now that we have a blank Kubernetes cluster, we will kick off our entire platform using a single command. This is the essence of a true GitOps workflow.</p>"},{"location":"getting-started/04-gitops-bootstrap/#the-gitops-bootstrap-process","title":"The GitOps Bootstrap Process","text":"<p>We will apply a single file to our cluster: <code>gitops-bootstrap/argocd/install.yaml</code>. This manifest contains the Custom Resource Definitions for ArgoCD.</p> <p>Immediately after, we will apply our <code>platform-core.yaml</code>. This special <code>ApplicationSet</code> resource instructs ArgoCD to manage its own configuration and all other platform components from our Git repository.</p>"},{"location":"getting-started/04-gitops-bootstrap/#1-create-your-platform-gitops-repository","title":"1. Create Your Platform GitOps Repository","text":"<p>This tutorial provides the content for your \"Platform GitOps Repo\". You will create a new GitHub repository and push this content to it.</p>"},{"location":"getting-started/04-gitops-bootstrap/#11-prepare-your-environment","title":"1.1 Prepare your environment","text":"<p>First, set your GitHub username as an environment variable. This is used to authenticate with the repository when ArgoCD pulls the manifests.</p> <pre><code>export GITHUB_USERNAME=\"\" # Replace with your GitHub username\n</code></pre> <p>Next set a name for your Platform GitOps repository. This is the repository you just created.</p> <pre><code>export GITHUB_REPO_NAME=\"\" # Replace with your Platform GitOps repository name\n</code></pre> <p>Next, set the environment variable for your Platform GitOps repository URL:</p> <pre><code>export PLATFORM_GITOPS_REPO_URL=\"https://github.com/$GITHUB_USERNAME/$GITHUB_REPO_NAME.git\"\n</code></pre> <p>Validate the environment variables:</p> <pre><code>echo \"GITHUB_USERNAME: $GITHUB_USERNAME\"\necho \"GITHUB_REPO_NAME: $GITHUB_REPO_NAME\"\necho \"PLATFORM_GITOPS_REPO_URL: $PLATFORM_GITOPS_REPO_URL\"\n</code></pre> <p>If the output looks correct, you are ready to proceed.</p>"},{"location":"getting-started/04-gitops-bootstrap/#12-create-your-platform-gitops-repository","title":"1.2 Create your Platform GitOps Repository","text":"<p>Create your new Platform GitOps Repository using the tutorial repository as a template and clone it to your working directory. This gives you a clean copy of all the necessary files in your own repository.</p> <pre><code># Create new repository from the tutorial template and clone it\ngh repo create $GITHUB_USERNAME/$GITHUB_REPO_NAME --template icklers/idp-tutorial --public --clone\n\ncd $GITHUB_REPO_NAME\n</code></pre> <p>Your platform repository is now ready and contains all the necessary GitOps configurations.</p> <p>If you want to create a private repository, refer to the ArgoCD Documentation about Private Repositories in GitHub</p>"},{"location":"getting-started/04-gitops-bootstrap/#2-prepare-the-platform-coreyaml","title":"2. Prepare the <code>platform-core.yaml</code>","text":"<p>The <code>platform-core.yaml</code> manifest needs to point to your Platform GitOps repository. We will use a simple <code>sed</code> command to replace the placeholder with your repository URL.</p> <pre><code>sed -i \"s|__YOUR_PLATFORM_GITOPS_REPO_URL__|$PLATFORM_GITOPS_REPO_URL|g\" gitops-bootstrap/argocd/platform-core.yaml\n</code></pre> <p>Note on ApplicationSet Path: Ensure that the <code>path</code> in the <code>platform-core.yaml</code>'s Git generator is set to <code>platform-core</code> if your <code>crossplane.yaml</code> is directly within that directory in your Git repository. If you intend to have subdirectories within <code>platform-core</code> for different applications, then the path should be <code>platform-core/*</code>.</p>"},{"location":"getting-started/04-gitops-bootstrap/#3-apply-the-bootstrap-manifests","title":"3. Apply the Bootstrap Manifests","text":"<p>This is the only manual <code>kubectl apply</code> we will perform. First, we create the namespace for ArgoCD. Then, we apply the official installation manifest directly from the ArgoCD project's GitHub repository. This is the recommended way to ensure you are installing a stable and complete version of ArgoCD.</p> <p>Finally, we apply our <code>platform-core.yaml</code> to tell our new ArgoCD instance to start managing our platform from Git.</p> <pre><code># Validate cluster context\nkubectl config current-context\n</code></pre> <p>Valid output: <code>kind-kind</code></p> <pre><code># Create the namespace for ArgoCD\nkubectl create namespace argocd\n\n# Apply the official ArgoCD installation manifest\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Apply the Platform Core ApplicationSet to start the GitOps sync\nkubectl apply -f gitops-bootstrap/argocd/platform-core.yaml\n</code></pre>"},{"location":"getting-started/04-gitops-bootstrap/#validate-argocd-installation","title":"Validate ArgoCD Installation","text":"<pre><code>kubectl -n argocd get pods,ApplicationSet\n</code></pre> <p>Wait about 60-100 seconds and check the status with the command above. Once all pods are in the <code>Running</code> state and show \"1/1\" for the <code>READY</code> column, you can proceed to the next step.</p>"},{"location":"getting-started/04-gitops-bootstrap/#4-register-your-gitops-repository-with-argocd","title":"4. Register Your GitOps Repository with ArgoCD","text":"<p>ArgoCD needs to know about your GitOps repository to pull manifests from it. Before adding the repository, you need to log in to the ArgoCD server using the <code>argocd</code> CLI. You will use the admin password you retrieved earlier.</p> <p>Start a new shell and port-forward the ArgoCD server and keep the shell open:</p> <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre> <p>In the devbox terminal, retrieve the initial admin password for ArgoCD:</p> <pre><code>export ARGOCD_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d)\n</code></pre> <p>Then, log in to the ArgoCD server using the <code>argocd</code> CLI.:</p> <pre><code>argocd login localhost:8080 --username admin --password $ARGOCD_ADMIN_PASSWORD\n</code></pre> <p>You will see a warning about insecure connections:\"</p> <pre><code>WARNING: server certificate had error: tls: failed to verify certificate: x509: certificate signed by unknown authority. Proceed insecurely (y/n)?\n</code></pre> <p>This is expected since we are using port-forwarding and did not set up TLS. You can safely ignore this warning for local development.</p> <p>Once logged in, you will need a GitHub Personal Access Token (PAT) with <code>repo</code> scope to allow ArgoCD to access your repository.</p> <p>Follow the prompts in your browser to complete the authentication. Once authenticated, you can close the browser tab. The <code>gh</code> CLI will store the PAT securely. Use the <code>argocd repo add</code> command to register your repository. We will use the <code>gh auth token</code> command to securely retrieve your PAT.</p> <pre><code>argocd repo add $PLATFORM_GITOPS_REPO_URL --username $GITHUB_USERNAME --password $(gh auth token)\n</code></pre> <p>If you encounter an authentication error, create a new GitHub Personal Access Token (classic) with <code>repo</code> scope in your GitHub settings. Set an expiration date for the token, copy it, and use it like this:</p> <pre><code>export GITHUB_PAT=\"your-personal-access-token\"\nargocd repo add $PLATFORM_GITOPS_REPO_URL --username $GITHUB_USERNAME --password $GITHUB_PAT\n</code></pre> <p>Validate the repository is added successfully:</p> <pre><code>argocd repo list\n</code></pre>"},{"location":"getting-started/04-gitops-bootstrap/#5-observe-the-magic","title":"5. Observe the Magic","text":"<p>ArgoCD is now installing and configuring itself, Crossplane, and all the providers and compositions defined in your Git repository. To watch this happen, access the ArgoCD UI.</p> <p>Echo the admin password for convenience, to use it when logging into the ArgoCD WebUI:</p> <pre><code>echo \"ArgoCD Admin Password: $ARGOCD_ADMIN_PASSWORD\"\n</code></pre> <p>Log in to <code>https://localhost:8080</code> with username <code>admin</code> and the retrieved password. You will see the <code>platform-core</code> and all the other applications syncing automatically.</p>"},{"location":"getting-started/04-gitops-bootstrap/#congratulations","title":"Congratulations!","text":"<p>You have successfully bootstrapped a fully functional GitOps workflow. From this point forward, we will interact with our system exclusively through Git.</p>"},{"location":"getting-started/04-gitops-bootstrap/#next-steps","title":"Next Steps","text":"<p>Your GitOps foundation is now ready. Next, we'll add secure secret management capabilities that will be essential for managing cloud credentials and application secrets.</p> <p>\u27a1\ufe0f Next Section: Sealed Secrets Setup</p>"},{"location":"getting-started/05-sealed-secrets-setup/","title":"05: Secure Secret Management (Sealed Secrets)","text":"<p>Now that we have ArgoCD managing our platform, we need to add secure secret management capabilities. Sealed Secrets allows us to encrypt sensitive data and store it safely in Git repositories, following GitOps security best practices.</p>"},{"location":"getting-started/05-sealed-secrets-setup/#why-sealed-secrets","title":"Why Sealed Secrets?","text":"<p>Traditional Kubernetes secrets pose a security challenge in GitOps workflows: - Plain text secrets cannot be safely stored in Git repositories - Base64 encoding provides no real security - External secret stores add complexity for development environments</p> <p>Sealed Secrets solve this by providing: - \u2705 Encryption at source - Secrets are encrypted before being stored in Git. - \u2705 GitOps compatible - Encrypted secrets can be safely committed. - \u2705 Cluster-specific - Only the target cluster can decrypt the secrets. - \u2705 Developer friendly - Simple CLI tool for encrypting secrets.  </p>"},{"location":"getting-started/05-sealed-secrets-setup/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[Developer] --&gt;|1 - kubeseal| B[Encrypted SealedSecret]\n    B --&gt;|2 - git commit| C[Git Repository]\n    C --&gt;|3 - ArgoCD sync| D[Kubernetes Cluster]\n    D --&gt;|4 - Controller decrypts| E[Plain Secret]\n    E --&gt;|5 - Used by| F[Application Pods]\n\n    G[Sealed Secrets Controller] --&gt;|Manages| D\n    G --&gt;|Private Key| H[Cluster-specific Key]\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/05-sealed-secrets-setup/#1-install-sealed-secrets-controller","title":"1. Install Sealed Secrets Controller","text":"<p>We'll install the Sealed Secrets controller using GitOps principles through ArgoCD.</p>"},{"location":"getting-started/05-sealed-secrets-setup/#11-create-sealed-secrets-application-manifest","title":"1.1 Create Sealed Secrets Application Manifest","text":"<p>Create the ArgoCD application in <code>platform-core/sealed-secrets-controller.yaml</code> to install Sealed Secrets:</p> <pre><code># platform-core/sealed-secrets-controller.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: sealed-secrets-controller\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: https://bitnami-labs.github.io/sealed-secrets\n    targetRevision: 2.17.3\n    chart: sealed-secrets\n    helm:\n      values: |\n        fullnameOverride: sealed-secrets-controller\n        resources:\n          limits:\n            cpu: 200m\n            memory: 256Mi\n          requests:\n            cpu: 100m\n            memory: 128Mi\n        metrics:\n          serviceMonitor:\n            enabled: false\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: sealed-secrets\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n    - CreateNamespace=true\n    - RespectIgnoreDifferences=true\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#12-commit-and-sync-the-repository","title":"1.2 Commit and Sync the repository","text":"<pre><code>git add platform-core/sealed-secrets-controller.yaml\ngit commit -m \"Add Sealed Secrets Controller\"\ngh repo sync\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#13-watch-the-deployment","title":"1.3 Watch the deployment","text":"<pre><code>kubectl get applications -n argocd sealed-secrets-controller\nkubectl get pods -n sealed-secrets -l app.kubernetes.io/name=sealed-secrets-controller\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#2-install-kubeseal-cli-tool","title":"2. Install kubeseal CLI Tool","text":"<p>The <code>kubeseal</code> CLI tool is used to encrypt secrets locally before committing them to Git.</p>"},{"location":"getting-started/05-sealed-secrets-setup/#21-install-via-devbox-recommended","title":"2.1 Install via DevBox (Recommended)","text":"<p>Kubeseal is already included in your DevBox environment (see: <code>devbox.json</code>).</p> <p>Verify installation:</p> <pre><code>kubeseal --version\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#22-alternative-installation-methods","title":"2.2 Alternative Installation Methods","text":"<p>macOS (Homebrew): <pre><code>brew install kubeseal\n</code></pre></p> <p>Linux (Binary Download): <pre><code># Download the latest release\nKUBESEAL_VERSION='0.24.0'\nwget \"https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION}/kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz\"\ntar -xvzf kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz kubeseal\nsudo install -m 755 kubeseal /usr/local/bin/kubeseal\n</code></pre></p>"},{"location":"getting-started/05-sealed-secrets-setup/#3-verify-installation","title":"3. Verify Installation","text":""},{"location":"getting-started/05-sealed-secrets-setup/#31-check-controller-status","title":"3.1 Check Controller Status","text":"<pre><code># Verify the sealed secrets controller is running\nkubectl get pods -n sealed-secrets -l app.kubernetes.io/name=sealed-secrets\n\n# Check the controller logs\nkubectl logs -n sealed-secrets -l app.kubernetes.io/name=sealed-secrets\n\n# Verify the CRD is installed\nkubectl get crd sealedsecrets.bitnami.com\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#32-test-cli-connectivity","title":"3.2 Test CLI Connectivity","text":"<pre><code># Test kubeseal CLI can communicate with the controller\nkubeseal --fetch-cert --controller-namespace=sealed-secrets --controller-name=sealed-secrets-controller &gt; public-cert.pem\n\n# Verify the certificate was retrieved\ncat public-cert.pem\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#your-first-sealed-secret","title":"Your First Sealed Secret","text":"<p>Let's create a test sealed secret to verify everything is working.</p>"},{"location":"getting-started/05-sealed-secrets-setup/#1-create-a-regular-secret-temporarily","title":"1. Create a Regular Secret (Temporarily)","text":"<pre><code># Create a test secret (don't commit this!)\ncat &gt; test-secret.yaml &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secret\n  namespace: default\ntype: Opaque\nstringData:\n  username: admin\n  password: super-secret-password\nEOF\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#2-encrypt-the-secret","title":"2. Encrypt the Secret","text":"<pre><code># Encrypt the secret using kubeseal\nkubeseal -o yaml &lt; test-secret.yaml &gt; test-sealed-secret.yaml\n\n# Clean up the unencrypted secret\nrm test-secret.yaml\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#3-examine-the-sealed-secret","title":"3. Examine the Sealed Secret","text":"<pre><code># Look at the encrypted secret - safe to commit!\ncat test-sealed-secret.yaml\n</code></pre> <p>You'll see output like: <pre><code>apiVersion: bitnami.com/v1alpha1\nkind: SealedSecret\nmetadata:\n  name: test-secret\n  namespace: default\nspec:\n  encryptedData:\n    password: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...\n    username: AgAKAoiQm7QDhh+EoKJvGb5nSW8uaY7NOAd...\n  template:\n    metadata:\n      name: test-secret\n      namespace: default\n    type: Opaque\n</code></pre></p>"},{"location":"getting-started/05-sealed-secrets-setup/#4-apply-and-verify","title":"4. Apply and Verify","text":"<pre><code># Apply the sealed secret\nkubectl apply -f test-sealed-secret.yaml\n\n# Verify it was decrypted automatically\nkubectl get secret test-secret -o yaml\n\n# Clean up test resources\nkubectl delete -f test-sealed-secret.yaml\nrm test-sealed-secret.yaml public-cert.pem\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#gitops-integration","title":"GitOps Integration","text":""},{"location":"getting-started/05-sealed-secrets-setup/#update-your-gitops-repository","title":"Update Your GitOps Repository","text":"<p>Now that Sealed Secrets is installed, update your platform repository structure:</p> <pre><code># Add to your platform repository\ngit add platform-core/sealed-secrets-controller.yaml\ngit commit -m \"feat: add sealed secrets controller for secure secret management\"\ngit push\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#verify-argocd-sync","title":"Verify ArgoCD Sync","text":"<p>Check that ArgoCD has successfully deployed Sealed Secrets:</p> <pre><code># Check ArgoCD application status\nargocd app get sealed-secrets-controller\n\n# Verify in ArgoCD UI\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre> <p>Log in to ArgoCD at https://localhost:8080 and verify the <code>sealed-secrets-controller</code> application is healthy and synced.</p>"},{"location":"getting-started/05-sealed-secrets-setup/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/05-sealed-secrets-setup/#1-secret-naming-conventions","title":"1. Secret Naming Conventions","text":"<pre><code># Use descriptive names and proper namespacing\nmetadata:\n  name: azure-crossplane-credentials\n  namespace: crossplane-system\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#2-scope-secrets-appropriately","title":"2. Scope Secrets Appropriately","text":"<pre><code># Cluster-wide secret (default)\nkubeseal -o yaml &lt; secret.yaml &gt; sealed-secret.yaml\n\n# Namespace-scoped secret (more secure)\nkubeseal --scope namespace-wide -o yaml &lt; secret.yaml &gt; sealed-secret.yaml\n\n# Strict mode (name and namespace must match exactly)\nkubeseal --scope strict -o yaml &lt; secret.yaml &gt; sealed-secret.yaml\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#3-certificate-management","title":"3. Certificate Management","text":"<pre><code># Backup the encryption certificate (store securely!)\nkubectl get secret -n sealed-secrets sealed-secrets-key -o yaml &gt; sealed-secrets-master-key.yaml\n\n# For disaster recovery, you can restore the key:\n# kubectl apply -f sealed-secrets-master-key.yaml\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#4-development-workflow","title":"4. Development Workflow","text":"<pre><code># 1. Create secret template\ncat &gt; secret.yaml &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-app-secret\n  namespace: default\ntype: Opaque\nstringData:\n  api-key: \"your-secret-value\"\nEOF\n\n# 2. Encrypt with kubeseal\nkubeseal -o yaml &lt; secret.yaml &gt; sealed-secret.yaml\n\n# 3. Remove plain text secret\nrm secret.yaml\n\n# 4. Commit encrypted secret\ngit add sealed-secret.yaml\ngit commit -m \"feat: add encrypted API key for my-app\"\ngit push\n</code></pre>"},{"location":"getting-started/05-sealed-secrets-setup/#security-considerations","title":"Security Considerations","text":""},{"location":"getting-started/05-sealed-secrets-setup/#safe-practices","title":"\u2705 Safe Practices","text":"<ul> <li>Always delete unencrypted secret files after sealing</li> <li>Use appropriate scoping (strict/namespace-wide/cluster-wide)</li> <li>Backup and secure the master encryption key</li> <li>Rotate secrets periodically</li> </ul>"},{"location":"getting-started/05-sealed-secrets-setup/#avoid-these-mistakes","title":"\u274c Avoid These Mistakes","text":"<ul> <li>Never commit unencrypted secrets to Git</li> <li>Don't share the master encryption key publicly</li> <li>Avoid using cluster-wide scope for sensitive secrets</li> <li>Don't modify encrypted data manually</li> </ul>"},{"location":"getting-started/05-sealed-secrets-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/05-sealed-secrets-setup/#common-issues","title":"Common Issues","text":"<p>1. kubeseal can't connect to controller: <pre><code># Check if controller is running\nkubectl get pods -n sealed-secrets -l app.kubernetes.io/name=sealed-secrets\n\n# Check service endpoint\nkubectl get svc -n sealed-secrets sealed-secrets-controller\n</code></pre></p> <p>2. Certificate fetch fails: <pre><code># Explicitly specify controller details\nkubeseal --fetch-cert \\\n  --controller-namespace=sealed-secrets \\\n  --controller-name=sealed-secrets-controller\n</code></pre></p> <p>3. Sealed secret not decrypting: <pre><code># Check controller logs\nkubectl logs -n sealed-secrets -l app.kubernetes.io/name=sealed-secrets\n\n# Verify sealed secret format\nkubectl describe sealedsecret &lt;secret-name&gt;\n</code></pre></p>"},{"location":"getting-started/05-sealed-secrets-setup/#next-steps","title":"Next Steps","text":"<p>With Sealed Secrets now configured, you can:</p> <ol> <li>Securely store cloud credentials for Crossplane providers</li> <li>Manage application secrets through GitOps workflows  </li> <li>Follow security best practices from development through production</li> <li>Scale secret management across multiple environments</li> </ol> <p>Sealed Secrets is now a foundational component of your GitOps platform, enabling secure secret management throughout the tutorial.</p>"},{"location":"getting-started/05-sealed-secrets-setup/#congratulations","title":"Congratulations!","text":"<p>You've successfully extended your Kubernetes cluster with enterprise-grade secret management capabilities. Your platform now supports:</p> <ul> <li>\u2705 Secure GitOps workflows with encrypted secrets</li> <li>\u2705 Developer-friendly secret encryption process</li> <li>\u2705 Production-ready security practices</li> <li>\u2705 Foundation for Crossplane credential management</li> </ul> <p>\u27a1\ufe0f Next Section: Crossplane Integration</p>"},{"location":"gitops-fundamentals/","title":"GitOps Fundamentals","text":""},{"location":"gitops-fundamentals/01-argocd-setup/","title":"01: ArgoCD Setup for Crossplane","text":"<p>We have already installed ArgoCD, but to make it work effectively with Crossplane, we need to understand a few key configuration details.</p>"},{"location":"gitops-fundamentals/01-argocd-setup/#health-checks","title":"Health Checks","text":"<p>ArgoCD determines the health of a resource by running a series of Lua scripts. By default, it doesn't know how to interpret the status of Crossplane's custom resources. A <code>Composition</code> might be creating resources, but ArgoCD will show it as <code>Progressing</code> indefinitely.</p> <p>We need to provide custom health checks for Crossplane resources.</p> <p>Example Health Check for a Crossplane <code>Composition</code>:</p> <pre><code>-- health.lua\nhs = {}\nif obj.status ~= nil then\n  if obj.status.conditions ~= nil and #obj.status.conditions &gt; 0 then\n    for i, condition in ipairs(obj.status.conditions) do\n      if condition.type == \"Ready\" then\n        if condition.status == \"True\" then\n          hs.status = \"Healthy\"\n          hs.message = condition.message or \"Resource is ready\"\n        else\n          hs.status = \"Progressing\"\n          hs.message = condition.message or \"Resource is not ready\"\n        end\n        return hs\n      end\n    end\n  end\nend\nhs.status = \"Progressing\"\nhs.message = \"No Ready condition found\"\nreturn hs\n</code></pre> <p>This script tells ArgoCD to look at the <code>status.conditions</code> array of a Composition resource. It safely iterates through the conditions to find the one with <code>type: Ready</code>. If that condition has a <code>status: \"True\"</code>, then the resource is considered <code>Healthy</code>. The script handles edge cases where conditions might not exist.</p>"},{"location":"gitops-fundamentals/01-argocd-setup/#how-to-apply-health-checks","title":"How to Apply Health Checks","text":"<p>You can add these custom health checks to the <code>argocd-cm</code> ConfigMap in the <code>argocd</code> namespace.</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  resource.customizations: |\n    apiextensions.crossplane.io/Composition:\n      health.lua: |\n        -- ... (lua script from above) ...\n</code></pre> <p>We have already applied a set of standard Crossplane health checks as part of our bootstrap process.</p>"},{"location":"gitops-fundamentals/01-argocd-setup/#rbac-for-crossplane-resources","title":"RBAC for Crossplane Resources","text":"<p>By default, the ArgoCD Application Controller does not have permission to create or manage cluster-scoped resources like <code>Compositions</code> or <code>CompositeResourceDefinitions</code>. We need to grant it these permissions.</p> <p>This is done by creating a <code>ClusterRole</code> and a <code>ClusterRoleBinding</code>.</p> <p>Example <code>ClusterRole</code>:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: argocd-crossplane-manager-role\nrules:\n- apiGroups:\n  - apiextensions.crossplane.io\n  resources:\n  - compositions\n  - compositeresourcedefinitions\n  verbs:\n  - \"*\"\n</code></pre> <p>Then, you bind this role to the ArgoCD Application Controller's Service Account.</p> <p>This is also handled automatically by our bootstrap configuration.</p>"},{"location":"gitops-fundamentals/01-argocd-setup/#sync-options","title":"Sync Options","text":"<p>When working with CRDs, it's often necessary to tell ArgoCD to manage them in a specific way. The most common issue is that a CRD is applied, and then a Custom Resource (CR) that uses that CRD is applied immediately after. This can lead to a race condition where the CR is created before the CRD is fully recognized by the Kubernetes API server.</p> <p>To solve this, we use a Sync Hook:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\n  annotations:\n    argocd.argoproj.io/sync-wave: \"1\"\n# ...\n---\napiVersion: my.crd.io/v1alpha1\nkind: MyCustomResource\nmetadata:\n  name: my-cr\n  annotations:\n    argocd.argoproj.io/sync-wave: \"2\"\n# ...\n</code></pre> <p>By adding <code>sync-wave</code> annotations, we can instruct ArgoCD to apply resources in a specific order. Resources with a lower sync-wave number are applied first, and ArgoCD waits for them to become healthy before proceeding to the next wave.</p> <p>We use this pattern extensively in our bootstrap process to ensure that Crossplane Providers are healthy before we try to create any Compositions.</p> <p>\u27a1\ufe0f Next: Crossplane Integration</p>"},{"location":"gitops-fundamentals/02-crossplane-integration/","title":"02: Crossplane Integration with ArgoCD","text":"<p>Now that ArgoCD is configured to understand Crossplane, let's look at how they work together to create our GitOps-powered IDP.</p>"},{"location":"gitops-fundamentals/02-crossplane-integration/#the-core-concept-separation-of-duties","title":"The Core Concept: Separation of Duties","text":"<p>The power of this integration comes from a clear separation of duties:</p> <ul> <li>Crossplane is the engine. It knows how to create infrastructure. It contains the logic for talking to cloud provider APIs. It defines the <code>Compositions</code> (the blueprints).</li> <li>ArgoCD is the delivery mechanism. It knows what to create. It watches our Git repositories and applies the desired state (the <code>Composite Resources</code>) to the cluster.</li> </ul> <p>This separation is crucial. The Platform Team owns the Crossplane side of the house, and the Development Teams own the ArgoCD side (by creating Composite Resources in their repositories).</p>"},{"location":"gitops-fundamentals/02-crossplane-integration/#the-reconciliation-loop","title":"The Reconciliation Loop","text":"<p>Let's trace the end-to-end reconciliation loop:</p> <ol> <li>A developer pushes a Composite Resource to an <code>infra-</code> repository.     <pre><code># infra-dev/my-app-db.yaml\napiVersion: database.example.org/v1alpha1\nkind: XPostgreSQLInstance\nmetadata:\n  name: my-app-db\n  namespace: default\nspec:\n  parameters:\n    storageGB: 20\n  crossplane:\n    compositionRef:\n      name: azure-postgresql-server\n</code></pre></li> </ol> <p>\ud83d\udcc1 Exercise Files: Available at <code>exercises/gitops-fundamentals/crossplane-integration/xpostgresqlinstance-dev.yaml</code></p> <pre><code># Copy into the dev environment infrastructure path (GitOps-managed)\nuser@host idp-tutorial&gt; $ cp exercises/gitops-fundamentals/crossplane-integration/xpostgresqlinstance-dev.yaml exercises/crossplane-advanced-patterns-01/environments/dev/infrastructure/\n\n# Commit on a feature branch and open a PR\nuser@host idp-tutorial&gt; $ git switch -c feat/dev-db-example\nuser@host idp-tutorial&gt; $ git add exercises/crossplane-advanced-patterns-01/environments/dev/infrastructure/xpostgresqlinstance-dev.yaml\nuser@host idp-tutorial&gt; $ git commit -m \"gitops: add xpostgresqlinstance for dev (integration example)\"\nuser@host idp-tutorial&gt; $ git push -u origin $(git branch --show-current)\nuser@host idp-tutorial&gt; $ gh pr create --title \"Add dev XPostgreSQLInstance example\" --body \"Adds integration example CR for dev\"\nuser@host idp-tutorial&gt; $ gh pr merge --auto --squash --delete-branch\n</code></pre> <ol> <li> <p>ArgoCD syncs the repository. It sees the new <code>XPostgreSQLInstance</code> Composite Resource and applies it to the Kubernetes cluster using <code>kubectl apply</code>.</p> </li> <li> <p>Crossplane's Composition Controller wakes up. It sees a new <code>XPostgreSQLInstance</code> Composite Resource and identifies the associated Composition.</p> </li> <li> <p>Crossplane processes the Composition. It uses the Composition template to determine which managed resources need to be created. For example, it might use the <code>azure-postgresql-server</code> Composition.</p> </li> <li> <p>Crossplane creates Managed Resources. It creates the individual cloud resources (e.g., <code>FlexibleServer</code>, <code>FirewallRule</code>) as defined in the Composition.</p> </li> <li> <p>Crossplane Provider Controllers take over. The <code>provider-azure</code> controller sees the new Azure-specific resources and makes the necessary API calls to Azure to provision the database.</p> </li> <li> <p>Status is reported back up the chain. As the resources are created in Azure, the status is updated on the <code>FlexibleServer</code> resource, which updates the <code>XPostgreSQLInstance</code> Composite Resource. The developer can run <code>kubectl get xpostgresqlinstance my-app-db -o yaml</code> and see the connection details and status.</p> </li> </ol>"},{"location":"gitops-fundamentals/02-crossplane-integration/#viewing-the-sync-in-argocd","title":"Viewing the Sync in ArgoCD","text":"<p>This entire workflow is visible in the ArgoCD UI. You can click on the <code>infra-dev</code> Application and see:</p> <ul> <li>The <code>XPostgreSQLInstance</code> Composite Resource that was synced from Git.</li> <li>The underlying <code>FlexibleServer</code> and <code>FirewallRule</code> resources.</li> </ul> <p>ArgoCD provides a complete, real-time dependency graph of your entire infrastructure, from the Git commit all the way down to the individual cloud resources.</p> <p>This tight integration provides unparalleled visibility and control over your infrastructure.</p> <p>\u27a1\ufe0f Next: Workflow Patterns</p>"},{"location":"gitops-fundamentals/03-workflow-patterns/","title":"03: GitOps Workflow Patterns","text":"<p>With our tooling in place, we can now implement powerful GitOps workflows. This section focuses on practical patterns that work with modern development practices like GitHub Flow and single infrastructure repositories.</p>"},{"location":"gitops-fundamentals/03-workflow-patterns/#the-modern-challenge-single-repo-trunk-based-development","title":"The Modern Challenge: Single Repo + Trunk-Based Development","text":"<p>Most teams today use: - GitHub Flow (trunk-based development) with short-lived feature branches - Single infrastructure repository for all environments  - Fast iteration cycles with continuous deployment</p> <p>The challenge: How do you maintain environment promotion safety while keeping the developer experience smooth and the operational overhead minimal?</p>"},{"location":"gitops-fundamentals/03-workflow-patterns/#pattern-1-environment-based-directory-structure-recommended","title":"Pattern 1: Environment-Based Directory Structure (Recommended)","text":"<p>Best for: Teams using GitHub Flow with a single infrastructure repository</p>"},{"location":"gitops-fundamentals/03-workflow-patterns/#repository-structure","title":"Repository Structure","text":"<pre><code>infrastructure-gitops/\n\u251c\u2500\u2500 platform-core/              # Platform components (XRDs, Compositions)  \n\u2502   \u251c\u2500\u2500 xrds/\n\u2502   \u2514\u2500\u2500 compositions/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 dev/                     # Development environment\n\u2502   \u2502   \u251c\u2500\u2500 applications/\n\u2502   \u2502   \u2514\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 staging/                 # Staging environment  \n\u2502   \u2502   \u251c\u2500\u2500 applications/\n\u2502   \u2502   \u2514\u2500\u2500 infrastructure/\n\u2502   \u2514\u2500\u2500 production/              # Production environment\n\u2502       \u251c\u2500\u2500 applications/\n\u2502       \u2514\u2500\u2500 infrastructure/\n\u2514\u2500\u2500 shared/                      # Shared resources across environments\n    \u251c\u2500\u2500 secrets/\n    \u2514\u2500\u2500 policies/\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#workflow-safe-trunk-based-infrastructure-changes","title":"Workflow: Safe Trunk-Based Infrastructure Changes","text":""},{"location":"gitops-fundamentals/03-workflow-patterns/#step-1-feature-development","title":"Step 1: Feature Development","text":"<pre><code># Developer creates feature branch for infrastructure change\ngit checkout -b feature/add-redis-cache\ngit push -u origin feature/add-redis-cache\n\n# Add new infrastructure to dev first\ncat &gt; environments/dev/infrastructure/redis-cache.yaml &lt;&lt;EOF\napiVersion: platform.company.com/v1alpha1\nkind: XRedisCache\nmetadata:\n  name: user-session-cache\n  namespace: dev\nspec:\n  parameters:\n    size: small\n    version: \"7.0\"\n    backup: false\nEOF\n\ngit add environments/dev/infrastructure/redis-cache.yaml\ngit commit -m \"feat: add Redis cache for user sessions (dev)\"\ngit push\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#step-2-automated-pr-environment","title":"Step 2: Automated PR Environment","text":"<p>GitHub Actions automatically: 1. Creates PR environment in <code>dev</code> namespace with unique suffix 2. Runs integration tests against the PR environment 3. Comments on PR with test results and environment URL</p> <pre><code># .github/workflows/pr-infrastructure.yml\nname: Infrastructure PR Testing\non:\n  pull_request:\n    paths: ['environments/dev/**']\n\njobs:\n  test-infrastructure:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Create PR Environment\n      run: |\n        # Create PR-specific resources with suffix\n        export PR_SUFFIX=\"pr-${{ github.event.number }}\"\n\n        # Process templates and create PR environment\n        envsubst &lt; environments/dev/infrastructure/redis-cache.yaml \\\n          | sed \"s/name: user-session-cache/name: user-session-cache-${PR_SUFFIX}/\" \\\n          | kubectl apply -f -\n\n        # Wait for resources to be ready\n        kubectl wait --for=condition=Ready xrediscache/user-session-cache-${PR_SUFFIX} -n dev --timeout=300s\n\n    - name: Run Integration Tests\n      run: |\n        # Run tests against PR environment\n        export REDIS_URL=\"user-session-cache-pr-${{ github.event.number }}.dev.svc.cluster.local\"\n        npm test -- --environment=pr-${{ github.event.number }}\n\n    - name: Cleanup on Failure\n      if: failure()\n      run: |\n        export PR_SUFFIX=\"pr-${{ github.event.number }}\"\n        kubectl delete xrediscache/user-session-cache-${PR_SUFFIX} -n dev\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#step-3-merge-to-main-automatic-dev-deployment","title":"Step 3: Merge to Main (Automatic Dev Deployment)","text":"<pre><code># After PR approval and merge to main\n# ArgoCD automatically syncs changes to dev environment\n\n# ArgoCD Application for dev\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: infrastructure-dev\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/your-org/infrastructure-gitops.git\n    targetRevision: HEAD\n    path: environments/dev\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: dev\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre> <p>\ud83d\udcc1 Exercise Files: Available at <code>exercises/gitops-fundamentals/workflow-patterns/argocd-app-infrastructure-dev.yaml</code></p> <pre><code># Copy into your GitOps repo/Application folder\nuser@host idp-tutorial&gt; $ cp exercises/gitops-fundamentals/workflow-patterns/argocd-app-infrastructure-dev.yaml gitops-bootstrap/argocd/\n\n# Commit and push so ArgoCD reconciles\nuser@host idp-tutorial&gt; $ git add gitops-bootstrap/argocd/argocd-app-infrastructure-dev.yaml\nuser@host idp-tutorial&gt; $ git commit -m \"gitops: add dev infra ArgoCD Application\"\nuser@host idp-tutorial&gt; $ git push\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#step-4-environment-promotion-via-pr","title":"Step 4: Environment Promotion via PR","text":"<p>Controlled promotion using internal PRs:</p> <pre><code># Platform team promotes to staging\ngit checkout main\ngit pull origin main\n\n# Copy validated changes from dev to staging\ncp environments/dev/infrastructure/redis-cache.yaml \\\n   environments/staging/infrastructure/redis-cache.yaml\n\n# Update for staging-specific configuration\nsed -i 's/size: small/size: medium/' environments/staging/infrastructure/redis-cache.yaml\nsed -i 's/backup: false/backup: true/' environments/staging/infrastructure/redis-cache.yaml\n\ngit add environments/staging/infrastructure/redis-cache.yaml\ngit commit -m \"feat: promote Redis cache to staging\n\n- Increase size to medium for staging load\n- Enable backup for data protection\n- Validated in dev environment\"\n\n# Create internal PR for staging promotion\ngh pr create --title \"Promote: Redis cache to staging\" \\\n             --body \"Promoting validated Redis cache from dev to staging with staging-specific configuration\"\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#step-5-production-promotion-strict-control","title":"Step 5: Production Promotion (Strict Control)","text":"<p>Production requires explicit approval workflow:</p> <pre><code># .github/workflows/production-promotion.yml\nname: Production Promotion\non:\n  push:\n    paths: ['environments/production/**']\n    branches: [main]\n\njobs:\n  production-gate:\n    runs-on: ubuntu-latest\n    environment: production  # Requires GitHub Environment protection rules\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Validate Production Changes\n      run: |\n        # Validate that changes exist in staging first\n        if ! diff -r environments/staging/infrastructure environments/production/infrastructure; then\n          echo \"\u2705 Production changes differ from staging - manual review required\"\n        fi\n\n        # Run production-specific validations\n        kubeval environments/production/infrastructure/*.yaml\n        conftest verify environments/production/infrastructure/*.yaml\n\n    - name: Manual Approval Gate\n      uses: hmarr/auto-approve-action@v3\n      # This step requires manual approval via GitHub UI\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#safety-mechanisms","title":"Safety Mechanisms","text":""},{"location":"gitops-fundamentals/03-workflow-patterns/#1-staged-rollout-with-canary","title":"1. Staged Rollout with Canary","text":"<pre><code># environments/production/infrastructure/redis-cache.yaml\napiVersion: platform.company.com/v1alpha1\nkind: XRedisCache\nmetadata:\n  name: user-session-cache\n  namespace: production\nspec:\n  parameters:\n    size: large\n    version: \"7.0\"\n    backup: true\n    highAvailability: true\n    rolloutStrategy:\n      type: canary\n      canarySteps:\n      - weight: 10   # 10% of traffic\n        duration: \"5m\"\n      - weight: 50   # 50% of traffic  \n        duration: \"10m\"\n      - weight: 100  # Full rollout\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#2-automatic-rollback-on-failure","title":"2. Automatic Rollback on Failure","text":"<pre><code># ArgoCD Application with health checks\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: infrastructure-production\nspec:\n  # ... other config\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    retry:\n      limit: 3\n      backoff:\n        duration: 5s\n        maxDuration: 3m0s\n    syncOptions:\n    - CreateNamespace=true\n    - RespectIgnoreDifferences=true\n\n  # Health monitoring\n  health:\n    - group: platform.company.com\n      kind: XRedisCache\n      check: |\n        health_status = {}\n        if obj.status and obj.status.conditions then\n          for _, condition in ipairs(obj.status.conditions) do\n            if condition.type == \"Ready\" then\n              if condition.status == \"True\" then\n                health_status.status = \"Healthy\"\n                health_status.message = \"Redis cache is ready\"\n              else\n                health_status.status = \"Degraded\" \n                health_status.message = condition.message\n              end\n            end\n          end\n        else\n          health_status.status = \"Progressing\"\n          health_status.message = \"Waiting for Redis cache status\"\n        end\n        return health_status\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"gitops-fundamentals/03-workflow-patterns/#3-environment-drift-detection","title":"3. Environment Drift Detection","text":"<pre><code># .github/workflows/drift-detection.yml\nname: Environment Drift Detection\non:\n  schedule:\n    - cron: '0 8 * * *'  # Daily at 8 AM\n\njobs:\n  detect-drift:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Check Dev Environment Drift\n      run: |\n        # Compare desired state vs actual state\n        argocd app diff infrastructure-dev --refresh\n\n        # Check for unexpected manual changes\n        kubectl get all -n dev -o yaml | \\\n          grep -E \"(kubectl.kubernetes.io/last-applied-configuration|argocd.argoproj.io/)\" | \\\n          grep -v \"argocd.argoproj.io/managed-by\" &amp;&amp; \\\n          echo \"\u26a0\ufe0f Manual changes detected in dev environment\"\n\n    - name: Slack Alert on Drift\n      if: failure()\n      uses: 8398a7/action-slack@v3\n      with:\n        status: failure\n        text: \"\ud83d\udea8 Environment drift detected! Manual intervention may be needed.\"\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#benefits-of-this-pattern","title":"Benefits of This Pattern","text":""},{"location":"gitops-fundamentals/03-workflow-patterns/#developer-experience","title":"\u2705 Developer Experience","text":"<ul> <li>Single repository - no context switching</li> <li>Fast feedback - PR environments for testing</li> <li>Familiar workflow - standard GitHub Flow</li> <li>Automated testing - catch issues early</li> </ul>"},{"location":"gitops-fundamentals/03-workflow-patterns/#operational-safety","title":"\u2705 Operational Safety","text":"<ul> <li>Environment parity - same code across environments</li> <li>Controlled promotion - explicit approval for production</li> <li>Audit trail - full Git history of changes</li> <li>Automatic rollback - failed deployments revert automatically</li> </ul>"},{"location":"gitops-fundamentals/03-workflow-patterns/#platform-engineering","title":"\u2705 Platform Engineering","text":"<ul> <li>Reusable components - shared XRDs and Compositions</li> <li>Environment isolation - namespace-based separation</li> <li>Policy enforcement - consistent across environments</li> <li>Monitoring integration - drift detection and alerting</li> </ul> <p>This pattern gives you enterprise-grade safety with startup-level agility - perfect for teams that need to move fast while maintaining reliability.</p> <p>This pattern gives you enterprise-grade safety with startup-level agility - perfect for teams that need to move fast while maintaining reliability.</p>"},{"location":"gitops-fundamentals/03-workflow-patterns/#pattern-2-application-coupled-infrastructure","title":"Pattern 2: Application-Coupled Infrastructure","text":"<p>Best for: Microservices that own their dedicated infrastructure components</p> <p>When applications have dedicated infrastructure that isn't shared (databases, caches, queues), you can manage them together while maintaining the single-repo structure.</p>"},{"location":"gitops-fundamentals/03-workflow-patterns/#repository-structure_1","title":"Repository Structure","text":"<pre><code>infrastructure-gitops/\n\u251c\u2500\u2500 platform-core/              # Shared platform components\n\u251c\u2500\u2500 applications/\n\u2502   \u251c\u2500\u2500 user-service/           # Application-specific infrastructure  \n\u2502   \u2502   \u251c\u2500\u2500 infrastructure/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 postgres.yaml   # Dedicated database\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 redis.yaml      # Dedicated cache\n\u2502   \u2502   \u2514\u2500\u2500 config/\n\u2502   \u2502       \u2514\u2500\u2500 secrets.yaml\n\u2502   \u2514\u2500\u2500 payment-service/\n\u2502       \u251c\u2500\u2500 infrastructure/\n\u2502       \u2502   \u2514\u2500\u2500 postgres.yaml   # Isolated database\n\u2502       \u2514\u2500\u2500 config/\n\u2514\u2500\u2500 environments/               # Environment-specific overrides\n    \u251c\u2500\u2500 dev/applications/\n    \u251c\u2500\u2500 staging/applications/\n    \u2514\u2500\u2500 production/applications/\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#argocd-applicationset-pattern","title":"ArgoCD ApplicationSet Pattern","text":"<pre><code># ArgoCD ApplicationSet for application infrastructure\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: application-infrastructure\n  namespace: argocd\nspec:\n  generators:\n  - matrix:\n      generators:\n      - git:\n          repoURL: https://github.com/your-org/infrastructure-gitops.git\n          revision: HEAD\n          directories:\n          - path: applications/*\n      - list:\n          elements:\n          - env: dev\n            cluster: https://kubernetes.default.svc\n          - env: staging  \n            cluster: https://staging-cluster-url\n          - env: production\n            cluster: https://production-cluster-url\n  template:\n    metadata:\n      name: '{{path.basename}}-{{env}}'\n      labels:\n        app: '{{path.basename}}'\n        env: '{{env}}'\n    spec:\n      project: default\n      sources:\n      # Base application infrastructure\n      - repoURL: https://github.com/your-org/infrastructure-gitops.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      # Environment-specific overrides\n      - repoURL: https://github.com/your-org/infrastructure-gitops.git\n        targetRevision: HEAD\n        path: 'environments/{{env}}/{{path}}'\n      destination:\n        server: '{{cluster}}'\n        namespace: '{{path.basename}}-{{env}}'\n      syncPolicy:\n        automated:\n          prune: true\n          selfHeal: true\n        syncOptions:\n        - CreateNamespace=true\n</code></pre> <p>\ud83d\udcc1 Exercise Files: Available at <code>exercises/gitops-fundamentals/workflow-patterns/applicationset-application-infrastructure.yaml</code></p> <pre><code># Copy into your GitOps repo/ApplicationSets folder\nuser@host idp-tutorial&gt; $ cp exercises/gitops-fundamentals/workflow-patterns/applicationset-application-infrastructure.yaml gitops-bootstrap/argocd/\n\n# Commit and push so ArgoCD reconciles\nuser@host idp-tutorial&gt; $ git add gitops-bootstrap/argocd/applicationset-application-infrastructure.yaml\nuser@host idp-tutorial&gt; $ git commit -m \"gitops: add application infrastructure ApplicationSet\"\nuser@host idp-tutorial&gt; $ git push\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#application-infrastructure-example","title":"Application Infrastructure Example","text":"<pre><code># applications/user-service/infrastructure/postgres.yaml\napiVersion: platform.company.com/v1alpha1  \nkind: XPostgreSQL\nmetadata:\n  name: user-database\nspec:\n  parameters:\n    name: user-database\n    databaseName: users\n    # Environment-specific values will be overridden\n    storage: \"10Gi\"    # Default for dev\n    replicas: 1        # Default for dev\n    backup: false      # Default for dev\n  crossplane:\n    compositionRef:\n      name: postgresql-composition\n</code></pre> <pre><code># environments/production/applications/user-service/infrastructure/postgres.yaml  \napiVersion: platform.company.com/v1alpha1\nkind: XPostgreSQL\nmetadata:\n  name: user-database\nspec:\n  parameters:\n    name: user-database\n    databaseName: users\n    storage: \"100Gi\"       # Production storage\n    replicas: 3            # High availability\n    backup: true           # Production backups\n    backupRetention: 30    # 30-day retention\n    monitoring: enabled    # Production monitoring\n  crossplane:\n    compositionRef:\n      name: postgresql-production-composition  # Production-specific composition\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#pattern-3-emergency-workflows-troubleshooting","title":"Pattern 3: Emergency Workflows &amp; Troubleshooting","text":"<p>Real-world scenarios require robust emergency procedures and troubleshooting workflows.</p>"},{"location":"gitops-fundamentals/03-workflow-patterns/#emergency-hotfix-workflow","title":"Emergency Hotfix Workflow","text":"<pre><code># Critical production issue - bypass normal workflow\ngit checkout main\ngit pull origin main\n\n# Create hotfix branch\ngit checkout -b hotfix/critical-redis-memory-fix\n\n# Apply emergency fix directly to production\ncat &gt; environments/production/infrastructure/redis-cache-hotfix.yaml &lt;&lt;EOF\napiVersion: platform.company.com/v1alpha1\nkind: XRedisCache\nmetadata:\n  name: user-session-cache\nspec:\n  parameters:\n    # Emergency memory increase\n    memory: \"8Gi\"  # Was 4Gi\n    maxMemoryPolicy: \"allkeys-lru\"  # Prevent OOM\nEOF\n\n# Commit and push - triggers immediate deployment\ngit add environments/production/infrastructure/redis-cache-hotfix.yaml\ngit commit -m \"HOTFIX: Increase Redis memory to prevent OOM\n\n- Critical production issue: Redis hitting memory limits\n- Immediate deployment needed\n- Will backport to staging/dev post-incident\"\n\ngit push -u origin hotfix/critical-redis-memory-fix\n\n# Create emergency PR with override labels\ngh pr create --title \"\ud83d\udea8 HOTFIX: Critical Redis memory fix\" \\\n             --body \"Emergency production fix - Redis OOM prevention\" \\\n             --label \"emergency,auto-merge\"\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#gitops-troubleshooting-checklist","title":"GitOps Troubleshooting Checklist","text":""},{"location":"gitops-fundamentals/03-workflow-patterns/#issue-application-not-syncing","title":"Issue: Application Not Syncing","text":"<pre><code># 1. Check ArgoCD Application status\nkubectl get application infrastructure-production -n argocd -o yaml\n\n# 2. Check ArgoCD logs  \nkubectl logs -n argocd deployment/argocd-application-controller\n\n# 3. Manual sync with detailed output\nargocd app sync infrastructure-production --dry-run --output yaml\n\n# 4. Check for resource conflicts\nkubectl get events -n production --sort-by='.lastTimestamp'\n\n# 5. Validate manifests locally\nkubectl diff -f environments/production/infrastructure/\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#issue-crossplane-resource-stuck","title":"Issue: Crossplane Resource Stuck","text":"<pre><code># 1. Check Composite Resource status\nkubectl describe xrediscache user-session-cache -n production\n\n# 2. Check underlying Managed Resources\nkubectl get managed -l crossplane.io/composite=user-session-cache -n production\n\n# 3. Check Crossplane logs\nkubectl logs -n crossplane-system deployment/crossplane\n\n# 4. Force reconciliation\nkubectl annotate xrediscache user-session-cache -n production \\\n  crossplane.io/reconcile=$(date +%Y%m%d%H%M%S)\n\n# 5. Emergency deletion (if needed)\nkubectl patch xrediscache user-session-cache -n production \\\n  --type='merge' -p='{\"metadata\":{\"finalizers\":[]}}'\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#issue-environment-drift","title":"Issue: Environment Drift","text":"<pre><code># 1. Compare ArgoCD desired state vs cluster state  \nargocd app diff infrastructure-production\n\n# 2. Find manual changes\nkubectl get all -n production -o yaml | \\\n  grep -v \"argocd.argoproj.io/managed-by\" | \\\n  grep \"kubectl.kubernetes.io/last-applied-configuration\"\n\n# 3. Restore GitOps control\nargocd app sync infrastructure-production --prune --force\n\n# 4. Prevent future drift\nkubectl create rolebinding block-manual-changes \\\n  --clusterrole=view --user=developers -n production\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#monitoring-alerting-integration","title":"Monitoring &amp; Alerting Integration","text":""},{"location":"gitops-fundamentals/03-workflow-patterns/#argocd-health-monitoring","title":"ArgoCD Health Monitoring","text":"<pre><code># Prometheus AlertManager rules for GitOps health\ngroups:\n- name: gitops-health\n  rules:\n  - alert: ArgocdAppOutOfSync\n    expr: |\n      argocd_app_info{sync_status!=\"Synced\"} == 1\n    for: 5m\n    labels:\n      severity: warning\n      team: platform\n    annotations:\n      summary: \"ArgoCD Application {{ $labels.name }} is out of sync\"\n      description: \"Application {{ $labels.name }} in namespace {{ $labels.namespace }} has been out of sync for more than 5 minutes\"\n      runbook: \"https://runbooks.company.com/gitops/out-of-sync\"\n\n  - alert: CrossplaneResourceFailed\n    expr: |\n      crossplane_resource_ready{condition=\"False\"} == 1\n    for: 10m\n    labels:\n      severity: critical\n      team: platform\n    annotations:\n      summary: \"Crossplane resource {{ $labels.name }} failed\"\n      description: \"Crossplane resource {{ $labels.name }} of type {{ $labels.kind }} has been in failed state for more than 10 minutes\"\n      runbook: \"https://runbooks.company.com/crossplane/resource-failed\"\n</code></pre>"},{"location":"gitops-fundamentals/03-workflow-patterns/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"gitops-fundamentals/03-workflow-patterns/#do","title":"\u2705 DO","text":"<ul> <li>Use environment directories in single repo for clear separation</li> <li>Automate PR environments for infrastructure testing  </li> <li>Require reviews for production changes</li> <li>Monitor for drift and alert on inconsistencies</li> <li>Practice emergency procedures regularly</li> <li>Document troubleshooting steps and runbooks</li> </ul>"},{"location":"gitops-fundamentals/03-workflow-patterns/#dont","title":"\u274c DON'T","text":"<ul> <li>Make manual changes directly to clusters</li> <li>Skip testing infrastructure changes</li> <li>Bypass approval processes except for true emergencies</li> <li>Ignore ArgoCD health checks and sync failures</li> <li>Delete resources without understanding dependencies</li> <li>Mix application code with infrastructure in same repo (unless tightly coupled)</li> </ul>"},{"location":"gitops-fundamentals/03-workflow-patterns/#tools-integration","title":"\ud83d\udd27 Tools Integration","text":"<ul> <li>GitHub Actions for CI/CD pipelines and testing</li> <li>ArgoCD for GitOps deployment and health monitoring</li> <li>Crossplane for infrastructure provisioning</li> <li>Prometheus/AlertManager for monitoring and alerting</li> <li>Slack/Teams for incident response and notifications</li> </ul> <p>This workflow pattern provides the reliability of enterprise GitOps with the agility of trunk-based development - giving you the best of both worlds for modern infrastructure management.</p> <p>\u27a1\ufe0f Next Section: Security</p>"},{"location":"observability/","title":"Observability","text":""},{"location":"observability/01-health-checks/","title":"01: Health Checks and Resource Status","text":"<p>In a declarative system, how do we know if the actual state of the world matches our desired state? This is the fundamental question of observability in a GitOps workflow.</p> <p>Both Crossplane and ArgoCD provide rich status information that we can use to monitor the health of our system.</p>"},{"location":"observability/01-health-checks/#argocd-health-checks","title":"ArgoCD Health Checks","text":"<p>As we discussed in the \"GitOps Fundamentals\" section, ArgoCD uses Lua scripts to determine the health of a resource. A resource can be in one of the following states:</p> <ul> <li>Healthy: The resource is in its desired state.</li> <li>Progressing: The resource is in the process of being created or updated.</li> <li>Degraded: The resource has failed to reach its desired state.</li> <li>Suspended: The resource is intentionally not being reconciled.</li> <li>Missing: The resource is defined in Git but is not present in the cluster.</li> <li>Unknown: The health of the resource could not be determined.</li> </ul> <p>We have already configured custom health checks for our Crossplane resources, so the ArgoCD UI gives us a real-time, at-a-glance view of the health of our entire infrastructure stack.</p>"},{"location":"observability/01-health-checks/#crossplane-resource-status","title":"Crossplane Resource Status","text":"<p>Crossplane itself provides detailed status conditions on all its resources (<code>Claims</code>, <code>CompositeResources</code>, and <code>ManagedResources</code>).</p> <p>You can inspect the status of any Crossplane resource using <code>kubectl</code>.</p> <p>Example: Checking the status of a <code>MySQLInstance</code> claim.</p> <pre><code>kubectl get mysqlinstance my-app-db -o yaml\n</code></pre> <pre><code>apiVersion: database.example.org/v1alpha1\nkind: MySQLInstance\nmetadata:\n  name: my-app-db\n# ...\nstatus:\n  conditions:\n    - type: Ready\n      status: \"True\"\n      lastTransitionTime: \"2023-10-27T18:30:00Z\"\n      reason: Available\n      message: \"The composite resource is available and ready\"\n    - type: Synced\n      status: \"True\"\n      lastTransitionTime: \"2023-10-27T18:28:00Z\"\n      reason: ReconcileSuccess\n      message: \"Successfully reconciled composite resource\"\n  connectionDetails:\n    lastPublishedTime: \"2023-10-27T18:30:01Z\"\n  # ... other fields\n</code></pre> <p>Key fields to watch:</p> <ul> <li><code>status.conditions</code>: This array tells you the current state of the resource. The <code>Ready</code> condition with <code>status: \"True\"</code> is the most important indicator of health.</li> <li><code>status.connectionDetails</code>: For claims, this section will be populated with the connection information for the provisioned resource (e.g., database endpoint, username, password secret reference).</li> </ul>"},{"location":"observability/01-health-checks/#the-crossplane-cli","title":"The <code>crossplane</code> CLI","text":"<p>The <code>crossplane</code> command-line tool provides some helpful commands for observing the status of your resources.</p> <p><code>crossplane trace</code></p> <p>The <code>trace</code> command gives you a complete dependency tree for a given claim, showing you the <code>CompositeResource</code> and all the underlying <code>ManagedResources</code>.</p> <pre><code>crossplane trace mysqlinstance my-app-db\n</code></pre> <p>Output:</p> <pre><code>NAME                                            READY   STATUS    AGE\nMySQLInstance/my-app-db                         True    Available 5m\n\u2514\u2500\u2500 CompositeMySQLInstance/my-app-db-xyz123     True    Available 5m\n    \u251c\u2500\u2500 FlexibleServer/my-app-db-server         True    Available 4m\n    \u2514\u2500\u2500 FirewallRule/my-app-db-fw               True    Available 3m\n</code></pre> <p>This is an invaluable tool for debugging. If a claim is not becoming <code>Ready</code>, you can use <code>trace</code> to pinpoint exactly which underlying resource is failing.</p> <p>By combining the ArgoCD UI with the detailed status information from Crossplane, we can build a comprehensive picture of our system's health.</p> <p>\u27a1\ufe0f Next: Monitoring with Prometheus</p>"},{"location":"observability/02-monitoring-with-prometheus/","title":"02: Monitoring with Prometheus","text":"<p>Health checks give us a binary status (is it working or not?), but for true observability, we need metrics. We need to track trends, understand performance, and be alerted to potential problems before they cause an outage.</p> <p>We will use Prometheus, the de facto standard for metrics and monitoring in the Kubernetes ecosystem.</p>"},{"location":"observability/02-monitoring-with-prometheus/#exposing-metrics-from-crossplane","title":"Exposing Metrics from Crossplane","text":"<p>Crossplane and its providers expose a wealth of metrics in the Prometheus format. These metrics give us deep insights into the reconciliation process.</p> <p>Key metrics include:</p> <ul> <li><code>crossplane_managed_resource_reconcile_total</code>: A counter of how many times a managed resource has been reconciled.</li> <li><code>crossplane_managed_resource_reconcile_errors_total</code>: A counter of how many reconciliation errors have occurred.</li> <li><code>crossplane_managed_resource_reconcile_duration_seconds</code>: A histogram of how long reconciliations are taking.</li> </ul> <p>These metrics are available on the <code>/metrics</code> endpoint of the Crossplane and Provider pods.</p>"},{"location":"observability/02-monitoring-with-prometheus/#setting-up-the-prometheus-stack","title":"Setting up the Prometheus Stack","text":"<p>We will use the <code>kube-prometheus-stack</code> Helm chart, which provides a complete, pre-configured monitoring solution:</p> <ul> <li>Prometheus: Scrapes and stores the metrics.</li> <li>Grafana: For visualizing the metrics in dashboards.</li> <li>Alertmanager: For sending alerts based on metric thresholds.</li> </ul>"},{"location":"observability/02-monitoring-with-prometheus/#installation","title":"Installation","text":"<pre><code># Add the Prometheus community repo\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\n# Install the stack\nhelm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace\n</code></pre>"},{"location":"observability/02-monitoring-with-prometheus/#servicemonitors","title":"ServiceMonitors","text":"<p>How does Prometheus know which pods to scrape? We use a CRD called <code>ServiceMonitor</code>.</p> <p>We need to create <code>ServiceMonitor</code> resources that tell Prometheus to scrape the metrics endpoints of the Crossplane and ArgoCD pods.</p> <p>Example <code>ServiceMonitor</code> for Crossplane:</p> <pre><code>apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: crossplane-metrics\n  namespace: crossplane-system\nspec:\n  selector:\n    matchLabels:\n      app: crossplane\n  endpoints:\n  - port: http-metrics\n    path: /metrics\n</code></pre> <p>This resource tells the Prometheus Operator to find any <code>Service</code> in the <code>crossplane-system</code> namespace with the label <code>app: crossplane</code> and scrape its <code>http-metrics</code> port.</p> <p>We will add these <code>ServiceMonitor</code> manifests to our <code>platform</code> repository, so our monitoring configuration is also managed via GitOps.</p>"},{"location":"observability/02-monitoring-with-prometheus/#building-a-grafana-dashboard","title":"Building a Grafana Dashboard","text":"<p>With the metrics flowing into Prometheus, we can now build a Grafana dashboard to visualize the health of our Crossplane control plane.</p> <p>Key Panels to Include:</p> <ul> <li>Reconciliation Rate: A graph of the <code>rate(crossplane_managed_resource_reconcile_total[5m])</code>. This shows you how much work Crossplane is doing.</li> <li>Reconciliation Error Rate: A graph of the <code>rate(crossplane_managed_resource_reconcile_errors_total[5m])</code>. This should be zero. If it's not, something is wrong.</li> <li>Reconciliation Latency (95th percentile): A graph of <code>histogram_quantile(0.95, sum(rate(crossplane_managed_resource_reconcile_duration_seconds_bucket[5m])) by (le))</code>. This shows you the latency of your reconciliations.</li> <li>Total Managed Resources: A stat panel showing the output of <code>count(crossplane_managed_resources)</code>. This gives you an at-a-glance view of the size of your infrastructure.</li> </ul> <p>By building these dashboards, you create a single pane of glass for observing the health and performance of your entire infrastructure provisioning system.</p> <p>\u27a1\ufe0f Next: Alerting</p>"},{"location":"observability/03-alerting/","title":"03: Alerting on Infrastructure State","text":"<p>Dashboards are great for passive observation, but we need to be proactively notified when things go wrong. This is the job of Prometheus Alertmanager.</p> <p>Alertmanager allows us to define alerting rules based on Prometheus queries. When an alert fires, it can send notifications to a variety of receivers, such as Slack, PagerDuty, or email.</p>"},{"location":"observability/03-alerting/#defining-alerting-rules","title":"Defining Alerting Rules","text":"<p>Alerting rules are defined in a <code>PrometheusRule</code> CRD.</p> <p>Example <code>PrometheusRule</code> to detect failing reconciliations:</p> <pre><code>apiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: crossplane-alerts\n  namespace: crossplane-system\nspec:\n  groups:\n  - name: crossplane.rules\n    rules:\n    - alert: CrossplaneReconciliationErrors\n      expr: rate(crossplane_managed_resource_reconcile_errors_total[5m]) &gt; 0\n      for: 5m\n      labels:\n        severity: critical\n      annotations:\n        summary: \"Crossplane is experiencing reconciliation errors\"\n        description: \"The rate of reconciliation errors for managed resources is greater than 0. This indicates a problem with one or more providers or managed resources.\"\n</code></pre> <p>This rule will:</p> <ol> <li><code>expr</code>: Continuously evaluate the rate of reconciliation errors over a 5-minute window.</li> <li><code>for</code>: If the expression is true for 5 consecutive minutes, the alert will enter the <code>Firing</code> state.</li> <li><code>labels</code>: Attach a <code>severity</code> label, which can be used for routing the alert (e.g., <code>critical</code> alerts go to PagerDuty, <code>warning</code> alerts go to Slack).</li> <li><code>annotations</code>: Provide a human-readable summary and description of the alert.</li> </ol>"},{"location":"observability/03-alerting/#important-alerts-to-configure","title":"Important Alerts to Configure","text":"<p>Here are some essential alerts you should configure for your Crossplane environment:</p> <ul> <li><code>CrossplaneReconciliationErrors</code> (Critical): As defined above. This is your most important alert.</li> <li><code>CrossplaneProviderNotReady</code> (Warning): Alert if a Crossplane <code>Provider</code> resource is not in the <code>Ready</code> state for more than 10 minutes.<ul> <li><code>expr: crossplane_provider_ready == 0</code></li> </ul> </li> <li><code>ArgoCDAppNotHealthy</code> (Warning): Alert if an ArgoCD Application has been in a <code>Degraded</code> state for more than 15 minutes.<ul> <li><code>expr: argocd_app_info{health_status!=\"Healthy\"} == 1</code></li> </ul> </li> <li><code>ClaimNotReady</code> (Warning): Alert if a Crossplane <code>Claim</code> has not reached the <code>Ready</code> state within 30 minutes of its creation. This requires tracking the creation timestamp.</li> </ul>"},{"location":"observability/03-alerting/#configuring-receivers","title":"Configuring Receivers","text":"<p>Once your rules are in place, you need to configure Alertmanager to send the notifications.</p> <p>This is done in the <code>prometheus-operator-alertmanager</code> secret.</p> <p>Example: Configuring a Slack receiver.</p> <pre><code># alertmanager.yaml\nglobal:\n  resolve_timeout: 5m\nroute:\n  group_by: ['job']\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 12h\n  receiver: 'null'\n  routes:\n  - receiver: 'slack-notifications'\n    match:\n      severity: critical\nreceivers:\n- name: 'null'\n- name: 'slack-notifications'\n  slack_configs:\n  - api_url: &lt;YOUR_SLACK_WEBHOOK_URL&gt;\n    channel: '#alerts-critical'\n</code></pre> <p>This configuration tells Alertmanager to send any alert with <code>severity: critical</code> to the <code>#alerts-critical</code> Slack channel.</p> <p>Like all our other configuration, these <code>PrometheusRule</code> and Alertmanager config files should be stored in your <code>platform</code> repository and managed via GitOps. This ensures that your alerting and monitoring strategy evolves along with your infrastructure.</p> <p>\u27a1\ufe0f Next Section: Advanced Topics</p>"},{"location":"providers/azure/02-provisioning-aks/","title":"02: Provisioning AKS Clusters","text":"<p>With the Azure provider configured, we can now define our first infrastructure \"product\": a production-ready Azure Kubernetes Service (AKS) cluster.</p> <p>We will create a <code>Composition</code> that bundles together all the necessary Azure resources to create a secure, reliable AKS cluster.</p>"},{"location":"providers/azure/02-provisioning-aks/#defining-the-compositeakscluster-xrd","title":"Defining the <code>CompositeAKSCluster</code> XRD","text":"<p>First, we define the API for our new resource. This is the <code>CompositeResourceDefinition</code> (XRD).</p> <p>File: <code>compositions/azure/aks.yaml</code></p> <pre><code>apiVersion: apiextensions.crossplane.io/v2  # v2.0 API version\nkind: CompositeResourceDefinition\nmetadata:\n  name: compositeaksclusters.cluster.example.org\nspec:\n  scope: Namespaced  # v2.0: Namespaced by default\n  group: cluster.example.org\n  names:\n    kind: CompositeAKSCluster\n    plural: compositeaksclusters\n  # Note: claimNames removed - not supported in v2.0 namespaced XRs\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n                description: \"The Azure region to deploy the cluster in.\"\n              nodeSize:\n                type: string\n                description: \"The VM size for the worker nodes.\"\n                default: \"Standard_D2s_v3\"\n              nodeCount:\n                type: integer\n                description: \"The number of worker nodes.\"\n                default: 3\n            required:\n              - region\n</code></pre> <p>This XRD defines a new Kubernetes resource called <code>AKSCluster</code> with a <code>spec</code> that allows developers to specify the <code>region</code>, <code>nodeSize</code>, and <code>nodeCount</code>.</p>"},{"location":"providers/azure/02-provisioning-aks/#composing-the-aks-cluster","title":"Composing the AKS Cluster","text":"<p>Next, we define the <code>Composition</code>. This is where we specify which Azure resources will be created to satisfy an <code>AKSCluster</code> claim.</p> <p>File: <code>compositions/azure/aks.yaml</code> (continued)</p> <pre><code>---\napiVersion: apiextensions.crossplane.io/v2  # v2.0 API version\nkind: Composition\nmetadata:\n  name: aks-cluster.v1alpha1.cluster.example.org\n  labels:\n    provider: azure\nspec:\n  compositeTypeRef:\n    apiVersion: cluster.example.org/v1alpha1\n    kind: CompositeAKSCluster\n  resources:\n    - name: resourceGroup\n      base:\n        apiVersion: azure.upbound.io/v1beta1\n        kind: ResourceGroup\n        spec:\n          forProvider:\n            location: \"from-field-path(spec.region)\"\n    - name: virtualNetwork\n      base:\n        apiVersion: network.azure.upbound.io/v1beta1\n        kind: VirtualNetwork\n        spec:\n          forProvider:\n            resourceGroupNameSelector:\n              matchControllerRef: true\n            location: \"from-field-path(spec.region)\"\n            addressSpace: [\"10.0.0.0/16\"]\n    - name: subnet\n      base:\n        apiVersion: network.azure.upbound.io/v1beta1\n        kind: Subnet\n        spec:\n          forProvider:\n            resourceGroupNameSelector:\n              matchControllerRef: true\n            virtualNetworkNameSelector:\n              matchControllerRef: true\n            addressPrefixes: [\"10.0.1.0/24\"]\n    - name: aksCluster\n      base:\n        apiVersion: containerservice.azure.upbound.io/v1beta1\n        kind: KubernetesCluster\n        spec:\n          forProvider:\n            resourceGroupNameSelector:\n              matchControllerRef: true\n            location: \"from-field-path(spec.region)\"\n            dnsPrefix: \"from-field-path(metadata.name)\"\n            defaultNodePool:\n              - name: default\n                vmSize: \"from-field-path(spec.nodeSize)\"\n                nodeCount: \"from-field-path(spec.nodeCount)\"\n                vnetSubnetIdSelector:\n                  matchControllerRef: true\n            identity:\n              type: \"SystemAssigned\"\n      patches:\n        # Patch the connection secret to the claim\n        - fromFieldPath: \"status.atProvider.kubeConfigRaw\"\n          toFieldPath: \"status.connectionDetails.kubeconfig\"\n</code></pre>"},{"location":"providers/azure/02-provisioning-aks/#key-concepts-in-this-composition","title":"Key Concepts in this Composition","text":"<ul> <li><code>resources</code> array: We are composing four Azure resources: a <code>ResourceGroup</code>, a <code>VirtualNetwork</code>, a <code>Subnet</code>, and a <code>KubernetesCluster</code>.</li> <li><code>from-field-path</code> patches: We are patching values from the <code>AKSCluster</code> claim (e.g., <code>spec.region</code>) into the <code>spec</code> of the managed resources.</li> <li><code>matchControllerRef</code> selectors: Instead of hardcoding names, we use selectors to link resources together. For example, the <code>VirtualNetwork</code> will automatically be created in the <code>ResourceGroup</code> that was created as part of this same <code>Composition</code>.</li> <li>Connection Secret Patching: We are patching the <code>kubeConfigRaw</code> from the <code>KubernetesCluster</code> resource into the connection details of the <code>AKSCluster</code> claim. This allows developers to get the kubeconfig for their new cluster directly from the claim.</li> </ul>"},{"location":"providers/azure/02-provisioning-aks/#exercise-claiming-an-aks-cluster","title":"Exercise: Claiming an AKS Cluster","text":"<p>Objective: Provision your first AKS cluster using the new <code>Composition</code>.</p> <p>Tasks:</p> <ol> <li>Create a Claim: In your <code>infra-dev</code> repository, create a new file named <code>my-aks-cluster.yaml</code>.</li> <li>Define the Claim: In the file, define an <code>AKSCluster</code> claim. Choose a name and an Azure region.     <pre><code>apiVersion: cluster.example.org/v1alpha1\nkind: AKSCluster\nmetadata:\n  name: my-first-aks-cluster\nspec:\n  region: \"westeurope\"\n  nodeCount: 2\n</code></pre></li> <li>Commit and Push: Commit the new file to the <code>main</code> branch of your <code>infra-dev</code> repository.</li> <li>Observe in ArgoCD: Watch in the ArgoCD UI as the new <code>AKSCluster</code> claim is synced.</li> <li>Observe in Crossplane: Use <code>crossplane trace akscluster my-first-aks-cluster</code> to see the underlying Azure resources being provisioned.</li> <li>Get the Kubeconfig: Once the cluster is ready, get the kubeconfig from the claim's secret and connect to your new AKS cluster.</li> </ol> <p>Success Criteria:</p> <ul> <li>A new AKS cluster is successfully provisioned in your Azure subscription.</li> <li>You can connect to the new cluster using the kubeconfig from the claim's secret.</li> </ul> <p>\u27a1\ufe0f Next Section: Google Cloud Provider</p>"},{"location":"repository-management/","title":"Repository Management","text":""},{"location":"repository-management/01-multi-repo-strategy/","title":"01: Multi-Repo Strategy for GitOps","text":"<p>As a GitOps environment grows, managing all your code in a single repository (a \"mono-repo\") can become cumbersome. We advocate for a multi-repo strategy, which provides better separation of concerns, more granular access control, and clearer ownership.</p>"},{"location":"repository-management/01-multi-repo-strategy/#our-recommended-repository-structure","title":"Our Recommended Repository Structure","text":"<p>We propose a three-tiered repository structure:</p> <ol> <li> <p>Platform Repository (This one): This repository contains the core platform configuration. It defines the \"shape\" of your IDP.</p> <ul> <li>ArgoCD bootstrap configuration (<code>app-of-apps</code>).</li> <li>Crossplane Provider configurations.</li> <li>Crossplane Compositions (the blueprints for your infrastructure).</li> <li>RBAC policies and security configurations.</li> <li>Audience: Platform Engineering team.</li> </ul> </li> <li> <p>Infrastructure-as-Code (IaC) Repositories: Each of these repositories defines a specific piece of infrastructure using the Compositions from the platform repo.</p> <ul> <li>Contains Crossplane Composite Resources (XRs) (e.g., <code>XPostgreSQLInstance</code>, <code>XAKSCluster</code>).</li> <li>One repository per environment (e.g., <code>infra-dev</code>, <code>infra-staging</code>, <code>infra-prod</code>).</li> <li>Audience: DevOps / SRE / Platform team.</li> </ul> </li> <li> <p>Application Repositories: These are the standard repositories containing your microservice code.</p> <ul> <li>Contains application source code (Go, Python, Java, etc.).</li> <li>Contains Kubernetes manifests for deploying the application (Deployments, Services, Ingress, etc.).</li> <li>May contain a Crossplane Composite Resource if the application requires its own dedicated infrastructure (e.g., a specific database).</li> <li>Audience: Development teams.</li> </ul> </li> </ol>"},{"location":"repository-management/01-multi-repo-strategy/#why-multi-repo","title":"Why Multi-Repo?","text":"Benefit Description Clear Ownership It's immediately clear which team owns which part of the system. Developers own their apps, and the platform team owns the platform. Granular RBAC You can set different permissions for each repository. For example, only the Platform team can approve PRs to the platform repo. Reduced Blast Radius A mistake in an application repository is unlikely to take down your entire platform. Changes are isolated to their respective domains. Scalability As your organization grows, you can easily add new application and infrastructure repositories without creating conflicts in a single repo."},{"location":"repository-management/01-multi-repo-strategy/#the-role-of-the-platform-repo","title":"The Role of the Platform Repo","text":"<p>This repository, <code>crossplane-gitops-tutorial</code>, serves as the Platform Repository. It is the heart of our system. The Crossplane Compositions we define here are published to the Kubernetes API server as new CRDs (e.g., <code>XPostgreSQLInstance.example.org</code>).</p> <p>Other repositories can then create instances of these CRDs (Composite Resources) without needing to know the complex implementation details. They are consuming the API provided by the platform.</p> <p>In the next section, we will look at how to standardize the creation of these repositories using templates.</p> <p>\u27a1\ufe0f Next: Repository Templates</p>"},{"location":"repository-management/02-repository-templates/","title":"02: Repository Templates","text":"<p>To make our multi-repo strategy scalable, we need to make it easy for teams to create new infrastructure and application repositories that adhere to our standards. GitHub Templates are an excellent way to achieve this.</p> <p>We have provided two templates in the <code>repository-templates/</code> directory:</p> <ol> <li><code>template-infra-composition</code>: A template for creating new Crossplane Compositions.</li> <li><code>template-microservice</code>: A template for a standard microservice, including its Kubernetes manifests.</li> </ol>"},{"location":"repository-management/02-repository-templates/#template-1-template-infra-composition","title":"Template 1: <code>template-infra-composition</code>","text":"<p>This template provides the basic scaffolding for defining a new type of infrastructure \"product\" that your platform will offer.</p> <p>File: <code>repository-templates/template-infra-composition/composition.yaml</code></p> <pre><code># --- This file is a template. To use it, copy this directory and update the content. ---\napiVersion: apiextensions.crossplane.io/v2\nkind: CompositeResourceDefinition\nmetadata:\n  name: # e.g., xpostgresqlinstances.database.example.org\nspec:\n  group: # e.g., database.example.org\n  names:\n    kind: # e.g., XPostgreSQLInstance\n    plural: # e.g., xpostgresqlinstances\n  scope: Namespaced  # Default in v2\n  versions:\n    - name: v1alpha1\n      served: true\n      referenceable: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    # Add your Composite Resource parameter fields here\n                    # e.g., storageGB, region, version\n                  required: []\n                crossplane:\n                  type: object\n                  properties:\n                    compositionRef:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                      required:\n                      - name\n                  required:\n                  - compositionRef\n              required:\n              - parameters\n              - crossplane\n---\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: # e.g., azure-postgresql-server.v1alpha1.database.example.org\n  labels:\n    provider: azure\n    # Add other identifying labels\nspec:\n  compositeTypeRef:\n    apiVersion: # e.g., database.example.org/v1alpha1\n    kind: # e.g., XPostgreSQLInstance\n  resources:\n    # Define the cloud resources that make up this Composition\n    # e.g., azure.dbformysql.flexible.FlexibleServer, azure.dbformysql.flexible.FirewallRule\n    - name: my-resource\n      base:\n        apiVersion: #\n        kind: #\n        spec: #\n</code></pre>"},{"location":"repository-management/02-repository-templates/#how-to-use-it","title":"How to Use It","text":"<ol> <li>Create a New Repository: A platform engineer who wants to define a new infrastructure type (e.g., a Redis cluster) would create a new repository from this template.</li> <li>Define the XRD: They would fill out the <code>CompositeResourceDefinition</code> (XRD). The XRD defines the API for the new resource type. It specifies the fields that a developer can set in their Composite Resource parameters (e.g., <code>version</code>, <code>size</code>).</li> <li>Define the Composition: They would then fill out the <code>Composition</code>. The Composition defines which actual cloud resources (e.g., <code>azurerm_redis_cache</code>, <code>google_redis_instance</code>) will be created to satisfy the Composite Resource.</li> <li>Commit and Push: They commit this file to their new repository.</li> </ol>"},{"location":"repository-management/02-repository-templates/#template-2-template-microservice","title":"Template 2: <code>template-microservice</code>","text":"<p>This template provides a starting point for a new microservice.</p> <p>File: <code>repository-templates/template-microservice/deployment.yaml</code></p> <pre><code># --- This file is a template. To use it, copy this directory and update the content. ---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: # my-app\n  namespace: # my-namespace\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: # my-app\n  template:\n    metadata:\n      labels:\n        app: # my-app\n    spec:\n      containers:\n        - name: # my-app\n          image: # my-registry/my-app:latest\n          ports:\n            - containerPort: 8080\n</code></pre>"},{"location":"repository-management/02-repository-templates/#how-to-use-it_1","title":"How to Use It","text":"<ol> <li>Create a New Repository: A developer starting a new microservice would create a new repository from this template.</li> <li>Add Source Code: They would add their application source code (e.g., <code>main.go</code>, <code>app.py</code>).</li> <li>Update Deployment Manifest: They would update the <code>deployment.yaml</code> with the correct image name, container port, and other application-specific settings.</li> <li>Commit and Push: They commit their code and the manifest to their new repository.</li> </ol> <p>By providing these templates, we lower the barrier to entry and ensure that all new components in our ecosystem follow a consistent structure.</p> <p>\u27a1\ufe0f Next: Cross-Repo Coordination</p>"},{"location":"repository-management/03-cross-repo-coordination/","title":"03: Cross-Repo Coordination with ArgoCD","text":"<p>Our multi-repo strategy is powerful, but it introduces a new challenge: how do we make all these repositories work together? How does ArgoCD discover and deploy all the Compositions, Composite Resources, and Applications defined across our entire organization?</p> <p>The answer lies back in the Platform Core ApplicationSet pattern.</p>"},{"location":"repository-management/03-cross-repo-coordination/#revisiting-the-platform-coreyaml","title":"Revisiting the <code>platform-core.yaml</code>","text":"<p>Our bootstrap <code>platform-core.yaml</code> manifest deploys other ArgoCD <code>Application</code> resources. Let's look at the <code>gitops-bootstrap/apps</code> directory that it points to.</p> <p>Imagine this structure:</p> <p><code>gitops-bootstrap/apps/</code> \u251c\u2500\u2500 <code>platform.yaml</code> \u251c\u2500\u2500 <code>infra-dev.yaml</code> \u2514\u2500\u2500 <code>infra-prod.yaml</code></p>"},{"location":"repository-management/03-cross-repo-coordination/#platformyaml","title":"<code>platform.yaml</code>","text":"<p>This file tells ArgoCD to monitor all repositories that contain our core platform definitions (like Compositions).</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: platform-compositions\n  namespace: argocd\nspec:\n  project: default\n  source:\n    # We use a repo glob to discover all repos matching a pattern\n    repoURL: https://github.com/your-org/composition-*\n    targetRevision: HEAD\n    path: './' # Look at the root of each discovered repo\n  destination:\n    server: https://kubernetes.default.svc\n    # Compositions are cluster-scoped, so no namespace is needed\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre> <p>Key Idea: We can use wildcards (<code>*</code>) in the <code>repoURL</code>. This single <code>Application</code> manifest tells ArgoCD to find every repository in your GitHub organization that starts with <code>composition-</code>, and deploy any <code>.yaml</code> or <code>.json</code> files it finds in them. This is how our platform automatically discovers and installs new infrastructure blueprints.</p>"},{"location":"repository-management/03-cross-repo-coordination/#infra-devyaml","title":"<code>infra-dev.yaml</code>","text":"<p>This file tells ArgoCD to deploy the infrastructure Composite Resources for the <code>dev</code> environment.</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: infra-dev\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/your-org/infra-dev.git\n    targetRevision: HEAD\n    path: './'\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default # Composite Resources are now namespaced in v2\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre> <p>This is a more traditional ArgoCD Application, pointing to a single repository that contains all the infrastructure Composite Resources for the development environment.</p>"},{"location":"repository-management/03-cross-repo-coordination/#the-complete-workflow","title":"The Complete Workflow","text":"<p>Now, let's put it all together.</p> <ol> <li> <p>A Platform Engineer wants to offer a new database type.</p> <ul> <li>They create a new repository <code>composition-postgres-ha</code> from the <code>template-infra-composition</code>.</li> <li>They define the XRD and Composition for a highly-available PostgreSQL cluster.</li> <li>They push the repository to the <code>your-org</code> GitHub organization.</li> <li>ArgoCD's <code>platform-compositions</code> app automatically discovers the new repo and installs the Composition into the cluster.</li> <li>The new CRD, <code>XPostgreSQLHA</code>, is now available in the Kubernetes API.</li> </ul> </li> <li> <p>A Developer needs a new HA PostgreSQL database for their project.</p> <ul> <li>They open a pull request against the <code>infra-dev</code> repository.</li> <li>They add a new file, <code>my-project-db.yaml</code>, containing the Composite Resource:     <pre><code>apiVersion: database.example.org/v1alpha1\nkind: XPostgreSQLHA\nmetadata:\n  name: my-project-db\n  namespace: default\nspec:\n  parameters:\n    storageGB: 50\n    region: us-east-1\n  crossplane:\n    compositionRef:\n      name: azure-postgresql-ha\n</code></pre></li> <li>The pull request is reviewed and merged by the DevOps team.</li> <li>ArgoCD's <code>infra-dev</code> app sees the new file and applies it to the cluster.</li> <li>Crossplane sees the new <code>XPostgreSQLHA</code> Composite Resource.</li> <li>It finds the <code>composition-postgres-ha</code> Composition and starts provisioning all the necessary cloud resources (e.g., a primary database, a read replica, firewall rules, etc.).</li> </ul> </li> </ol> <p>This elegant workflow allows for seamless coordination across multiple teams and repositories, all orchestrated through Git and ArgoCD.</p> <p>\u27a1\ufe0f Next Section: GitOps Fundamentals</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/01-chainguard-images/","title":"01: Securing the Supply Chain with Chainguard Images","text":"<p>Our infrastructure is defined by code, but it runs on container images. The security of our control plane (Crossplane, ArgoCD, and all the Crossplane Providers) is paramount. A vulnerability in one of these components could compromise our entire system.</p> <p>This is why we use Chainguard Images.</p>"},{"location":"security/01-chainguard-images/#what-are-chainguard-images","title":"What are Chainguard Images?","text":"<p>Chainguard produces minimalist, hardened container images with a near-zero vulnerability count. They are built from source, signed, and continuously scanned.</p> <p>Key features:</p> <ul> <li>Minimalism: Images contain only the application and its direct dependencies. There is no shell, package manager, or other unnecessary tooling that could be exploited.</li> <li>SBOMs: Every image comes with a Software Bill of Materials (SBOM), giving you a complete inventory of every component in the image.</li> <li>Signed: Images are signed with Sigstore, allowing you to verify their integrity and provenance.</li> </ul> <p>By using Chainguard images for our control plane components, we drastically reduce our attack surface.</p>"},{"location":"security/01-chainguard-images/#how-we-use-chainguard-images","title":"How We Use Chainguard Images","text":"<p>We have configured our Helm charts for Crossplane and ArgoCD to use Chainguard images instead of the default upstream images.</p> <p>Example: Overriding the Crossplane image in its Helm Chart</p> <p>When installing the Crossplane Helm chart, you can override the image registry and repository:</p> <pre><code>helm install crossplane crossplane-stable/crossplane \\\n  --namespace crossplane-system \\\n  --set image.repository=cgr.dev/chainguard/crossplane \\\n  --set image.tag=v1.15.0\n</code></pre> <p>We have pre-configured these overrides in our bootstrap process. When you installed Crossplane and ArgoCD in the \"Getting Started\" module, you were already using the hardened Chainguard versions.</p>"},{"location":"security/01-chainguard-images/#verifying-image-signatures-with-kyverno","title":"Verifying Image Signatures with Kyverno","text":"<p>It's not enough to just use secure images; we need to enforce that only secure, signed images can run in our cluster. We can use a policy engine like Kyverno to do this.</p> <p>Here is an example Kyverno <code>ClusterPolicy</code> that enforces image signature verification:</p> <pre><code>apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: check-image-signature\nspec:\n  validationFailureAction: Enforce\n  rules:\n    - name: check-chainguard-signature\n      match:\n        any:\n        - resources:\n            kinds:\n              - Pod\n      verifyImages:\n      - imageReferences:\n        - \"cgr.dev/chainguard/*\"\n      attestors:\n      - count: 1\n        entries:\n        - keyless:\n            subject: \"https://github.com/chainguard-images/images/.github/workflows/release.yaml@refs/heads/main\"\n            issuer: \"https://token.actions.githubusercontent.com\"\n</code></pre> <p>This policy instructs the Kubernetes API server to:</p> <ol> <li>Intercept all <code>Pod</code> creation requests.</li> <li>If the pod uses an image from <code>cgr.dev/chainguard/</code>, verify its signature.</li> <li>The signature must come from the official Chainguard release pipeline on GitHub.</li> <li>If the signature is invalid or missing, reject the pod creation request.</li> </ol> <p>This provides a strong guarantee that only authorized, unmodified container images are running in our cluster.</p>"},{"location":"security/01-chainguard-images/#exercise-enforcing-policy","title":"Exercise: Enforcing Policy","text":"<p>Objective: Add a Kyverno policy to the <code>platform</code> repository to enforce that all Crossplane Provider pods must also come from the Chainguard registry.</p> <p>Tasks:</p> <ol> <li>Install Kyverno into your KinD cluster.</li> <li>Create a new <code>ClusterPolicy</code> manifest.</li> <li>The policy should match all pods in the <code>crossplane-system</code> namespace.</li> <li>It should verify that any image matching <code>cgr.dev/chainguard/provider-*</code> is properly signed.</li> <li>Add the policy to the <code>gitops-bootstrap/apps/platform</code> directory.</li> <li>Commit and push the change.</li> <li>Verify in the ArgoCD UI that the policy is synced and active.</li> </ol> <p>This exercise demonstrates how to use GitOps to manage not just your infrastructure, but your security policies as well.</p> <p>\u27a1\ufe0f Next: Secret Management</p>"},{"location":"security/02-secret-management/","title":"02: Secret Management in a GitOps World","text":"<p>One of the biggest challenges in a GitOps workflow is managing secrets. Git is a public, version-controlled system, which is the worst possible place to store sensitive information like API keys, database passwords, or TLS certificates.</p> <p>We need a robust solution for managing secrets that integrates with our GitOps workflow without compromising security.</p>"},{"location":"security/02-secret-management/#the-problem-with-secrets-in-git","title":"The Problem with Secrets in Git","text":"<ul> <li>Exposure: Committing a secret to a Git repository, even a private one, is a huge risk. Once it's in the Git history, it's very difficult to truly purge.</li> <li>Manual Workflows: If secrets aren't in Git, how do you get them to the cluster? Manual <code>kubectl create secret</code> commands are error-prone, not auditable, and don't scale.</li> </ul>"},{"location":"security/02-secret-management/#solution-external-secrets-operator","title":"Solution: External Secrets Operator","text":"<p>We will use the External Secrets Operator (ESO). ESO extends Kubernetes with a set of CRDs that allow you to fetch secrets from an external secret management system (like AWS Secrets Manager, Azure Key Vault, or HashiCorp Vault) and automatically sync them as native Kubernetes <code>Secret</code> objects.</p>"},{"location":"security/02-secret-management/#the-workflow","title":"The Workflow","text":"<ol> <li> <p>Store the Secret: A human or a CI/CD pipeline stores a secret in your chosen secret management system (e.g., Azure Key Vault).</p> </li> <li> <p>Create a <code>SecretStore</code>: In your Git repository, you create a <code>SecretStore</code> or <code>ClusterSecretStore</code> resource. This tells ESO how to connect to your external secret manager.</p> <pre><code># platform/secret-stores/azure-key-vault.yaml\napiVersion: external-secrets.io/v1beta1\nkind: ClusterSecretStore\nmetadata:\n  name: azure-key-vault\nspec:\n  provider:\n    azure:\n      vaultUrl: \"https://my-key-vault.vault.azure.net/\"\n      authType: \"WorkloadIdentity\"\n</code></pre> </li> <li> <p>Create an <code>ExternalSecret</code>: In your application or infrastructure repository, you create an <code>ExternalSecret</code> resource. This tells ESO which secret to fetch and what to name the resulting Kubernetes <code>Secret</code>.</p> <pre><code># infra-dev/my-app-db-secret.yaml\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: my-app-db-credentials\n  namespace: my-app\nspec:\n  refreshInterval: \"1h\"\n  secretStoreRef:\n    name: azure-key-vault\n    kind: ClusterSecretStore\n  target:\n    name: my-app-db-credentials # Name of the k8s Secret to create\n  data:\n  - secretKey: \"password\"\n    remoteRef:\n      key: \"my-app-db-password\" # Name of the secret in Azure Key Vault\n</code></pre> </li> <li> <p>ArgoCD Syncs: ArgoCD syncs the <code>ExternalSecret</code> manifest from Git to the cluster.</p> </li> <li> <p>ESO Syncs: The External Secrets Operator sees the new <code>ExternalSecret</code>. It connects to Azure Key Vault, fetches the value of <code>my-app-db-password</code>, and creates a new Kubernetes <code>Secret</code> named <code>my-app-db-credentials</code> in the <code>my-app</code> namespace with the fetched value.</p> </li> <li> <p>Pod Consumes the Secret: Your application pod can now mount the <code>my-app-db-credentials</code> secret just like any other Kubernetes secret.</p> </li> </ol>"},{"location":"security/02-secret-management/#benefits-of-this-approach","title":"Benefits of this Approach","text":"<ul> <li>No Secrets in Git: The actual secret value never touches the Git repository.</li> <li>GitOps Native: The request for a secret is managed via GitOps. We have a full audit trail of who requested which secret and for what purpose.</li> <li>Rotation: ESO can be configured to automatically re-fetch secrets on a schedule, enabling automated secret rotation.</li> <li>Separation of Concerns: The Platform Team manages the <code>SecretStores</code>, and the Application Teams manage the <code>ExternalSecrets</code> for their own applications.</li> </ul>"},{"location":"security/02-secret-management/#crossplane-and-secret-management","title":"Crossplane and Secret Management","text":"<p>Crossplane also needs to store secrets. When Crossplane provisions a database, it generates a password. This password needs to be stored somewhere so that applications can consume it.</p> <p>Crossplane is configured to automatically write these generated secrets to a Kubernetes <code>Secret</code> object. We can then use ESO to push these secrets from the Kubernetes <code>Secret</code> into a central secret manager like Azure Key Vault.</p> <p>This creates a closed-loop system:</p> <ol> <li>Crossplane creates a database and a Kubernetes <code>Secret</code> with the password.</li> <li>An <code>ExternalSecret</code> is configured to read from this Kubernetes <code>Secret</code>.</li> <li>ESO pushes the password into Azure Key Vault.</li> <li>Another application can then use a different <code>ExternalSecret</code> to read the password from Azure Key Vault.</li> </ol> <p>\u27a1\ufe0f Next: RBAC</p>"},{"location":"security/03-rbac/","title":"03: RBAC and Least Privilege","text":"<p>Role-Based Access Control (RBAC) is a critical component of a secure Kubernetes environment. In our GitOps model, we need to manage RBAC for two distinct domains:</p> <ol> <li>Who can do what in the Kubernetes cluster? (Kubernetes RBAC)</li> <li>Who can do what in our Git repositories? (Git Provider RBAC)</li> </ol>"},{"location":"security/03-rbac/#kubernetes-rbac","title":"Kubernetes RBAC","text":"<p>Our goal is the principle of least privilege. Every user and every component should only have the permissions they absolutely need to perform their function.</p>"},{"location":"security/03-rbac/#argocd-rbac","title":"ArgoCD RBAC","text":"<p>We have already configured the RBAC for the ArgoCD controllers. But what about human users?</p> <p>ArgoCD has its own RBAC system for controlling who can manage applications, projects, and repositories within the ArgoCD UI and API.</p> <p>We can manage this declaratively in the <code>argocd-rbac-cm</code> ConfigMap.</p> <p>Example: Granting a <code>dev-team</code> group read-only access to their project.</p> <pre><code># argocd-rbac-cm.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\ndata:\n  policy.csv: |\n    g, dev-team, role:readonly\n    p, role:readonly, applications, get, dev-project/*, allow\n</code></pre> <p>This configuration, when applied by our bootstrap ArgoCD app, will:</p> <ul> <li>Define a group called <code>dev-team</code>.</li> <li>Assign it a <code>readonly</code> role.</li> <li>The <code>readonly</code> role is allowed to <code>get</code> applications within the <code>dev-project</code>.</li> </ul>"},{"location":"security/03-rbac/#crossplane-rbac","title":"Crossplane RBAC","text":"<p>Crossplane introduces a new layer of RBAC. Who is allowed to create a <code>Claim</code> for a new database? Who is allowed to create a <code>Composition</code>?</p> <p>We manage this with standard Kubernetes <code>Roles</code> and <code>RoleBindings</code>.</p> <p>Example: Allowing the <code>dev-team</code> to create <code>MySQLInstance</code> claims.</p> <pre><code># rbac/dev-team-role.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: dev-team-claim-creator\n  namespace: default # Or the namespace where claims are created\nrules:\n- apiGroups:\n  - \"database.example.org\"\n  resources:\n  - \"mysqlinstances\"\n  verbs:\n  - \"create\"\n  - \"get\"\n  - \"list\"\n  - \"watch\"\n  - \"delete\"\n---\n# rbac/dev-team-binding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: dev-team-claim-binding\n  namespace: default\nsubjects:\n- kind: Group\n  name: dev-team\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: dev-team-claim-creator\n  apiGroup: rbac.authorization.k8s.io\n</code></pre> <p>These manifests are stored in our <code>platform</code> repository and synced by ArgoCD, ensuring that our RBAC policies are also managed via GitOps.</p>"},{"location":"security/03-rbac/#git-provider-rbac","title":"Git Provider RBAC","text":"<p>Equally important is the RBAC in your Git provider (e.g., GitHub, GitLab).</p>"},{"location":"security/03-rbac/#branch-protection-rules","title":"Branch Protection Rules","text":"<ul> <li><code>platform</code> repository: The <code>main</code> branch should be heavily protected. Require multiple approvers from the Platform Team for all pull requests. Forbid force pushing.</li> <li><code>infra-*</code> repositories: The <code>main</code> branch should be protected. Require at least one approval from a senior member of the DevOps/SRE team.</li> <li>Application repositories: The <code>main</code> branch should be protected. Require at least one approval from a peer developer.</li> </ul>"},{"location":"security/03-rbac/#codeowners","title":"CODEOWNERS","text":"<p>Use the <code>CODEOWNERS</code> file in each repository to automatically request reviews from the responsible team.</p> <p>Example: <code>platform/.github/CODEOWNERS</code></p> <pre><code># All changes to Compositions must be reviewed by the platform team\n/compositions/  @my-org/platform-team\n\n# Changes to RBAC policies require security review\n/rbac/          @my-org/security-team\n</code></pre> <p>By codifying our RBAC policies in both Kubernetes and Git, we create a secure, auditable, and automated system for managing permissions.</p> <p>\u27a1\ufe0f Next Section: Observability</p>"}]}